
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface ITimeoutSettingContract : IDependency
    {
        #region Setting

		TimeoutSetting View(int Id);

        TimeoutSettingDto Edit(int Id);

        IQueryable<TimeoutSetting> Settings { get; }

		OperationResult Insert(params TimeoutSettingDto[] dtos);

		OperationResult Update(params TimeoutSettingDto[] dtos);

		OperationResult Remove(params int[] ids);

		OperationResult Recovery(params int[] ids);

        OperationResult Delete(params int[] ids);

		OperationResult Enable(params int[] ids);

		OperationResult Disable(params int[] ids);

        /// <summary>
        /// 获取配货单超时配置对象
        /// </summary>
        TimeoutSetting GetTimeoutSettingForOrderblank(OrderblankAction action);

        /// <summary>
        /// 退货超时
        /// </summary>
        /// <returns></returns>
        TimeoutSetting GetTimeoutSettingForReturn();
        

        bool CheckExists(Expression<Func<TimeoutSetting, bool>> predicate, int id = 0);


        /// <summary>
        /// 计算超时时长,单位(秒)
        /// </summary>
        /// <param name="timeoutName">超时名称</param>
        /// <param name="number">订单号</param>
        /// <returns>超时时长,单位(秒)</returns>
        int ComputeTimeouts(string timeoutName, string number);

        #endregion
    }
}
