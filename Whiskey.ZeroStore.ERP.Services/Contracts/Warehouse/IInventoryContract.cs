
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Collections;
using Whiskey.ZeroStore.ERP.Models.Enums;
using System.Data.Entity;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface IInventoryContract : IDependency
    {
        #region Inventory

        Inventory View(int Id);

        InventoryDto Edit(int Id);

        IQueryable<Inventory> Inventorys { get; }

        OperationResult Insert(params InventoryDto[] dtos);
        OperationResult Insert(params Inventory[] inventories);


        OperationResult Update(InventoryDto[] dtos, bool isTrans = false);

        OperationResult Remove(params int[] ids);

        OperationResult Recovery(params int[] ids);

        OperationResult Delete(params int[] ids);

        OperationResult Enable(params int[] ids);

        OperationResult Disable(params int[] ids);




        #endregion
        /// <summary>
        /// 更新库存的商品价格
        /// </summary>
        OperationResult UpdatePriceByDiscount(ProductDiscount discount, float? tagPrice, string[] productNumber, bool isTrans);



        OperationResult Update(Inventory ent);


        /// <summary>
        /// 缓存被加入到零售列表的库存
        /// </summary>
        /// <param name="barcodearr"></param>
        void SetInventoryLocked(TimeSpan period, params LockInventoryDto[] dtos);

        /// <summary>
        /// 手动释放锁定库存
        /// </summary>
        /// <param name="barcodearr"></param>
        void SetInventoryUnLocked(params string[] barcodes);



        /// <summary>
        /// 判断库存是否处于锁定状态
        /// </summary>
        /// <param name="barcodearr"></param>
        bool IsInventoryDisable(string barcode, int currentOperatorId);

        OperationResult Update(params Inventory[] ent);

        /// <summary>
        /// 不同场景下对流水号校验
        /// </summary>
        /// <param name="context">场景</param>
        /// <param name="storeId">店铺Id</param>
        /// <param name="adminId">操作人</param>
        /// <param name="barcodes">流水号</param>
        /// <returns>dict,key每个barcode,对应一个tuple</returns>
        Dictionary<string, Tuple<bool, string, string>> CheckBarcodes(InventoryCheckContext context, int storeId, int? storageId, int adminId, params string[] barcodes);

        DbContextTransaction GetTransaction();

        OperationResult BulkInsert(IEnumerable<Inventory> entities);
        OperationResult BulkUpdate(IEnumerable<Inventory> entities);

    }
}
