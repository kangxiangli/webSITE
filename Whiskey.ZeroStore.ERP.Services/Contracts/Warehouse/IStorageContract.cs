
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface IStorageContract : IDependency
    {
        #region Storage

        StorageDto View(int Id);

		StorageDto Edit(int Id);

        IQueryable<Storage> Storages { get; }

		OperationResult Insert(params StorageDto[] dtos);

		OperationResult Update(params StorageDto[] dtos);
        OperationResult Update(params Storage[] entities);


        OperationResult Remove(params int[] ids);

		OperationResult Recovery(params int[] ids);

        OperationResult Delete(params int[] ids);

		OperationResult Enable(params int[] ids);

		OperationResult Disable(params int[] ids);

        bool CheckExists(Expression<Func<Storage, bool>> predicate, int id = 0);
        List<Values<string, string>> SelectList(string title, Expression<Func<Storage, bool>> expr);
                
        #endregion
        //yxk 2015-9-23
        /// <summary>
        /// 对指定的店铺下的仓库字段进行修改
        /// </summary>
        /// <param name="storeId">店铺id</param>
        /// <param name="exp">对店铺下的仓库进行过滤，</param>
        /// <param name="updateWords">仓库中需要修改的字段名</param>
        /// <param name="updateValues">对应的字段修改后的值</param>
        OperationResult UpdateWord(int storeId, Expression<Func<Storage, bool>> exp, string[] updateWords, object[] updateValues);


        /// <summary>
        /// 过滤不在权限范围内的storageId
        /// </summary>
        List<int> FilterStorageId(int? userId, IAdministratorContract _adminContract, int? storageIdToCheck);


        IQueryable<Storage> GetUserEnableStorages(int? userId, IAdministratorContract _adminContract);

        /// <summary>
        /// 转移仓库中的库存
        /// </summary>
        /// <param name="Id"></param>
        /// <param name="StoreId">新店铺id</param>
        /// <param name="StorageId">新仓库id</param>
        /// <returns></returns>
        OperationResult ShiftStorage(int Id, int StoreId, int StorageId);
    }
}
