
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface IMessagerContract : IDependency
    {
        #region Messager

        Messager View(int Id);

        MessagerDto Edit(int Id);

        IQueryable<Messager> Messagers { get; }

        OperationResult Insert(Action<List<int>> sendMessageAction, params MessagerDto[] dtos);
        OperationResult Insert(bool contentToTitle, Action<List<int>> sendMessageAction, params MessagerDto[] dtos);

        OperationResult Update(Action sendMessageAllAction, params MessagerDto[] dtos);

        OperationResult Remove(Action sendMessageAllAction, params int[] ids);

        OperationResult Recovery(Action sendMessageAllAction, params int[] ids);

        OperationResult Delete(Action sendMessageAllAction, params int[] ids);

        OperationResult Enable(Action sendMessageAllAction, params int[] ids);

        OperationResult Disable(Action sendMessageAllAction, params int[] ids);

        bool CheckExists(Expression<Func<Messager, bool>> predicate, int id = 0);

        #endregion
    }
}
