
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Models.Entities;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface IMemberConsumeContract : IDependency
    {
        #region MemberConsume

        MemberConsume View(int Id);

        MemberConsumeDto Edit(int Id);

        IQueryable<MemberConsume> MemberConsumes { get; }

        OperationResult Insert(params MemberConsumeDto[] dtos);

        OperationResult Update(params MemberConsumeDto[] dtos);

        OperationResult Remove(params int[] ids);

        OperationResult Recovery(params int[] ids);

        OperationResult Delete(params int[] ids);

        OperationResult Enable(params int[] ids);

        OperationResult Disable(params int[] ids);

        bool CheckExists(Expression<Func<MemberConsume, bool>> predicate, int id = 0);

        OperationResult Insert(params MemberConsume[] entities);
        void LogWhenRetail(Retail retailEntity);

        /// <summary>
        /// 保存会员储值消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">储值消费,消费金额不能小于0</param>
        /// <returns></returns>
        void LogBalanceWhenAdjustDeposit(int memberId, decimal balanceConsume);



        /// <summary>
        /// 保存会员积分消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分消费,消费金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        void LogScoreWhenAdjustDeposit(int memberId, decimal scoreConsume);



        /// <summary>
        /// 保存会员积分消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="storeId">退货店铺id</param>
        /// <param name="scoreConsume">积分消费,消费金额不能小于0</param>
        /// <param name="returnNumber">退货单号</param>
        /// <returns></returns>
        void LogScoreWhenReturnProduct(int memberId, int storeId, decimal scoreConsume, string returnNumber);

        /// <summary>
        /// 保存会员补卡积分扣除
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分扣除,扣除金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        void LogScoreWhenAttendanceRepair(int memberId, decimal scoreConsume);


        /// <summary>
        /// 保存会员请假积分扣除
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分扣除,扣除金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        void LogScoreWhenLeave(int memberId, decimal scoreConsume);



        /// <summary>
        /// 切换归属店铺
        /// </summary>
        /// <param name="memberId"></param>
        /// <param name="scoreConsume"></param>
        void LogScoreWhenSwitchStore(int memberId, decimal scoreConsume);



        /// <summary>
        /// 补考
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="scoreConsume">消耗积分</param>
        void LogScoreWhenRetryExam(int memberId, decimal scoreConsume);
        #endregion
    }
}
