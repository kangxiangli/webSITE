
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Web.Mvc;
using System.IO;
using Whiskey.ZeroStore.ERP.Models.Enums;
using Whiskey.Web;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface IMemberContract : IDependency
    {
        #region Member

        Member View(int Id);

        MemberDto Edit(int Id);

        IQueryable<Member> Members { get; }

        OperationResult Insert(params MemberDto[] dtos);

        OperationResult Update(params MemberDto[] dtos);

        OperationResult Remove(params int[] ids);

        OperationResult Recovery(params int[] ids);

        OperationResult Delete(params int[] ids);

        OperationResult Enable(params int[] ids);

        OperationResult Disable(params int[] ids);

        bool CheckExists(Expression<Func<Member, bool>> predicate, int id = 0);

        /// <summary>
        /// 重置用户密码
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        OperationResult RestPassWord(int Id);
        /// <summary>
        /// 获取会员键值对列表
        /// </summary>
        /// <param name="title">默认显示标题</param>
        /// <returns></returns>
        List<SelectListItem> SelectList(string title);
        /// <summary>
        /// 根据第三方OpenId获取会员信息,成功Data上会附加Member信息
        /// </summary>
        /// <param name="strThirdLoginId"></param>
        /// <param name="thirdLoginType"></param>
        /// <returns></returns>
        OperationResult CheckThirdAccount(string strThirdLoginId, ThirdLoginFlag thirdLoginType);

        /// <summary>
        /// 第三方登录--存在直接登录，不存在添加成功后登录
        /// </summary>
        /// <param name="strThirdLoginId">第三方Id</param>
        /// <param name="thirdLoginType">第三方类型</param>
        /// <param name="registerType">注册类型</param>
        /// <returns></returns>
        OperationResult ThirdLogin(string strThirdLoginId, ThirdLoginFlag thirdLoginType, RegisterFlag registerType);

        /// <summary>
        /// 登录
        /// </summary>
        /// <param name="strLoginName"></param>
        /// <param name="strPassWord"></param>
        /// <returns></returns>
        OperationResult Login(string strLoginName, string strPassWord);

        /// <summary>
        /// APP注册
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        OperationResult Register(params MemberDto[] dto);

        /// <summary>
        /// APP修改密码
        /// </summary>
        /// <param name="strPhoneNum"></param>
        /// <returns></returns>
        OperationResult UpdatePassWord(string strPhoneNum, string strPassWord);

        OperationResult UploadImage(int memberId, string conPath);

        #endregion
        ///商品零售和商品退货需要修改会员储值积分，应避免使用Update方法 yxk
        /// <summary>
        /// 修改会员的积分、储值、获取积分
        /// </summary>
        /// <param name="memberDto"></param>
        /// <returns></returns>
        OperationResult UpdateScore(MemberDto memberDto);

        //void Update(Member member);

        OperationResult Update(Member member);

        OperationResult UpdatePassWord(MemberDto dto);

        void CreateCardNum();
        /// <summary>
        /// 生成会员卡号
        /// </summary>
        /// <returns></returns>
        string GetCardNum();

        string RandomUniquelyId();

        /// <summary>
        /// PC会员登录
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        OperationResult CheckLogin(MemberDto dto);



        /// <summary>
        /// 零售页会员登陆
        /// </summary>
        /// <param name="loginName">用户名|手机号|会员卡号|唯一标识符UniquelyIdentifies</param>
        /// <param name="passwd">密码，app登陆模式不需要传</param>
        /// <param name="currentStoreId">当前店铺id，用于校验会员归属店铺</param>
        /// <param name="loginModel">登陆模式</param>
        OperationResult MemberRetailLogin(string loginName, string passwd, int? memberId, int currentStoreId, MemberRetailLoginModeEnum loginModel);


        /// <summary>
        /// 会员切换店铺
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="newStoreId">新的店铺id</param>
        /// <returns></returns>
        //List<IdName> GetMemberRole(int MemberId);

        OperationResult SwitchMemberStore(int memberId, int newStoreId);
        /// <summary>
        /// 切换会员类型
        /// </summary>
        /// <param name="memberId"></param>
        /// <param name="typeId"></param>
        /// <returns></returns>
        OperationResult SwitchMemberType(int memberId, int typeId);

        OperationResult BatchImport(DateTime? CreateStartDate, DateTime? CreateEndDate,params MemberImportEntry[] members);

        #region 积分操作
        /// <summary>
        /// 获取当次操作积分
        /// </summary>
        /// <param name="hours">时长</param>
        /// <param name="adminId">用户ID（使用AuthorityHelper.OperatorId时传-1）</param>
        /// <param name="operation">要进行的操作（请假："leave";加班："overtime"）</param>
        /// <returns></returns>
        OperationResult CheckLeavePointsInfo(decimal hours, int adminId = -1, string operation = "leave", string project = "website");

        /// <summary>
        /// 将积分返还给用户
        /// </summary>
        /// <param name="member">用户信息</param>
        /// <param name="LeavePoints">要返还的积分数(扣除传负数，增加传正数)</param>
        /// <returns></returns>
        OperationResult ReturnPoints(int memberId, decimal LeavePoints);
        #endregion

        /// <summary>
        /// 移除会员指定的JpushId,因为可能登录多个设备
        /// </summary>
        /// <param name="memberId"></param>
        /// <returns></returns>
        OperationResult RemoveJpushId(int memberId, string JPushRegistrationID);

        /// <summary>
        /// 刷新会员JpushId
        /// </summary>
        /// <param name="memberId"></param>
        /// <returns></returns>
        OperationResult RefreshJpushId(int memberId, string JPushRegistrationID);

        /// <summary>
        /// 向会员推送App通知
        /// </summary>
        /// <param name="memberIds"></param>
        void SendAppNotification(string title, string content, params int[] memberIds);
        /// <summary>
        /// 向会员推送App通知
        /// </summary>
        /// <param name="title">标题</param>
        /// <param name="content">内容</param>
        /// <param name="Flag">APP内部跳转使用标识</param>
        /// <param name="memberIds">会员Id</param>
        void SendAppNotification(string title, string content, string Flag, params int[] memberIds);
    }
}
