
//   This file was generated by T4 code generator Contract_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    /// <summary>
    /// 服务合约
    /// </summary>
    public interface IMemberDepositContract : IDependency
    {
        #region MemberDeposit
        /// <summary>
        /// 获取实体数据
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns>MemberDeposit</returns>
		MemberDeposit View(int Id);

        /// <summary>
        /// 获取领域模型实体数据
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns>MemberDepositDto</returns>
        MemberDepositDto Edit(int Id);
        /// <summary>
        /// 获取实体数据集合
        /// </summary>
        IQueryable<MemberDeposit> MemberDeposits { get; }

        /// <summary>
        /// 获取会员当前的储值系数,用于储值消费时,计算储值成本
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <returns>储值系数</returns>
        decimal GetCurrentQuotiety(int memberId);

        /// <summary>
        /// 插入数据
        /// </summary>
        /// <param name="dtos">领域模型实体</param>
        /// <returns></returns>
		OperationResult Insert(params MemberDepositDto[] dtos);

        /// <summary>
        /// 修改数据
        /// </summary>
        /// <param name="dtos">领域模型实体</param>
        /// <returns></returns>
		OperationResult Update(params MemberDepositDto[] dtos);
        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        OperationResult Update(ICollection<MemberDeposit> dtos);
        /// <summary>
        /// 逻辑删除数据
        /// </summary>
        /// <param name="ids">主键Id</param>
        /// <returns></returns>
        OperationResult Remove(params int[] ids);

        /// <summary>
        /// 恢复逻辑删除数据
        /// </summary>
        /// <param name="ids">主键Id</param>
        /// <returns></returns>
		OperationResult Recovery(params int[] ids);
        /// <summary>
        /// 物理删除数据
        /// </summary>
        /// <param name="ids">主键Id</param>
        /// <returns></returns>
        OperationResult Delete(params int[] ids);

        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">主键Id</param>
        /// <returns></returns>
		OperationResult Enable(params int[] ids);

        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">主键Id</param>
        /// <returns></returns>
		OperationResult Disable(params int[] ids);
        /// <summary>
        /// 校验数据是否存在
        /// </summary>
        /// <param name="predicate">校验条件Lamda表达式</param>
        /// <param name="id">主键Id</param>
        /// <returns></returns>
        bool CheckExists(Expression<Func<MemberDeposit, bool>> predicate, int id = 0);

        /// <summary>
        /// 会员微信充值（需充值店铺信息）
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        OperationResult InsertWx(params MemberDepositDto[] dtos);

        /// <summary>
        /// 员工微信充值
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        OperationResult InsertWxAdminId(params MemberDepositDto[] dtos);

        /// <summary>
        /// 零售赠送积分时保存充值记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="getScore">赠送积分</param>
        /// <param name="remarks">备注</param>
        /// <returns></returns>
        void LogGetScoreWhenRetail(int storeId,Member memberEntity, decimal getScore, string remarks);


        /// <summary>
        /// 储值积分增加储值
        /// </summary>
        void LogBalanceWhenAdjustDeposit(Member memberEntity, decimal balanceToAdd, string remarks);

        /// <summary>
        /// 储值积分增加积分
        /// </summary>
        void LogScoreWhenAdjustDeposit(Member memberEntity, decimal scoreToAdd, string remarks);

        /// <summary>
        /// 加班奖励
        /// </summary>
        /// <param name="memberEntity">用户信息</param>
        /// <param name="getScore">奖励的积分</param>
        void LogGetScoreWhenOvertime(Member memberEntity, decimal getScore);
        
        /// <summary>
        /// 退货时保存记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="returnScore">返还积分</param>
        /// <param name="retailNumber">退货单号</param>
        void LogScoreWhenReturnProduct(int storeId, Member memberEntity, decimal returnScore, string retailNumber);


        /// <summary>
        /// 退货时保存记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="returnBalance">返还储值</param>
        /// <param name="retailNumber">退货单号</param>
        void LogBalanceWhenReturnProduct(int storeId, Member memberEntity, decimal returnBalance, string retailNumber);


        /// <summary>
        /// 考试通过奖励积分
        /// </summary>
        void LogScoreWhenPassExam(Member memberEntity, decimal scoreToAdd);

        /// <summary>
        /// 生成充值记录
        /// </summary>
        /// <param name="rechargeActivityId">充值活动id</param>
        /// <param name="memberIds">充值会员id</param>
        /// <returns></returns>
        OperationResult GenerateRechargeData(DateTime start, DateTime end, int rechargeActivityId, params int[] memberIds);



        /// <summary>
        /// 会员储值后,计算会员等级,充值积分禁止调用此方法
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="cashAndCardAmount">充值金额(现金+刷卡之和,不含赠送储值或积分)</param>
        /// <returns>返回MemberLevel的Id,如果没有等级或出现异常,默认返回0</returns>
        int CalculateMemberLevel(int memberId, decimal cashAndCardAmount);

        #endregion
    }
}
