
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Security.Cryptography;
using System.Text;
using Whiskey.Utility.Secutiry;
using System.Web.Mvc;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Member;
using Whiskey.Utility.Logging;
using System.IO;
using Whiskey.ZeroStore.ERP.Models.Enums;
using Whiskey.ZeroStore.ERP.Models.DTO;
using Whiskey.Web;
using System.Xml.Linq;
using Whiskey.Utility.Collections;
using System.Text.RegularExpressions;
using Whiskey.jpush.api;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{
    public class MemberService : ServiceBase, IMemberContract
    {
        #region MemberService

        #region 声明数据层操作对象
        private readonly IRepository<Member, int> _memberRepository;
        private readonly ILogger _Logger = LogManager.GetLogger(typeof(MemberService));

        private readonly IRepository<Administrator, int> _adminRepository;

        private readonly IRepository<Collocation, int> _collocationRepository;

        private readonly IRepository<MemberCollRelation, int> _memberCollRelationRepository;

        private readonly IScoreRuleContract _scoreRuleContract;
        private readonly IRepository<CouponItem, int> _couponContract;
        private readonly IStoreContract _storeContract;
        private readonly IMemberConsumeContract _memberConsumeContract;
        private readonly IMemberImportRecordContract _memberImportRecordContract;
        private readonly IMemberFaceContract _MemberFaceContract;
        private readonly IConfigureContract _configureContract;
        private readonly IRepository<MemberType, int> _MemberTypeRepository;
        private readonly IRepository<CollocationQuestionnaire, int> _CollocationQuestionnaireRepository;



        public MemberService(
            IRepository<Member, int> memberRepository,
            IRepository<Administrator, int> adminRepository,
            IRepository<Collocation, int> collocationRepository,
            IRepository<MemberCollRelation, int> memberCollRelationRepository,
            IScoreRuleContract scoreRuleContract,
            IRepository<CouponItem, int> couponContract,
             IStoreContract storeContract,
            IMemberConsumeContract memberConsumeContract,
            IMemberFaceContract MemberFaceContract,
            IMemberImportRecordContract memberImportRecordContract,
            IRepository<MemberType, int> _MemberTypeRepository,
            IRepository<CollocationQuestionnaire, int> _CollocationQuestionnaireRepository,
            IConfigureContract configureContract
        ) : base(memberRepository.UnitOfWork)
        {
            _memberRepository = memberRepository;
            _adminRepository = adminRepository;
            _collocationRepository = collocationRepository;
            _memberCollRelationRepository = memberCollRelationRepository;
            _scoreRuleContract = scoreRuleContract;
            _couponContract = couponContract;
            _storeContract = storeContract;
            _memberConsumeContract = memberConsumeContract;
            _memberImportRecordContract = memberImportRecordContract;
            _MemberFaceContract = MemberFaceContract;
            _configureContract = configureContract;
            this._MemberTypeRepository = _MemberTypeRepository;
            this._CollocationQuestionnaireRepository = _CollocationQuestionnaireRepository;
        }
        #endregion

        #region 根据Id获取数据
        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns>数据实体</returns>
		public Member View(int Id)
        {
            var entity = _memberRepository.GetByKey(Id);
            return entity;
        }
        #endregion

        #region 根据Id获取数据
        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns>数据实体模型</returns>
		public MemberDto Edit(int Id)
        {
            var entity = _memberRepository.GetByKey(Id);
            Mapper.CreateMap<Member, MemberDto>();
            var dto = Mapper.Map<Member, MemberDto>(entity);
            return dto;
        }
        #endregion

        #region 获取数据集
        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Member> Members { get { return _memberRepository.Entities; } }
        #endregion

        #region 按条件检查数据是否存在
        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Member, bool>> predicate, int id = 0)
        {
            return _memberRepository.ExistsCheck(predicate, id);
        }
        #endregion

        #region 添加数据
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params MemberDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                UnitOfWork.TransactionEnabled = true;
                IQueryable<Member> listMember = Members;
                Dictionary<string, int> dic = new Dictionary<string, int>();
                foreach (var dto in dtos)
                {
                    if (!string.IsNullOrEmpty(dto.MemberName))
                    {
                        dto.MemberName = dto.MemberName.Trim();
                        int count = Members.Where(x => x.MemberName == dto.MemberName).Count();
                        if (count > 0)
                        {
                            return new OperationResult(OperationResultType.Error, "该昵称已经存在！", "MemberName");
                        }
                    }
                    else
                    {
                        dto.MemberName = GetRandomName(listMember);
                    }
                    if (!string.IsNullOrEmpty(dto.MobilePhone))
                    {
                        dto.MobilePhone = dto.MobilePhone.Trim();
                        IQueryable<Member> list = Members.Where(x => x.MobilePhone == dto.MobilePhone);
                        if (list.Count() > 0)
                        {
                            return new OperationResult(OperationResultType.Error, "该手机号码已经注册！", "MobilePhone");
                        }
                    }
                    dto.MemberPass = dto.MemberPass.MD5Hash();
                    string strNum = RandomUniquelyId(listMember);
                    dto.UniquelyIdentifies = strNum;
                    dto.CardNumber = strNum;
                    if (dto.CollocationId != null)
                    {
                        int collId = dto.CollocationId ?? 0;
                        dic.Add(strNum, collId);
                    }
                    if (!String.IsNullOrEmpty(dto.CardNumber))
                    {
                        dto.CardNumber = dto.CardNumber.Trim();
                        int count = listMember.Where(x => x.CardNumber == dto.CardNumber).Count();
                        if (count > 0)
                        {
                            dto.CardNumber = GetCardNum();
                        }
                    }
                }
                OperationResult result = _memberRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = dto.CreateTime ?? DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.DateofBirth = DateTime.Now;
                    entity.LoginTime = DateTime.Now;

                    //var roleids = dto.MemberRoleIds.ToList();
                    //entity.MemberRoles = _memberRoleContract.Entities.Where(w => w.IsEnabled && !w.IsDeleted && roleids.Contains(w.Id)).ToList();
                    return entity;
                });
                OperationResult oper;
                int index = UnitOfWork.SaveChanges();
                if (index > 0)
                {
                    oper = new OperationResult(OperationResultType.Success);
                }
                else
                {
                    oper = new OperationResult(OperationResultType.Error, "添加失败");
                }

                return oper;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException ex)
            {
                _Logger.Error<string>(ex.ToString());
                return new OperationResult(OperationResultType.Error, "添加失败！");
            }
        }

        /// <summary>
        /// 生成指定时间段内的日期
        /// </summary>
        /// <param name="startDate">开始日期</param>
        /// <param name="endDate">结束日期</param>
        /// <returns></returns>
        private List<DateTime> generateRandomDate(DateTime? startDate, DateTime? endDate)
        {
            var dateList = new List<DateTime>();
            if (!startDate.HasValue && !endDate.HasValue)
            {
                return dateList;
            }
            if ((startDate.HasValue && !endDate.HasValue) || (!startDate.HasValue && endDate.HasValue))
            {
                throw new Exception("创建日期无效");
            }
            var days = endDate.Value.Date.Subtract(startDate.Value.Date).Days;
            for (int i = 0; i < days; i++)
            {
                dateList.Add(startDate.Value.AddDays(i).Date);
            }
            return dateList;
        }

        /// <summary>
        /// 批量生成uniqid
        /// </summary>
        /// <param name="count"></param>
        /// <returns></returns>
        private string[] BatchGenerateUniqId(int count)
        {
            var uniqIds = new HashSet<string>();
            var rand = new Random();
            var idsFromDb = Members.Select(m => m.UniquelyIdentifies).ToList();
            var uniqIdList = RandomUniquelyId(idsFromDb, count);
            if (uniqIdList.Length < count)
            {
                throw new Exception("会员uniqueid生成失败");
            }
            return uniqIdList;
        }

        public OperationResult BatchImport(DateTime? CreateStartDate, DateTime? CreateEndDate, params MemberImportEntry[] members)
        {
            using (var transaction = _memberRepository.GetTransaction())
            {
                try
                {
                    int skipCount = 0;
                    var totalCount = members.Length;
                    if ((CreateEndDate.HasValue && !CreateEndDate.HasValue) || (!CreateStartDate.HasValue && CreateEndDate.HasValue))
                    {
                        return OperationResult.Error("开始日期和结束日期必须同时有值或同时没有值");
                    }

                    // trim处理
                    members.Each(m =>
                    {
                        m.RealName = m.RealName.Trim();
                        m.MobilePhone = m.MobilePhone.Trim();
                    });

                    // 参数空值校验
                    var list = members.ToList();
                    skipCount += list.Count(m => string.IsNullOrEmpty(m.RealName) || string.IsNullOrEmpty(m.MobilePhone));
                    list.RemoveAll(m => string.IsNullOrEmpty(m.RealName) || string.IsNullOrEmpty(m.MobilePhone));
                    var beforeCount = list.Count;


                    // 过滤重复数据
                    list = list.GroupBy(m => new { m.RealName, m.MobilePhone }).Where(m => m.Count() == 1).SelectMany(m => m).ToList();
                    skipCount += beforeCount - list.Count;

                    var dtos = members.Select(m => new Member
                    {
                        StoreId = m.StoreId,

                        LevelId = null,
                        RegisterType = (int)RegisterFlag.Web,
                        MemberName = null,
                        ThirdLoginId = null,
                        ThirdLoginType = 0,
                        UniquelyIdentifies = null,
                        MemberPass = "123123",
                        MemberTypeId = 1,
                        CollocationId = null,
                        Balance = 0M,
                        Score = 0M,
                        CardNumber = null,
                        Email = null,
                        MobilePhone = m.MobilePhone,
                        RealName = m.RealName,
                        Gender = m.Gender,
                        DateofBirth = null,
                        IDCard = null,
                        UserPhoto = "/Content/Images/logo-_03.png",
                        IsLockedStore = false,
                        Notes = null,
                        Id = 0,

                    }).ToList();

                    // 手机号格式校验
                    var phones = dtos.Select(d => d.MobilePhone).ToList();
                    string strReg = "(1(([3587][0-9])|(47)|[8][0126789]))\\d{8}$";
                    var invalidPhones = phones.Where(str => !Regex.IsMatch(str, strReg)).ToList();
                    skipCount += invalidPhones.Count;
                    dtos.RemoveAll(x => invalidPhones.Contains(x.MobilePhone));
                    if (!dtos.Any())
                    {
                        return OperationResult.Error("没有符合条件的数据");
                    }

                    // 手机号重复过滤
                    var invalidMobiles = Members.Where(x => phones.Contains(x.MobilePhone)).Select(x => x.MobilePhone).ToList();
                    skipCount += invalidMobiles.Count;
                    dtos.RemoveAll(x => invalidMobiles.Contains(x.MobilePhone));
                    if (!dtos.Any())
                    {
                        return OperationResult.Error("没有符合条件的数据");
                    }
                    var uniqIdList = BatchGenerateUniqId(dtos.Count);
                    for (int i = 0; i < dtos.Count; i++)
                    {
                        var dto = dtos[i];
                        dto.MemberName = dto.CardNumber = dto.UniquelyIdentifies = uniqIdList[i];
                        dto.MemberPass = dto.MemberPass.MD5Hash();
                    }

                    // 保存导入记录
                    var recordEntity = new MemberImportRecord
                    {
                        TotalCount = totalCount,
                        SuccessCount = dtos.Count,
                        CreateEndtDate = CreateEndDate,
                        CreateStartDate = CreateStartDate,
                        StoreId = dtos.First().StoreId,
                    };

                    var res = _memberImportRecordContract.Insert(recordEntity);
                    if (res.ResultType != OperationResultType.Success)
                    {
                        throw new Exception("导入记录保存失败");
                    }

                    var rand = new Random();
                    List<DateTime> dateRange;
                    if (!CreateStartDate.HasValue && !CreateStartDate.HasValue)
                    {
                        dateRange = DateHelper.GetRandomDateTime(DateTime.Now, DateTime.Now, dtos.Count);
                    }
                    else
                    {
                        dateRange = DateHelper.GetRandomDateTime(CreateStartDate.Value, CreateEndDate.Value, dtos.Count);
                    }
                    var idx = 0;
                    dtos.Each(entity =>
                    {
                        if (dateRange.Count > 0)
                        {
                            // 创建日期随机生成
                            idx = rand.Next(0, dateRange.Count);
                            entity.CreatedTime = dateRange[idx];
                        }
                        else
                        {
                            entity.CreatedTime = DateTime.Now;
                        }
                        entity.MemberImportRecordId = recordEntity.Id;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        entity.DateofBirth = DateTime.Now;
                        entity.LoginTime = DateTime.Now;
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;

                    });
                    var cnt = _memberRepository.Insert(dtos.AsEnumerable());
                    if (cnt != dtos.Count)
                    {
                        throw new Exception("会员记录导入失败");
                    }
                    transaction.Commit();
                    OperationResult oper;
                    oper = new OperationResult(OperationResultType.Success, string.Empty, new
                    {
                        skipCount = skipCount,
                        succCount = dtos.Count
                    });
                    return oper;
                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return OperationResult.Error(e.Message);
                }
            }



        }
        #endregion

        #region 修改数据
        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params MemberDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                UnitOfWork.TransactionEnabled = true;
                IQueryable<Member> listMemeber = Members;
                IQueryable<Administrator> listAdmin = _adminRepository.Entities;
                List<MemberCollRelation> listMe = new List<MemberCollRelation>();
                List<MemberCollRelation> listRe = new List<MemberCollRelation>();
                foreach (var dto in dtos)
                {
                    dto.MemberName = dto.MemberName.Trim();
                    int count = listMemeber.Where(x => x.MemberName == dto.MemberName && x.Id != dto.Id).Count();
                    if (count > 0)
                    {
                        return new OperationResult(OperationResultType.Error, "该昵称已经存在");
                    }
                    if (!string.IsNullOrEmpty(dto.MobilePhone))
                    {
                        dto.MobilePhone = dto.MobilePhone.Trim();
                        count = listMemeber.Where(x => x.MobilePhone == dto.MobilePhone && x.Id != dto.Id).Count();
                        if (count > 0)
                        {
                            return new OperationResult(OperationResultType.Error, "该手机号码已经注册！");
                        }
                    }
                    var temp = listMemeber.Where(x => x.Id == dto.Id).FirstOrDefault();
                    if (string.IsNullOrEmpty(temp.CardNumber))
                    {
                        count = listMemeber.Where(x => x.CardNumber == temp.UniquelyIdentifies).Count();
                        if (count > 0)
                        {
                            dto.CardNumber = GetCardNum();
                        }
                        else
                        {
                            dto.CardNumber = temp.UniquelyIdentifies;
                        }
                    }
                    else
                    {
                        dto.CardNumber = temp.CardNumber;
                    }
                    if (temp != null)
                    {
                        if (!string.IsNullOrEmpty(dto.ResetPass))
                        {
                            dto.MemberPass = dto.ResetPass.MD5Hash();
                        }
                        else
                        {
                            dto.MemberPass = temp.MemberPass;
                        }
                        dto.UniquelyIdentifies = temp.UniquelyIdentifies;
                        dto.Score = temp.Score;
                        dto.Balance = temp.Balance;
                        dto.MobileInfos = temp.MobileInfos;
                        dto.MemberFigures = temp.MemberFigures;
                        Administrator admin = listAdmin.FirstOrDefault(x => x.Member.UniquelyIdentifies == temp.UniquelyIdentifies);
                        if (admin != null)
                        {
                            admin.Member.MobilePhone = temp.MobilePhone;
                            admin.Member.Email = temp.Email;
                            admin.Member.RealName = temp.RealName;
                            admin.Member.Gender = temp.Gender;
                            admin.UpdatedTime = DateTime.Now;
                            _adminRepository.Update(admin);
                        }
                    }
                    else
                    {
                        return new OperationResult(OperationResultType.Error, "账号不存在");
                    }
                    if (dto.CollocationId != null)
                    {
                        IQueryable<MemberCollRelation> listRelat = _memberCollRelationRepository.Entities;
                        var re = listRelat.FirstOrDefault(x => x.MemberId == dto.Id && x.CollocationId == dto.CollocationId);
                        if (re == null)
                        {
                            listMe.Add(new MemberCollRelation()
                            {
                                CollocationId = dto.CollocationId ?? 0,
                                MemberId = dto.Id,
                            });
                        }
                        else
                        {
                            re.IsDeleted = false;
                            re.IsEnabled = true;
                            listRe.Add(re);

                        }
                    }

                    var ress = _MemberFaceContract.MoveMemberToNewFaceSet(dto.Id, dto.StoreId);
                    if (ress.ResultType != OperationResultType.Success)
                    {
                        return new OperationResult(OperationResultType.Error, $"人脸信息修改失败,{ress.Message}");
                    }
                }

                OperationResult result = _memberRepository.Update(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    if (dto.CreateTime.HasValue)
                    {
                        entity.CreatedTime = dto.CreateTime.Value;
                    }
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;


                    //var roleids = dto.MemberRoleIds.ToList();

                    //var ent = _memberRepository.Entities.FirstOrDefault(f => f.Id == entity.Id);
                    //ent.MemberRoles.Clear();
                    //_memberRepository.Update(ent);

                    //entity.MemberRoles = _memberRoleContract.Entities.Where(w => w.IsEnabled && !w.IsDeleted && roleids.Contains(w.Id)).ToList();

                    return entity;
                });
                if (listMe.Count() > 0)
                {
                    _memberCollRelationRepository.Insert(listMe.AsEnumerable());
                }
                if (listRe.Count() > 0)
                {
                    _memberCollRelationRepository.Update(listRe);
                }
                int res = UnitOfWork.SaveChanges();
                if (res > 0)
                {
                    return new OperationResult(OperationResultType.Success, "修改成功");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, "修改失败");
                }
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }


        #endregion

        #region 移除数据
        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 恢复数据
        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 删除数据
        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _memberRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }
        #endregion

        #region 启用数据
        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 禁用数据
        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 重置用户密码
        /// <summary>
        /// 重置用户密码
        /// </summary>
        /// <param name="Id">主键Id</param>
        /// <returns></returns>
        public OperationResult RestPassWord(int Id)
        {
            Member member = Members.Where(x => x.Id == Id).FirstOrDefault();
            if (string.IsNullOrEmpty(member.Email))
            {
                return new OperationResult(OperationResultType.Error, "用户邮箱为空，无法将重置的密码发送给用户！");
            }
            else
            {
                string randomPassword = RandomHelper.GetRandomPassword(6);
                OperationResult result = EmailHelper.SendMail(member.Email, "零时尚轻奢汇（重置员工密码）", "你的新员工密码是：" + randomPassword + "，请登录后立即修改！");
                if (result.ResultType == OperationResultType.Success)
                {
                    member.MemberPass = randomPassword.MD5Hash();
                    _memberRepository.Update(member);
                    return new OperationResult(OperationResultType.Success, "我们已将你的密码重置，并发送至（" + member.Email + "）邮箱，请注意查收。");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, "邮件发送失败，错误如下：" + result.Message);
                }
            }
        }
        #endregion

        #region 获取数据键值对
        /// <summary>
        /// 获取数据键值对
        /// </summary>
        /// <param name="title">默认显示标题</param>
        /// <returns></returns>
        public List<SelectListItem> SelectList(string title)
        {
            List<SelectListItem> list = new List<SelectListItem>();
            IQueryable<Member> listMember = Members.Where(x => x.IsEnabled == true && x.IsDeleted == false);
            if (listMember.Count() > 0)
            {

                foreach (var memeber in listMember)
                {
                    list.Add(new SelectListItem() { Text = memeber.MemberName, Value = memeber.Id.ToString() });
                }
            }
            list.Insert(0, new SelectListItem() { Text = title, Value = "" });
            return list;
        }
        #endregion

        #region APP第三方登录
        /// <summary>
        /// 根据第三方OpenId获取会员信息,成功Data上会附加Member信息
        /// </summary>
        /// <param name="strThirdLoginId">Openid</param>
        /// <param name="thirdLoginType"></param>
        /// <param name="registerType"></param>
        /// <returns></returns>
        public OperationResult CheckThirdAccount(string strThirdLoginId, ThirdLoginFlag thirdLoginType)
        {
            IQueryable<Member> query = Members.Where(x => x.IsDeleted == false && x.ThirdLoginType == thirdLoginType);
            Member member = query.FirstOrDefault(x => x.ThirdLoginId == strThirdLoginId);
            if (member.IsNotNull())
            {
                if (member.IsEnabled)
                {
                    var res = new OperationResult(OperationResultType.Success, "校验成功");
                    var strcode = member.MobileInfos.OrderByDescending(o => o.Id).Select(s => s.DeviceToken).FirstOrDefault();
                    string num = $"{member.MobilePhone}{member.UniquelyIdentifies}{member.MemberPass}{strcode}".MD5Hash();
                    res.Data = new
                    {
                        MemberId = member.Id,
                        U_Num = num,
                        UserPhoto = WebUrl + member.UserPhoto,
                        IsTest = member.MemberFigures.Any(a => a.IsEnabled && !a.IsDeleted),
                        isDetailTest = _CollocationQuestionnaireRepository.Entities.Any(c => c.MemberId == member.Id && c.IsEnabled && !c.IsDeleted),
                        member.MemberName,
                    };
                    return res;
                }
                else
                {
                    return new OperationResult(OperationResultType.LoginError, "用户被禁止登录");
                }
            }
            else
            {
                return new OperationResult(OperationResultType.QueryNull, "用户不存在");
            }
        }

        /// <summary>
        /// APP第三方登录--存在直接登录，不存在添加成功后登录
        /// </summary>
        /// <param name="strThirdLoginId">第三方Id</param>
        /// <param name="thirdLoginType">第三方类型</param>
        /// <param name="registerType">注册类型</param>
        /// <returns></returns>
        public OperationResult ThirdLogin(string strThirdLoginId, ThirdLoginFlag thirdLoginType, RegisterFlag registerType)
        {
            try
            {
                IQueryable<Member> listMember = Members.Where(x => x.IsDeleted == false && x.ThirdLoginType == thirdLoginType);
                bool isExist = listMember.Any(x => x.ThirdLoginId == strThirdLoginId);
                if (isExist)
                {
                    bool isEnable = this.CheckIsEnabled(listMember, strThirdLoginId);
                    if (isEnable)
                    {
                        return new OperationResult(OperationResultType.Success, "登录成功！");
                    }
                    else
                    {
                        return new OperationResult(OperationResultType.Error, "该用户禁止登录！");
                    }
                }
                else
                {
                    //生成唯一昵称
                    string name = string.Empty;
                    while (true)
                    {
                        name = RandomHelper.GetRandomNum(7);
                        bool res = this.CheckExists(x => x.MemberName == name);
                        if (res)
                        {
                            continue;
                        }
                        else
                        {
                            break;
                        }
                    }
                    //生成6位的唯一标识
                    string uniquelyIdentifies = string.Empty;
                    while (true)
                    {
                        uniquelyIdentifies = RandomHelper.GetRandomNum(6);
                        bool res = this.CheckExists(x => x.UniquelyIdentifies == uniquelyIdentifies);
                        if (res)
                        {
                            continue;
                        }
                        else
                        {
                            break;
                        }
                    }
                    MemberDto dto = new MemberDto();
                    dto.RegisterType = registerType;
                    dto.Gender = (int)GenderFlag.Male;
                    dto.MemberName = name;
                    dto.ThirdLoginId = strThirdLoginId;
                    dto.ThirdLoginType = thirdLoginType;
                    dto.UniquelyIdentifies = uniquelyIdentifies;
                    dto.MemberTypeId = 1;//普通会员Id
                    var addRes = this.Insert(dto);
                    return addRes;
                }
            }
            catch (Exception ex)
            {
                _Logger.Error<string>(ex.ToString());
                return new OperationResult(OperationResultType.Error, "服务器忙，请稍后重试！");
            }

        }

        /// <summary>
        /// 第三方用户是否存在
        /// </summary>
        /// <param name="listMember"></param>
        /// <param name="thirdLoginId"></param>
        /// <returns></returns>
        private bool CheckIsExist(IQueryable<Member> listMember, string thirdLoginId)
        {
            int count = listMember.Where(x => x.ThirdLoginId == thirdLoginId).Count();
            if (count > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        /// <summary>
        /// 第三方用户是否可用
        /// </summary>
        /// <param name="listMember"></param>
        /// <param name="thirdLoginId"></param>
        /// <returns></returns>
        private bool CheckIsEnabled(IQueryable<Member> listMember, string thirdLoginId)
        {
            bool isEnable = listMember.Where(x => x.ThirdLoginId == thirdLoginId).FirstOrDefault().IsEnabled;
            if (isEnable)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        #endregion

        #region APP登录
        /// <summary>
        /// APP登录
        /// </summary>
        /// <param name="strLoginName"></param>
        /// <param name="strPassWord"></param>
        /// <returns></returns>
        public OperationResult Login(string strLoginName, string strPassWord)
        {
            IQueryable<Member> listMember = this.Members.Where(x => x.IsDeleted == false);
            string passWord = HashHelper.GetMd5(strPassWord);
            listMember = listMember.Where(x => (x.MemberName == strLoginName || x.MobilePhone == strLoginName) && x.MemberPass == passWord);
            if (listMember.Count() == 1)
            {
                var member = listMember.FirstOrDefault();
                if (member.IsEnabled)
                {
                    return new OperationResult(OperationResultType.Success, "登录成功！");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, "该用户禁止登录！");
                }
            }
            else
            {
                return new OperationResult(OperationResultType.Error, "登录异常，请稍后重试！");
            }
        }
        #endregion

        #region APP注册
        /// <summary>
        /// APP注册
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        public OperationResult Register(params MemberDto[] dtos)
        {
            try
            {
                UnitOfWork.TransactionEnabled = true;
                OperationResult result = _memberRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.DateofBirth = DateTime.Now;
                    entity.LoginTime = DateTime.Now;
                    return entity;
                });
                int resCount = UnitOfWork.SaveChanges();
                return resCount > 0 ? new OperationResult(OperationResultType.Success, "注册成功") : new OperationResult(OperationResultType.Error, "注册失败");
            }
            catch (Exception ex)
            {
                _Logger.Error<string>(ex.ToString());
                return new OperationResult(OperationResultType.Error, "服务器忙，请稍后");
            }
        }
        #endregion

        #region 根据手机号码修改密码

        /// <summary>
        /// 根据手机号码修改密码
        /// </summary>
        /// <param name="strPhoneNum"></param>
        /// <returns></returns>
        public OperationResult UpdatePassWord(string strPhoneNum, string strPassWord)
        {
            try
            {
                Member entity = this.Members.Where(x => x.MobilePhone == strPhoneNum).FirstOrDefault();
                if (entity == null)
                {
                    return new OperationResult(OperationResultType.Error, "用户不存在");
                }
                else
                {
                    entity.MemberPass = strPassWord;
                    entity.UpdatedTime = DateTime.Now;
                }
                int count = _memberRepository.Update(entity);
                return count > 0 ? new OperationResult(OperationResultType.Success, "修改成功") : new OperationResult(OperationResultType.Error, "修改失败");
            }
            catch (Exception ex)
            {
                _Logger.Error<string>(ex.ToString());
                return new OperationResult(OperationResultType.Error, "服务器忙，请稍后重试");
            }
        }
        #endregion

        #region 修改密码-重载
        public OperationResult UpdatePassWord(MemberDto dto)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error, "服务器忙，请稍后重试");
            try
            {
                UnitOfWork.TransactionEnabled = true;
                Member member = _memberRepository.GetByKey(dto.Id);
                if (member == null)
                {
                    oper.Message = "会员不存在";
                }
                else
                {
                    member.MemberPass = dto.MemberPass.MD5Hash();
                    member.UpdatedTime = DateTime.Now;
                    _memberRepository.Update(member);
                    int count = UnitOfWork.SaveChanges();
                    if (count > 0)
                    {
                        oper.ResultType = OperationResultType.Success;
                        oper.Message = "修改密码成功";
                    }
                    else
                    {
                        oper.Message = "修改密码失败";
                    }
                }
                return oper;
            }
            catch (Exception ex)
            {
                _Logger.Error<string>(ex.ToString());
                return oper;
            }
        }

        #endregion

        #region 上传头像
        public OperationResult UploadImage(int memberId, string conPath)
        {
            try
            {
                Member member = _memberRepository.Entities.Where(x => x.Id == memberId).FirstOrDefault();
                member.UserPhoto = conPath;
                int count = _memberRepository.Update(member);
                return count > 0 ? new OperationResult(OperationResultType.Success, "上传成功", conPath) : new OperationResult(OperationResultType.Error, "上传失败");
            }
            catch (Exception ex)
            {
                _Logger.Error<string>(ex.ToString());
                return new OperationResult(OperationResultType.Error, "上传失败,请稍后重试");
            }
        }
        #endregion
        #endregion


        /// <summary>
        /// 修改会员的积分、储值、获取积分
        /// </summary>
        /// <param name="memberDto"></param>
        /// <returns></returns>
        //yxk 2016-5-26
        public OperationResult UpdateScore(MemberDto memberDto)
        {
            OperationResult resul = new OperationResult(OperationResultType.Error);
            var memb = _memberRepository.Entities.FirstOrDefault(c => c.Id == memberDto.Id);
            if (!memb.IsEnabled || memb.IsDeleted)
            {
                resul.Message = "会员已禁用或删除";
            }
            else
            {
                memb.Score = memberDto.Score;
                memb.Balance = memberDto.Balance;
                memb.UpdatedTime = DateTime.Now;
                memb.Notes = "修改会员积分、储值";
                if (_memberRepository.Update(memb) > 0)
                {
                    resul.ResultType = OperationResultType.Success;
                    resul.Message = "success";
                }

            }
            return resul;
        }

        #region Api修改会员信息
        public OperationResult Update(Member member)
        {
            IQueryable<Member> listMember = this.Members;
            OperationResult oper = new OperationResult(OperationResultType.Error);
            int count = listMember.Where(x => x.MemberName == member.MemberName && x.Id != member.Id).Count();
            if (count > 0)
            {
                oper.Message = "会员昵称已经存在";
                return oper;
            }
            count = listMember.Where(x => !string.IsNullOrEmpty(x.MobilePhone) && x.MobilePhone == member.MobilePhone && x.Id != member.Id).Count();
            if (count > 0)
            {
                oper.Message = "手机号码已经存在";
                return oper;
            }
            count = _memberRepository.Update(member);
            if (count > 0)
            {
                oper.Message = "修改成功";
                oper.ResultType = OperationResultType.Success;
            }
            else
            {
                oper.Message = "修改失败";
            }
            return oper;
        }

        #endregion

        #region 生成会员卡号
        public string GetCardNum()
        {
            List<string> listNum = new List<string>();
            List<Member> listMember = this.Members.Where(x => !string.IsNullOrEmpty(x.CardNumber)).ToList();
            if (listMember != null)
            {
                listNum = listMember.Select(x => x.CardNumber).ToList();
            }
            StringBuilder sbNum = new StringBuilder();
            int count = 0;
            while (true)
            {
                sbNum.Append(RandomHelper.GetRandomNum(6));
                if (listNum == null || listNum.Count == 0)
                {
                    break;
                }
                else
                {
                    count = listNum.Where(x => x == sbNum.ToString()).Count();
                    if (count == 0)
                    {
                        break;
                    }
                    else
                    {
                        sbNum.Clear();
                    }
                }
            }
            return sbNum.ToString();
        }
        #endregion

        #region 随机生成会员昵称
        private string GetRandomName(IQueryable<Member> listMember)
        {
            string strMemberName = string.Empty;
            while (true)
            {
                strMemberName = RandomHelper.GetRandomNum(6);
                int count = listMember.Where(x => x.MemberName == strMemberName).Count();
                if (count > 0)
                {
                    continue;
                }
                else
                {
                    break;
                }
            }
            return strMemberName;
        }
        #endregion

        #region 随机生成会员标识
        public string RandomUniquelyId(IQueryable<Member> listMember)
        {
            IQueryable<Administrator> listAdmin = _adminRepository.Entities;
            string strNum = string.Empty;
            while (true)
            {
                strNum = RandomHelper.GetRandomNum(6);
                int count = listMember.Where(x => x.UniquelyIdentifies == strNum).Count();
                int index = listAdmin.Where(x => x.Member.UniquelyIdentifies == strNum).Count();
                if (count > 0 || index > 0)
                {
                    continue;
                }
                else
                {
                    break;
                }
            }
            return strNum;
        }

        public string[] RandomUniquelyId(List<string> idsFromDb, int count)
        {

            string strNum = string.Empty;
            int repeatCount = 0;
            HashSet<string> list = new HashSet<string>();
            while (list.Count < count)
            {
                strNum = RandomHelper.GetRandomNum(6);
                if (idsFromDb.Any(x => x == strNum) || list.Contains(strNum))
                {
                    repeatCount++;
                    continue;
                }
                else
                {
                    list.Add(strNum);
                }
            }
            return list.ToArray();
        }
        public string RandomUniquelyId()
        {
            IQueryable<Administrator> listAdmin = _adminRepository.Entities;
            string strNum = string.Empty;
            while (true)
            {
                strNum = RandomHelper.GetRandomNum(6);
                int count = _memberRepository.Entities.Where(x => x.UniquelyIdentifies == strNum).Count();
                int index = listAdmin.Where(x => x.Member.UniquelyIdentifies == strNum).Count();
                if (count > 0 || index > 0)
                {
                    continue;
                }
                else
                {
                    break;
                }
            }
            return strNum;
        }
        #endregion

        #region 对没有卡号的进行生成
        public void CreateCardNum()
        {
            UnitOfWork.TransactionEnabled = true;
            List<Member> listMember = this.Members.Where(x => string.IsNullOrEmpty(x.CardNumber)).ToList();
            foreach (Member member in listMember)
            {
                member.UpdatedTime = DateTime.Now;
                if (string.IsNullOrEmpty(member.CardNumber))
                {
                    int count = listMember.Where(x => x.CardNumber == member.UniquelyIdentifies).Count();
                    if (count > 0)
                    {
                        member.CardNumber = GetCardNum();
                    }
                    else
                    {
                        member.CardNumber = member.UniquelyIdentifies;
                    }
                    _memberRepository.Update(member);
                }

            }
            UnitOfWork.SaveChanges();
        }

        #endregion

        public OperationResult CheckLogin(MemberDto dto)
        {
            OperationResult result = new OperationResult(OperationResultType.Error, "你输入的密码不正确！");
            try
            {
                List<Member> listEntity = new List<Member>();
                if (!string.IsNullOrEmpty(dto.MemberName))
                {
                    string adminName = InputHelper.SafeInput(dto.MemberName).Trim().ToLower();
                    Member entity = _memberRepository.Entities.FirstOrDefault(x => x.IsDeleted == false && x.IsEnabled == true && x.MemberName.Trim().ToLower() == adminName);
                    if (entity == null)
                    {
                        result.Message = "你输入的帐号不存在！";
                    }
                    else
                    {
                        listEntity.Add(entity);
                    }
                }
                if (!string.IsNullOrEmpty(dto.MobilePhone) && dto.MobilePhone.IsMobileNumber())
                {
                    string telPhone = InputHelper.SafeInput(dto.MobilePhone).Trim().ToLower();
                    Member entity = _memberRepository.Entities.FirstOrDefault(x => x.IsDeleted == false && x.IsEnabled == true && x.MobilePhone.Trim().ToLower() == telPhone);
                    if (entity == null)
                    {
                        result = new OperationResult(OperationResultType.Error, "你输入的手机不存在！");
                    }
                    else
                    {
                        listEntity.Add(entity);
                    }
                }
                foreach (var entity in listEntity)
                {
                    if (entity.MemberPass.Trim().ToLower() == dto.MemberPass.MD5Hash().Trim().ToLower())
                    {
                        result = new OperationResult(OperationResultType.Success, "你已经登录成功！");
                        entity.LoginTime = DateTime.Now;
                        entity.LoginCount += 1;
                        result.Data = entity;
                        _memberRepository.Update(entity);
                        break;
                    }
                    else
                    {
                        result = new OperationResult(OperationResultType.Error, "你输入的密码不正确！");
                    }
                }
            }
            catch (Exception ex)
            {
                result = new OperationResult(OperationResultType.Error, "登录出现异常！错误如下：" + ex.Message, ex.ToString());
            }

            return result;
        }

        /// <summary>
        /// 零售页会员登陆
        /// </summary>
        /// <param name="loginName">用户名|手机号|会员卡号|唯一标识符UniquelyIdentifies</param>
        /// <param name="passwd">密码，app登陆模式不需要传</param>
        /// <param name="currentStoreId">当前店铺id，用于校验会员归属店铺</param>
        /// <param name="loginModel">登陆模式</param>
        public OperationResult MemberRetailLogin(string loginName, string passwd, int? memberId, int currentStoreId, MemberRetailLoginModeEnum loginModel)
        {
            string passMd5 = passwd.MD5Hash();
            Member memberEntity = null;


            // 普通模式下校验密码
            if (loginModel == MemberRetailLoginModeEnum.NORMAL_WITH_PASSWORD)
            {
                memberEntity = _memberRepository.Entities.Where(c => !c.IsDeleted && c.IsEnabled)
                                   .Where(c => c.MemberName == loginName || c.MobilePhone == loginName || c.CardNumber == loginName || c.UniquelyIdentifies == loginName)
                                   .FirstOrDefault();
                if (memberEntity == null || memberEntity.MemberPass != passMd5)
                {
                    return new OperationResult(OperationResultType.Error, "会员登录名或密码错误");
                }
            }
            else if (loginModel == MemberRetailLoginModeEnum.APP_CONFIRM)
            {
                memberEntity = _memberRepository.Entities.Where(c => !c.IsDeleted && c.IsEnabled).Where(m => m.Id == memberId.Value).FirstOrDefault();
                if (memberEntity == null)
                {
                    return new OperationResult(OperationResultType.Error, $"会员登录id错误memberId:{memberId.Value}");
                }
            }


            // 校验会员是否有归属店铺
            if (!memberEntity.StoreId.HasValue)
            {
                return new OperationResult(OperationResultType.Error, "会员尚未绑定归属店铺,无法购买商品");
            }

            // 获取等级折扣
            var levelDiscount = memberEntity.MemberLevel?.Discount;

            // 在非归属店铺购买商品,判断是否可积分消费
            var availableScore = memberEntity.Score;
            if (!_scoreRuleContract.Current.CanUseScoreWhenNotBelongToStore && memberEntity.StoreId.Value != currentStoreId)
            {
                availableScore = 0;
            }


            // 搭配师信息
            var CollocationName = memberEntity.Collocation?.Admini?.Member?.RealName;
            var CollocationNum = memberEntity.Collocation?.Admini?.Member?.UniquelyIdentifies;


            // 优惠券
            var time = DateTime.Now;
            var coupons = _couponContract.Entities.Where(c => c.MemberId == memberEntity.Id && c.IsEnabled && !c.IsDeleted && !c.IsUsed)
                                                    .Where(c => c.Coupon.IsForever || (c.Coupon.StartDate <= time && time <= c.Coupon.EndDate))
                                                    .Select(c => new MemberCoupon
                                                    {
                                                        Id = c.Id,
                                                        CouponNumb = c.CouponNumber,
                                                        CouponName = c.Coupon.CouponName,
                                                        DiscountAmount = c.Coupon.CouponPrice
                                                    })
                                                    .ToList();

            var dto = new MemberLoginPassDTO()
            {
                Id = memberEntity.Id,
                uuid = Guid.NewGuid().ToString("N"),
                Balance = memberEntity.Balance,
                UniquelyIdentifies = memberEntity.UniquelyIdentifies,
                Coupon = coupons,
                Collocation = new MemberCollocator { CollocationName = CollocationName, CollocationNum = CollocationNum },
                LevelDiscount = levelDiscount ?? 1.0F,
                Score = availableScore,
                StoreId = memberEntity.StoreId.Value,
                MemberName = memberEntity.MemberName,
                MembNum = memberEntity.UniquelyIdentifies,
                RealName = memberEntity.RealName
            };

            // 缓存
            var key = RedisCacheHelper.KEY_MEMBER_RETAIL_LOGIN_PREFIX + memberEntity.Id.ToString();
            var hasCache = RedisCacheHelper.Set(key, dto, TimeSpan.FromMinutes(5));
            if (!hasCache)
            {
                return OperationResult.Error("缓存登录信息失败");

            }

            return new OperationResult(OperationResultType.Success, string.Empty, dto);
        }

        public OperationResult SwitchMemberStore(int memberId, int newStoreId)
        {
            var memberEntity = _memberRepository.Entities.Where(m => !m.IsDeleted && m.IsEnabled && m.Id == memberId).FirstOrDefault();
            if (memberEntity == null)
            {
                return OperationResult.Error("会员信息未找到");
            }
            if (memberEntity.StoreId == newStoreId)
            {
                return OperationResult.Error("不可更换到同一家店铺");

            }
            if (!_storeContract.Stores.Any(s => !s.IsDeleted && s.IsEnabled && s.IsAttached && s.Id == newStoreId))
            {
                return OperationResult.Error("店铺信息不存在");
            }

            using (var transaction = _memberRepository.GetTransaction())
            {
                try
                {
                    var res = _MemberFaceContract.MoveMemberToNewFaceSet(memberEntity.Id, newStoreId);
                    if (res.ResultType != OperationResultType.Success)
                    {
                        return OperationResult.Error($"更新归属店铺失败,人脸信息更新失败,{res.Message}");
                    }

                    if (memberEntity.Score > 0)
                    {

                        _memberConsumeContract.LogScoreWhenSwitchStore(memberEntity.Id, memberEntity.Score);
                    }
                    memberEntity.StoreId = newStoreId;
                    memberEntity.Score = 0;
                    var cnt = _memberRepository.Update(memberEntity);
                    if (cnt <= 0)
                    {
                        throw new Exception("更新失败");
                    }
                    transaction.Commit();
                    return OperationResult.OK();
                }
                catch (Exception e)
                {

                    transaction.Rollback();
                    _Logger.Error(e.Message + e.StackTrace);
                    return OperationResult.Error("系统异常");
                }

            }
        }

        public OperationResult SwitchMemberType(int memberId, int typeId)
        {
            var memberEntity = _memberRepository.Entities.Where(m => !m.IsDeleted && m.IsEnabled && m.Id == memberId).FirstOrDefault();
            if (memberEntity == null)
            {
                return OperationResult.Error("会员信息未找到");
            }
            if (!_MemberTypeRepository.Entities.Any(s => !s.IsDeleted && s.IsEnabled && s.Id == typeId))
            {
                return OperationResult.Error("会员类型不存在");
            }
            memberEntity.MemberTypeId = typeId;
            memberEntity.UpdatedTime = DateTime.Now;
            memberEntity.OperatorId = AuthorityHelper.OperatorId;

            var status = _memberRepository.Update(memberEntity) > 0;
            return OperationHelper.ReturnOperationResult(status, "会员类型修改");
        }

        #region 积分操作
        /// <summary>
        /// 获取当次操作积分
        /// </summary>
        /// <param name="hours">时长</param>
        /// <param name="adminId">用户ID（使用AuthorityHelper.OperatorId时传-1）</param>
        /// <param name="operation">要进行的操作（请假："leave";加班："overtime"）</param>
        /// <param name="project">调用的是哪个项目（默认是website,）</param>
        /// <returns></returns>
        public OperationResult CheckLeavePointsInfo(decimal hours, int adminId = -1, string operation = "leave", string project = "website")
        {
            if (adminId == -1)
            {
                adminId = AuthorityHelper.OperatorId ?? 0;
            }
            var admin = _adminRepository.Entities.FirstOrDefault(x => x.IsEnabled && !x.IsDeleted && x.Id == adminId);
            var oper = new OperationResult(OperationResultType.Error);
            oper.Data = 0;
            if (admin == null)
            {
                oper.Message = "当前用户不存在";
                return oper;
            }

            int leavePoints = 0;

            //if (project == "website")
            //{
            //    int.TryParse(XmlStaticHelper.GetXmlNodeByXpath("LeavePoints", "LeavePointsconfig", "LeavePoints", "0"), out leavePoints);
            //}
            //else
            //{
            //    int.TryParse(XmlStaticHelper.GetXmlNodeByXpath_Url("Offices/Configure/GetXmlNodeByXpath", "LeavePoints", "LeavePointsconfig", "LeavePoints", "0"), out leavePoints);
            //}
            int.TryParse(_configureContract.GetConfigureValue("LeavePoints","LeavePointsconfig", "LeavePoints", "0"), out leavePoints);

            decimal points = leavePoints * hours;
            if (operation == "leave" && points > admin.Member.Score)
            {
                oper.Data = points;
                oper.Message = "积分不够，请先充值积分";
                return oper;
            }
            oper = new OperationResult(OperationResultType.Success, "");
            oper.Data = points;
            return oper;
        }

        /// <summary>
        /// 将积分返还给用户
        /// </summary>
        /// <param name="member">用户信息</param>
        /// <param name="LeavePoints">要返还的积分数(扣除传负数，增加传正数)</param>
        /// <returns></returns>
        public OperationResult ReturnPoints(int memberId, decimal LeavePoints)
        {
            MemberDto member = this.Edit(memberId);
            member.Score = member.Score + LeavePoints;
            return this.Update(member);
        }
        #endregion


        public OperationResult RemoveJpushId(int memberId, string JPushRegistrationID)
        {
            var isexist = _memberRepository.Entities.Any(m => !m.IsDeleted && m.IsEnabled && m.Id == memberId);
            if (isexist)
            {
                JPushClient jclient = new JPushClient(JpushApi.app_key_0fashion, JpushApi.master_secret_0fashion);
                var dresult = jclient.updateDeviceTagAlias(JPushRegistrationID, "", null, null, new HashSet<string>() { "huiyuan" });//采用别名是因为可能一个用户登录多个设备

                return OperationHelper.ReturnOperationResult(isexist, "操作成功");
            }
            return OperationHelper.ReturnOperationResult(false, "会员不存在");
        }

        public OperationResult RefreshJpushId(int memberId, string JPushRegistrationID)
        {
            if (JPushRegistrationID.IsNotNullAndEmpty())
            {
                var mod = _memberRepository.Entities.FirstOrDefault(m => !m.IsDeleted && m.IsEnabled && m.Id == memberId);
                if (mod.IsNotNull())
                {
                    mod.JPushRegistrationID = JPushRegistrationID;
                    mod.UpdatedTime = DateTime.Now;
                    var count = _memberRepository.Update(mod);

                    JPushClient jclient = new JPushClient(JpushApi.app_key_0fashion, JpushApi.master_secret_0fashion);
                    var dresult = jclient.updateDeviceTagAlias(JPushRegistrationID, mod.Id.ToString(), null, new HashSet<string>() { "huiyuan" }, null);

                    return OperationHelper.ReturnOperationResult(count > 0, "操作成功");
                }
                return OperationHelper.ReturnOperationResult(false, "会员不存在");
            }
            return OperationHelper.ReturnOperationResult(false, "参数无效");
        }

        public void SendAppNotification(string title, string content, params int[] memberIds)
        {
            OperationHelper.Try(() =>
            {
                memberIds.CheckNotNull("memberIds");
                var listjpush = _memberRepository.Entities.Where(m => !m.IsDeleted && m.IsEnabled && memberIds.Contains(m.Id)).Select(s => s.Id + "").ToArray();
                if (listjpush.IsNotNullOrEmptyThis())
                {
                    var audience = jpush.api.push.mode.Audience.s_tag("huiyuan");
                    audience.alias(listjpush);//采用别名是因为可能一个用户登录多个设备
                    var isSuccess = JpushApi.FASHION(null, JpushApiPlatform.All, audience, content, title, content);
                }
            });
        }

        public void SendAppNotification(string title, string content, string Flag, params int[] memberIds)
        {
            OperationHelper.Try(() =>
            {
                memberIds.CheckNotNull("memberIds");
                var listjpush = _memberRepository.Entities.Where(m => !m.IsDeleted && m.IsEnabled && memberIds.Contains(m.Id)).Select(s => s.Id + "").ToArray();
                if (listjpush.IsNotNullOrEmptyThis())
                {
                    var audience = jpush.api.push.mode.Audience.s_tag("huiyuan");
                    audience.alias(listjpush);//采用别名是因为可能一个用户登录多个设备
                    var isSuccess = JpushApi.FASHION(null, JpushApiPlatform.All, audience, content, title, content, false, Flag);
                }
            });
        }
    }
}
