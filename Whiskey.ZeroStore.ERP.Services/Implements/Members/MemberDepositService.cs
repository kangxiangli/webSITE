
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Member;
using Whiskey.ZeroStore.ERP.Models.Enums;
using static Whiskey.ZeroStore.ERP.Transfers.MemberStatus;
using Whiskey.Utility.Logging;
using System.Data.Entity;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class MemberDepositService : ServiceBase, IMemberDepositContract
    {
        protected static readonly ILogger _Logger = LogManager.GetLogger(typeof(MemberDepositService));
        #region MemberDepositService

        #region 声明数据层操作对象

        private readonly IRepository<MemberDeposit, int> _memberdepositRepository;

        private readonly IRepository<Member, int> _memberRepository;
        private readonly IRepository<MemberLevel, int> _memberLevelRepository;
        private readonly IRepository<MemberActivity, int> _memberActivityRepository;
        private readonly IRepository<Administrator, int> _administratorRepository;
        private readonly IStoreContract _storeContract;
        private readonly IMemberContract _memberContract;
        private readonly IMemberTypeContract _memberTypeContract;
        private readonly IRechargeGenerateRecordContract _rechargeGenerateRecordContract;
        private readonly ISmsContract _smsContract;
        private readonly IConfigureContract _configureContract;
        public MemberDepositService(
            IRepository<MemberDeposit, int> memberdepositRepository,
            IRepository<Member, int> memberRepository,
            IRepository<MemberActivity, int> memberActivityRepository,
            IRepository<MemberLevel, int> memberLevelRepository,
            IRepository<Administrator, int> administratorRepository,
            IStoreContract storeContract,
            IMemberContract memberContract,
            IRechargeGenerateRecordContract rechargeGenerateRecordContract,
            IMemberTypeContract memberTypeContract,
            ISmsContract smsContract,
            IConfigureContract configureContract
        ) : base(memberdepositRepository.UnitOfWork)
        {
            _memberdepositRepository = memberdepositRepository;
            _memberRepository = memberRepository;
            _memberActivityRepository = memberActivityRepository;
            _memberLevelRepository = memberLevelRepository;
            _storeContract = storeContract;
            _administratorRepository = administratorRepository;
            _memberContract = memberContract;
            _rechargeGenerateRecordContract = rechargeGenerateRecordContract;
            _memberTypeContract = memberTypeContract;
            _smsContract = smsContract;
            _configureContract = configureContract;
        }
        #endregion 

        #region 根据ID获取实体数据
        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public MemberDeposit View(int Id)
        {
            var entity = _memberdepositRepository.GetByKey(Id);
            return entity;
        }
        #endregion

        #region 根据ID获取领域模型实体数据
        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public MemberDepositDto Edit(int Id)
        {
            var entity = _memberdepositRepository.GetByKey(Id);
            Mapper.CreateMap<MemberDeposit, MemberDepositDto>();
            var dto = Mapper.Map<MemberDeposit, MemberDepositDto>(entity);
            return dto;
        }
        #endregion

        #region 获取数据集
        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<MemberDeposit> MemberDeposits { get { return _memberdepositRepository.Entities; } }


        #endregion

        #region 根据条件校验数据
        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<MemberDeposit, bool>> predicate, int id = 0)
        {
            return _memberdepositRepository.ExistsCheck(predicate, id);
        }
        #endregion

        #region 添加数据
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params MemberDepositDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");

                UnitOfWork.TransactionEnabled = true;
                IQueryable<Member> listMember = _memberRepository.Entities.Where(x => x.IsDeleted == false && x.IsEnabled == true);
                IQueryable<MemberDeposit> listMemberDep = MemberDeposits.Where(x => x.IsDeleted == false && x.IsEnabled == true);// && x.MemberId == item.MemberId

                #region 获取充值时间间隔

                //Utility.XmlHelper helper = new Utility.XmlHelper("Member", "RechargeGap");
                //var mod = helper.GetElement("GapValue");
                //var gapSeconds = (mod?.Value ?? "30").CastTo<int>();
                var gapSeconds = _configureContract.GetConfigureValue("Member", "RechargeGap", "GapValue", "30").CastTo<int>();

                #endregion

                #region 过滤间隔时间内充值过的会员

                var preTime = DateTime.Now.AddSeconds(-Math.Abs(gapSeconds));
                var listmemberIds = dtos.Select(s => s.MemberId).ToList();
                var listmemberdps = listMemberDep.Where(w => listmemberIds.Contains(w.MemberId) && w.CreatedTime >= preTime).Select(s => new { s.MemberId, s.Member.MemberName }).ToList();
                var gapMessage = string.Empty;
                if (listmemberdps.Count > 0)
                {
                    var listdtos = dtos.ToList();
                    listdtos.RemoveAll(r => listmemberdps.Select(s => s.MemberId).Contains(r.MemberId));
                    dtos = listdtos.ToArray();
                    gapMessage = string.Join(",", listmemberdps.Select(s => s.MemberName));
                    gapMessage = $"其中 {gapMessage} 在{gapSeconds}秒之内刚刚充值过";
                }
                #endregion

                if (dtos.Any(d => !d.DepositStoreId.HasValue))
                {
                    return OperationResult.Error("请选择充值店铺");
                }
                // 店铺权限校验
                var manageStoreIds = _storeContract.QueryManageStoreId(AuthorityHelper.OperatorId.Value);
                if (manageStoreIds.Count <= 0)
                {
                    return OperationResult.Error("没有店铺权限");

                }
                var invalidStoreIds = dtos.Select(d => d.DepositStoreId.Value).Except(manageStoreIds);
                if (invalidStoreIds.Any())
                {
                    return OperationResult.Error($"店铺权限不足");
                }


                var smsList = new List<SMSDataEntry>();
                foreach (var item in dtos)
                {
                    Member member = listMember.Where(x => x.Id == item.MemberId).FirstOrDefault();

                    if (member == null) return new OperationResult(OperationResultType.Error, "会员不存在，请选择其他会员！");
                    item.DepositContext = MemberDepositContextEnum.线下充值;
                    item.BeforeBalance = member.Balance;
                    item.BeforeScore = member.Score;
                    if (item.MemberDepositType == (int)MemberDepositFlag.System)
                    {
                        DateTime nowDate = DateTime.Now;
                        var act = _memberActivityRepository.Entities.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.Id == item.MemberActivityId)
                            .Where(x => (x.IsForever == true || (nowDate.CompareTo(x.StartDate) >= 0 && nowDate.CompareTo(x.EndDate) <= 0))).FirstOrDefault();
                        if (act == null)
                        {
                            return new OperationResult(OperationResultType.Error, "活动不存在或者已过期");
                        }
                        else
                        {



                            item.MemberActivityType = act.ActivityType;
                            CalueMember(member, item.Price, item.Score, act.ActivityType);
                            //只要是充值需要计算出当前的系数
                            if (act.ActivityType == MemberActivityFlag.Recharge)
                            {
                                CheckMoney(item);
                                var quotiety = ComputeQuotiety(member.Id, item.Cash, item.Card, item.Price);
                                CheckQuotiety(quotiety, item);
                                item.Quotiety = quotiety;
                            }
                        }
                    }
                    else if (item.MemberDepositType == MemberDepositFlag.Manpower)
                    {
                        CalueMember(member, item.Price, item.Score, item.MemberActivityType);
                        if (item.MemberActivityType == (int)MemberActivityFlag.Recharge)
                        {
                            CheckMoney(item);
                            var quotiety = ComputeQuotiety(member.Id, item.Cash, item.Card, item.Price);
                            CheckQuotiety(quotiety, item);
                            item.Quotiety = quotiety;
                        }
                    }
                    else
                    {
                        return new OperationResult(OperationResultType.Error, "本次活动无法充值，请选择其他活动！");
                    }

                    item.AfterBalance = member.Balance;
                    item.AfterScore = member.Score;
                    item.TotalPrice = item.Price;

                    //rewardMoney = rewardMoney + item.Coupon;
                    member.LevelId = CalculateMemberLevel(member.Id, item.Cash + item.Card);
                    member.LevelId = member.LevelId == 0 ? null : member.LevelId;
                    member.UpdatedTime = DateTime.Now;
                    _memberRepository.Update(member);

                    var storeName = item.DepositStoreId.HasValue ? _storeContract.Stores.FirstOrDefault(s => s.Id == item.DepositStoreId.Value).StoreName : "零时尚";
                    smsList.Add(new SMSDataEntry()
                    {
                        MemberName = member.RealName,
                        MemberPhone = member.MobilePhone,
                        DepositPrice = item.Price,
                        DepositScore = item.Score,
                        StoreName = storeName,
                        DepositTime = DateTime.Now

                    });
                }
                OperationResult result = _memberdepositRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                int count = this.UnitOfWork.SaveChanges();
                if (count > 0)
                {
                    if (smsList.Any())
                    {
                        SendSMSToMember(smsList.ToArray());
                    }
                    return new OperationResult(OperationResultType.Success, $"添加成功！{gapMessage}");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, $"充值失败！{gapMessage}");
                }
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }

        private Dictionary<int, int> GetRandomOptId(List<int> storeIds)
        {
            var storeDepartDict = _storeContract.Stores.Where(s => !s.IsDeleted && s.IsEnabled && storeIds.Contains(s.Id))
                .ToDictionary(s => s.Id, s => s.DepartmentId.Value);
            var departAdminDict = _administratorRepository.Entities.Where(a => !a.IsDeleted && a.IsEnabled && a.DepartmentId.HasValue)
                .GroupBy(a => a.DepartmentId.Value)
                .ToDictionary(g => g.Key, g => g.Select(a => a.Id).ToList());
            var rand = new Random();
            Dictionary<int, int> storeAdminDict = new Dictionary<int, int>();
            foreach (var item in storeDepartDict)
            {
                var storeId = item.Key;
                var departId = item.Value;
                var adminIds = departAdminDict[departId];
                var adminId = adminIds[rand.Next(0, adminIds.Count)];
                if (!storeAdminDict.ContainsKey(storeId))
                {
                    storeAdminDict[storeId] = adminId;
                }
            }

            return storeAdminDict;
        }


        /// <summary>
        /// 生成充值记录
        /// </summary>
        /// <param name="start">充值开始日期</param>
        /// <param name="end">充值结束日期</param>
        /// <param name="rechargeActivityId">充值活动id</param>
        /// <param name="memberIds">充值会员id</param>
        /// <returns></returns>
        public OperationResult GenerateRechargeData(DateTime start, DateTime end, int rechargeActivityId, params int[] memberIds)
        {
            //获取所有会员信息

            using (var transaction = _memberdepositRepository.GetTransaction())
            {
                try
                {
                    var rand = new Random();
                    var rechargeActivity = _memberActivityRepository.Entities.FirstOrDefault(m => m.Id == rechargeActivityId);
                    var memberEntities = _memberRepository.Entities.Where(m => !m.IsDeleted && m.IsEnabled && memberIds.Contains(m.Id)).ToArray();
                    // 生成随机时间
                    var dates = DateHelper.GetRandomDateTime(start, end, memberEntities.Length);
                    var storeIds = memberEntities.Where(m => m.StoreId.HasValue).Select(m => m.StoreId.Value).ToList();
                    var storeAdminDict = GetRandomOptId(storeIds);
                    var depositList = new List<MemberDeposit>();
                    var vipId = _memberTypeContract.MemberTypes.FirstOrDefault(m => m.MemberTypeName == "VIP会员").Id;
                    for (int i = 0; i < memberEntities.Length; i++)
                    {
                        var flag = rand.Next(0, 2) == 0;
                        var m = memberEntities[i];
                        var BeforeBalance = m.Balance;
                        var AfterBalance = BeforeBalance + rechargeActivity.Price + rechargeActivity.RewardMoney;
                        m.Balance = AfterBalance;
                        m.MemberTypeId = vipId;
                        var depositEntity = new MemberDeposit
                        {

                            MemberId = m.Id,
                            Score = 0M,
                            Price = rechargeActivity.Price, // 总额
                            Cash = flag ? rechargeActivity.Price : 0M,  // 现金
                            Card = flag ? 0M : rechargeActivity.Price,
                            Coupon = rechargeActivity.RewardMoney,
                            Notes = "",
                            Id = 0,
                            MemberDepositType = MemberDepositFlag.System,
                            DepositContext = MemberDepositContextEnum.线下充值,
                            MemberActivityType = MemberActivityFlag.Recharge,
                            MemberActivityId = rechargeActivity.Id,
                            Quotiety = 0M,
                            BeforeBalance = BeforeBalance,
                            AfterBalance = AfterBalance,
                            BeforeScore = m.Score,
                            AfterScore = m.Score,
                            order_Uid = null,
                            RelatedOrderNumber = null,
                            OrderType = null,
                            DepositStoreId = m.StoreId ?? 14,
                            CreatedTime = dates[i],
                            OperatorId = m.StoreId.HasValue ? storeAdminDict[m.StoreId.Value] : 9
                        };
                        depositList.Add(depositEntity);
                    }

                    // 修改会员储值
                    var res = _memberRepository.Update(memberEntities, m =>
                    {
                        m.UpdatedTime = DateTime.Now;
                        m.OperatorId = AuthorityHelper.OperatorId;
                    });

                    if (res.ResultType != OperationResultType.Success)
                    {
                        throw new Exception("会员储值更新失败");
                    }



                    // 保存充值记录
                    var count = _memberdepositRepository.Insert(depositList.AsEnumerable());
                    if (count <= 0)
                    {
                        throw new Exception("充值记录保存失败");
                    }


                    // 保存生成记录
                    var rechareRecord = new RechargeGenerateRecord
                    {
                        RechargeCount = memberEntities.Length,
                        MemberActivityId = rechargeActivityId
                    };
                    foreach (var item in depositList)
                    {
                        rechareRecord.MemberDeposits.Add(item);
                    }

                    res = _rechargeGenerateRecordContract.Insert(rechareRecord);
                    if (res.ResultType != OperationResultType.Success)
                    {
                        throw new Exception("充值生成记录保存失败");
                    }

                    transaction.Commit();
                    return OperationResult.OK();



                }
                catch (Exception e)
                {
                    transaction.Rollback();
                    return OperationResult.Error(e.Message);
                }
            }
        }





        private void CheckMoney(MemberDepositDto item)
        {
            // 校验金额
            if (item.Price != item.Cash + item.Card + item.Coupon)
            {
                throw new Exception($"充值总额与支付金额不一致,总额{item.Price},现金:{item.Cash},刷卡:{item.Card},赠送:{item.Coupon}");
            }
        }

        private void CheckQuotiety(decimal computedQuotiety, MemberDepositDto item)
        {
            if (computedQuotiety > 1 || computedQuotiety < 0)
            {
                throw new Exception($"储值系数异常{computedQuotiety},请核对充值总额与支付金额,总额:{item.Price},现金:{item.Cash},刷卡:{item.Card},赠送:{item.Coupon}");
            }
        }

        //微信充值
        /// <summary>
        /// 会员微信充值（需充值店铺信息）
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public OperationResult InsertWx(params MemberDepositDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                if (dtos.Any(d => !d.DepositStoreId.HasValue))
                {
                    return OperationResult.Error("请选择充值店铺");
                }
                // 店铺权限校验
                var manageStoreIds = _storeContract.QueryManageStoreId(AuthorityHelper.OperatorId.Value);
                if (manageStoreIds.Count <= 0)
                {
                    return OperationResult.Error("没有店铺权限");

                }
                var invalidStoreIds = dtos.Select(d => d.DepositStoreId.Value).Except(manageStoreIds);
                if (invalidStoreIds.Any())
                {
                    return OperationResult.Error($"店铺权限不足");
                }
                UnitOfWork.TransactionEnabled = true;
                IQueryable<Member> listMember = _memberRepository.Entities.Where(x => x.IsDeleted == false && x.IsEnabled == true);
                foreach (var item in dtos)
                {
                    Member member = listMember.Where(x => x.Id == item.MemberId).FirstOrDefault();
                    if (member == null) return new OperationResult(OperationResultType.Error, "会员不存在，请选择其他会员！");
                    IQueryable<MemberDeposit> listMemberDep = MemberDeposits.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.MemberId == item.MemberId);
                    item.DepositContext = MemberDepositContextEnum.线上充值;
                    item.OrderType = OrderTypeEnum.微信订单;
                    item.RelatedOrderNumber = item.order_Uid;
                    item.BeforeBalance = member.Balance;
                    item.BeforeScore = member.Score;

                    //充值后 储值和积分对应增加
                    member.Balance = member.Balance + item.Price;
                    member.Score = member.Score + item.Score;
                    if (item.MemberActivityType == MemberActivityFlag.Recharge)
                    {
                        //计算充值后系数
                        decimal tureSum = 0;// listMemberDep.Sum(x => x.Card  + x.Cash) + item.Cash;
                        foreach (var a in listMemberDep.ToList())
                        {
                            if (a.MemberActivityType == 0)
                            {
                                decimal Card; decimal Cash;
                                decimal.TryParse(a.Card.ToString(), out Card);
                                decimal.TryParse(a.Cash.ToString(), out Cash);
                                tureSum += Card + Cash;
                            }
                        }
                        tureSum = tureSum + item.Card;
                        //充值金额加赠送金额
                        decimal falseSum = 0; //= listMemberDep.Sum(x => x.Price as decimal?) + item.Price;
                        foreach (var a in listMemberDep.ToList())
                        {
                            decimal Price;
                            //if (a.MemberActivityType == 0)
                            //充值储值  price是充值金额加赠送后的金额
                            if (a.MemberActivityType == 0)
                            {
                                decimal.TryParse(a.Price.ToString(), out Price);
                                falseSum += Price;
                            }
                        }
                        falseSum += item.Price;
                        if (falseSum != 0)
                        {
                            item.Quotiety = Math.Round(tureSum / falseSum, 2);
                        }
                        else
                        {
                            item.Quotiety = 0;
                        }
                    }
                    else //非储值
                    {
                        var createTime = listMemberDep.Max(x => x.CreatedTime);
                        var quotiety = listMemberDep.Where(x => x.CreatedTime == createTime).FirstOrDefault().Quotiety;
                        item.Quotiety = quotiety;
                    }
                    item.AfterBalance = member.Balance;
                    item.AfterScore = member.Score;
                    item.TotalPrice = item.Price;
                    member.LevelId = CalculateMemberLevel(member.Id, item.Cash + item.Card);
                    member.LevelId = member.LevelId == 0 ? null : member.LevelId;
                    member.UpdatedTime = DateTime.Now;
                    _memberRepository.Update(member);
                }
                OperationResult result = _memberdepositRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                int count = this.UnitOfWork.SaveChanges();
                if (count > 0)
                {
                    return new OperationResult(OperationResultType.Success, "添加成功！");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, "充值失败！");
                }
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 员工微信充值积分
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public OperationResult InsertWxAdminId(params MemberDepositDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");

                UnitOfWork.TransactionEnabled = true;
                IQueryable<Member> listMember = _memberRepository.Entities.Where(x => x.IsDeleted == false && x.IsEnabled == true);
                foreach (var item in dtos)
                {
                    item.MemberActivityType = MemberActivityFlag.Score;

                    Member member = listMember.Where(x => x.Id == item.MemberId).FirstOrDefault();
                    if (member == null) return new OperationResult(OperationResultType.Error, "会员不存在，请选择其他会员！");
                    IQueryable<MemberDeposit> listMemberDep = MemberDeposits.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.MemberId == item.MemberId);
                    item.DepositContext = MemberDepositContextEnum.线上充值;
                    item.OrderType = OrderTypeEnum.微信订单;
                    item.RelatedOrderNumber = item.order_Uid;
                    item.BeforeBalance = member.Balance;
                    item.BeforeScore = member.Score;

                    //充值后 积分对应增加
                    //member.Balance = member.Balance + item.Price;
                    member.Score = member.Score + item.Score;


                    if (listMemberDep.Count() > 0)
                    {
                        var createTime = listMemberDep.Max(x => x.CreatedTime);
                        var quotiety = listMemberDep.Where(x => x.CreatedTime == createTime).FirstOrDefault().Quotiety;
                        item.Quotiety = quotiety;
                    }
                    else
                    {
                        item.Quotiety = 1;
                    }

                    item.AfterBalance = member.Balance;
                    item.AfterScore = member.Score;
                    item.TotalPrice = item.Price;
                    member.UpdatedTime = DateTime.Now;
                    _memberRepository.Update(member);
                }
                OperationResult result = _memberdepositRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                int count = this.UnitOfWork.SaveChanges();
                if (count > 0)
                {
                    return new OperationResult(OperationResultType.Success, "添加成功！");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, "充值失败！");
                }
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 零售赠送积分时保存充值记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="getScore">赠送积分</param>
        /// <param name="retailNumber">备注</param>
        /// <returns></returns>
        public void LogGetScoreWhenRetail(int storeId, Member memberEntity, decimal getScore, string retailNumber)
        {

            var beforeBalance = memberEntity.Balance;
            var afterBalance = memberEntity.Balance;// 充值积分,balance不变
            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore + getScore;

            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Score,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.购物奖励,
                Score = getScore,
                BeforeBalance = beforeBalance,
                AfterBalance = afterBalance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                RelatedOrderNumber = retailNumber,
                OrderType = OrderTypeEnum.零售订单,
                OperatorId = AuthorityHelper.OperatorId,
                DepositStoreId = storeId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("赠送积分时储值记录保存失败");
            }
        }


        /// <summary>
        /// 退货时保存记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="returnScore">返还积分</param>
        /// <param name="returnNumbjer">退货单号</param>
        public void LogScoreWhenReturnProduct(int storeId, Member memberEntity, decimal returnScore, string returnNumbjer)
        {

            var beforeBalance = memberEntity.Balance;
            var afterBalance = memberEntity.Balance;// 充值积分,balance不变
            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore + returnScore;
            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Score,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.退货充值,
                Price = 0,
                Score = returnScore,
                BeforeBalance = beforeBalance,
                AfterBalance = afterBalance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                RelatedOrderNumber = returnNumbjer,
                OrderType = OrderTypeEnum.退货订单,
                OperatorId = AuthorityHelper.OperatorId,
                DepositStoreId = storeId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("返还积分时储值记录保存失败");
            }
        }

        /// <summary>
        /// 退货时保存记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="returnBalance">返还储值</param>
        /// <param name="returnNumber">退货单号</param>
        public void LogBalanceWhenReturnProduct(int storeId, Member memberEntity, decimal returnBalance, string returnNumber)
        {

            var beforeBalance = memberEntity.Balance;
            var afterBalance = memberEntity.Balance + returnBalance;
            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore;
            var quotiety = GetCurrentQuotiety(memberEntity.Id);
            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Recharge,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.退货充值,
                BeforeBalance = beforeBalance,
                AfterBalance = afterBalance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                Coupon = returnBalance,
                Price = returnBalance,
                RelatedOrderNumber = returnNumber,
                OrderType = OrderTypeEnum.退货订单,
                OperatorId = AuthorityHelper.OperatorId,
                Quotiety = quotiety,
                DepositStoreId = storeId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("返还储值时储值记录保存失败");
            }
        }

        /// <summary>
        /// 储值积分维护增加储值
        /// </summary>
        public void LogBalanceWhenAdjustDeposit(Member memberEntity, decimal balanceToAdd, string remarks)
        {
            if (balanceToAdd <= 0)
            {
                throw new Exception("储值金额错误");
            }
            var beforeBalance = memberEntity.Balance;
            var afterBalance = beforeBalance + balanceToAdd;
            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore;
            var quotiety = GetCurrentQuotiety(memberEntity.Id);

            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Recharge,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.系统调整,
                Price = balanceToAdd,
                Coupon = balanceToAdd,
                BeforeBalance = beforeBalance,
                AfterBalance = afterBalance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                Notes = remarks,
                Quotiety = quotiety,
                OperatorId = AuthorityHelper.OperatorId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("储值记录保存失败");
            }
        }

        /// <summary>
        /// 储值积分增加积分
        /// </summary>
        public void LogScoreWhenAdjustDeposit(Member memberEntity, decimal scoreToAdd, string remarks)
        {
            if (scoreToAdd <= 0)
            {
                throw new Exception("积分错误");
            }
            var beforeBalance = memberEntity.Balance;
            var afterBalance = beforeBalance;

            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore + scoreToAdd;


            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Score,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.系统调整,
                Score = scoreToAdd,
                BeforeBalance = beforeBalance,
                AfterBalance = afterBalance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                Notes = remarks,
                OperatorId = AuthorityHelper.OperatorId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("储值记录保存失败");
            }
        }

        /// <summary>
        /// 会员储值后,计算会员等级,充值积分禁止调用此方法
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="cashAndCardAmount">充值金额(现金+刷卡之和,不含赠送储值或积分)</param>
        /// <returns>返回MemberLevel的Id,如果没有等级或出现异常,默认返回0</returns>
        public int CalculateMemberLevel(int memberId, decimal cashAndCardAmount)
        {
            try
            {
                if (cashAndCardAmount < 0)
                {
                    throw new ArgumentException("充值金额不能小于0");
                }

                // 会员类型校验
                var memberInfo = _memberContract.Members.Where(m => !m.IsDeleted && m.IsEnabled && m.Id == memberId)
                                                    .Select(m => new { m.MemberType, m.MemberLevel, m.LevelId })
                                                    .FirstOrDefault();
                var enterpriseId = RedisCacheHelper.Get<int>(RedisCacheHelper.EnterpriseMemberTypeId);
                if (memberInfo.MemberType.Id == enterpriseId)
                {
                    // 企业会员充值没有等级
                    if (!memberInfo.LevelId.HasValue)
                    {
                        throw new Exception("未找到该企业会员的会员等级类型");
                    }
                    return memberInfo.LevelId.Value;
                }

                // 筛选会员储值记录
                var memberDepList = _memberdepositRepository.Entities.Where(x => !x.IsDeleted && x.IsEnabled
                                                                                && x.MemberId == memberId
                                                                                && x.MemberActivityType == MemberActivityFlag.Recharge
                                                                                && (x.Cash > 0 || x.Card > 0));
                // 计算累计充值总额(现金+刷卡)
                decimal rechargeAmount = cashAndCardAmount;
                if (memberDepList.Any())
                {
                    rechargeAmount += memberDepList.Sum(d => d.Cash) + memberDepList.Sum(d => d.Card);
                }
                var memberLevelQuery = _memberLevelRepository.Entities.Where(x => !x.IsDeleted && x.IsEnabled && x.UpgradeType != UpgradeType.企业);

                // 根据充值金额,向下查找会员等级,取最高的一级
                var downLevelEntity = memberLevelQuery.Where(x => x.UpgradeCondition <= rechargeAmount).OrderByDescending(x => x.UpgradeCondition).FirstOrDefault();

                return downLevelEntity != null ? downLevelEntity.Id : 0;



            }
            catch (Exception e)
            {
                _Logger.Error(e.Message, e.StackTrace);
                _Logger.Error($"memberId:{memberId},price:{cashAndCardAmount}");
                throw new Exception("出错了,会员充值等级计算异常");
            }


        }



        /// <summary>
        /// 计算储值系数
        /// </summary>
        /// <param name="memberId"></param>
        /// <param name="cash"></param>
        /// <param name="card"></param>
        /// <param name="price"></param>
        /// <returns></returns>
        private decimal ComputeQuotiety(int memberId, decimal cash, decimal card, decimal price)
        {
            // 获取储值记录
            var historyDeposit = _memberdepositRepository.Entities.Where(c => c.IsEnabled && !c.IsDeleted && c.MemberId == memberId)
                                                                  .Where(c => c.MemberActivityType == MemberActivityFlag.Recharge)
                                                                  .Where(c => c.Cash > 0 || c.Card > 0)
                                                                  .Where(c => c.Quotiety > 0)
                                                                  .Select(d => new { d.Card, d.Cash, d.Price })
                                                                  .ToList();
            var historyCash = historyDeposit.Sum(d => d.Cash);
            var historyCard = historyDeposit.Sum(d => d.Card);
            var totalConsume = cash + card + historyCash + historyCard;// 总消费
            var totalPrice = historyDeposit.Sum(d => d.Price) + price; // 充值总额
            if (totalConsume <= 0 && totalPrice > 0)
            {
                return 1M;
            }
            var quotiety = Math.Round(totalConsume / totalPrice, 2); // 系数=总消费/充值总额
            if (quotiety > 1 || quotiety <= 0)
            {
                throw new Exception("系数计算异常");
            }
            return quotiety;

        }
        /// <summary>
        /// 获取会员当前的储值系数
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <returns>储值系数</returns>
        public decimal GetCurrentQuotiety(int memberId)
        {
            var latestDeposit = _memberdepositRepository.Entities
                                                .Where(c => c.IsEnabled && !c.IsDeleted && c.MemberId == memberId)
                                                .Where(c => c.MemberActivityType == MemberActivityFlag.Recharge)
                                                .Where(c => c.Cash > 0 || c.Card > 0)
                                                .Where(c => c.Quotiety > 0)
                                                .OrderByDescending(c => c.CreatedTime)
                                                .FirstOrDefault();
            if (latestDeposit == null || latestDeposit.Quotiety > 1 || latestDeposit.Quotiety < 0)
            {
                return 1M;
            }
            return latestDeposit.Quotiety;

        }

        /// <summary>

        #region 加班奖励积分时保存充值记录
        /// 加班奖励积分时保存充值记录
        /// </summary>
        /// <param name="memberEntity">会员信息</param>
        /// <param name="getScore">奖励积分</param>
        /// <returns></returns>
        public void LogGetScoreWhenOvertime(Member memberEntity, decimal getScore)
        {
            if (memberEntity == null)
            {
                return;
            }
            if (getScore <= 0)
            {
                return;
            }
            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore + getScore;

            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Score,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.加班奖励,
                Score = getScore,
                BeforeBalance = memberEntity.Balance,
                AfterBalance = memberEntity.Balance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                OperatorId = AuthorityHelper.OperatorId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                //throw new Exception("赠送积分时储值记录保存失败");
                return;
            }
        }
        #endregion
        #endregion

        /// <summary>
        /// 考试通过建立积分
        /// </summary>
        public void LogScoreWhenPassExam(Member memberEntity, decimal scoreToAdd)
        {
            if (scoreToAdd <= 0)
            {
                throw new Exception("积分错误");
            }
            var beforeBalance = memberEntity.Balance;
            var afterBalance = beforeBalance;

            var beforeScore = memberEntity.Score;
            var afterScore = beforeScore + scoreToAdd;


            var entity = new MemberDeposit()
            {
                MemberId = memberEntity.Id,
                MemberActivityType = MemberActivityFlag.Score,
                MemberDepositType = MemberDepositFlag.System,
                DepositContext = MemberDepositContextEnum.考试奖励,
                Score = scoreToAdd,
                BeforeBalance = beforeBalance,
                AfterBalance = afterBalance,
                BeforeScore = beforeScore,
                AfterScore = afterScore,
                OperatorId = AuthorityHelper.OperatorId
            };
            var count = _memberdepositRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("储值记录保存失败");
            }
        }

        #region 计算会员积分和储值
        private void CalueMember(Member member, decimal Price, decimal Score, MemberActivityFlag? MemberActivityType)
        {
            if (MemberActivityType == MemberActivityFlag.Recharge)
            {
                member.Balance += Price;
                //member.Score += item.Score;
            }
            else if (MemberActivityType == MemberActivityFlag.Score)
            {
                member.Score += Score;
            }
        }
        #endregion

        #region 更新数据
        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params MemberDepositDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _memberdepositRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(ICollection<MemberDeposit> dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _memberdepositRepository.Update(dtos, entity =>
                {
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 移除数据
        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberdepositRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberdepositRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 恢复数据
        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberdepositRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberdepositRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 删除数据（物理删除）
        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _memberdepositRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }
        #endregion

        #region 启用数据
        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberdepositRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberdepositRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 禁用数据
        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberdepositRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberdepositRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #endregion


        public class SMSDataEntry
        {
            public string MemberPhone { get; set; }
            public string MemberName { get; set; }
            public string StoreName { get; set; }
            public decimal DepositPrice { get; set; }
            public decimal DepositScore { get; set; }
            public DateTime DepositTime { get; set; }
        }

        private void SendSMSToMember(params SMSDataEntry[] entry)
        {
            //储值短信模版
            //1、$storeName：所属店铺
            //2、$DepositPrice：储值金额
            //3、$DepositScore：储值积分
            //4、$memberName：会员昵称
            //5、$DepositTime：储值时间


            var config = RedisCacheHelper.GetSMSConfig();
            if (config.Keys.Count > 0 && config.ContainsKey("recharge") && config["recharge"] == "1")
            {
                for (int i = 0; i < entry.Length; i++)
                {
                    var tempDict = new Dictionary<string, object> {
                            {"storeName",    entry[i].StoreName},
                            {"memberName",   entry[i].MemberName},
                            {"DepositPrice", entry[i].DepositPrice},
                            {"DepositScore", entry[i].DepositScore},
                            {"$DepositTime", entry[i].DepositTime}
                        };
                    _smsContract.SendSms(entry[i].MemberPhone, TemplateNotificationType.MemberDeposit, tempDict);
                }

            }

        }
    }
}
