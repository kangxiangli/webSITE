
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Models.Entities;
using Whiskey.ZeroStore.ERP.Models.Enums;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class MemberConsumeService : ServiceBase, IMemberConsumeContract
    {
        #region MemberConsumeService

        private readonly IRepository<MemberConsume, int> _memberconsumeRepository;

        /// <summary>
        /// 储值积分维护时记录用的storeId
        /// </summary>
        private const int STORE_ID_WHEN_ADJUST_DEPOSIT = 14;

        /// <summary>
        /// 店铺切换时的optid
        /// </summary>
        private const int OPERATOR_ID_WHEN_ADJUST_DEPOSIT = 9;

        public MemberConsumeService(
            IRepository<MemberConsume, int> memberconsumeRepository
        ) : base(memberconsumeRepository.UnitOfWork)
        {
            _memberconsumeRepository = memberconsumeRepository;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public MemberConsume View(int Id)
        {
            var entity = _memberconsumeRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public MemberConsumeDto Edit(int Id)
        {
            var entity = _memberconsumeRepository.GetByKey(Id);
            Mapper.CreateMap<MemberConsume, MemberConsumeDto>();
            var dto = Mapper.Map<MemberConsume, MemberConsumeDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<MemberConsume> MemberConsumes { get { return _memberconsumeRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<MemberConsume, bool>> predicate, int id = 0)
        {
            return _memberconsumeRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params MemberConsumeDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _memberconsumeRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }

        public OperationResult Insert(params MemberConsume[] entities)
        {
            return _memberconsumeRepository.Insert(entities.AsEnumerable()) > 0 ? OperationResult.OK() : OperationResult.Error("保存失败");
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params MemberConsumeDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _memberconsumeRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberconsumeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberconsumeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberconsumeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberconsumeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _memberconsumeRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberconsumeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberconsumeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _memberconsumeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _memberconsumeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }

        public void LogWhenRetail(Retail retailEntity)
        {

            // 参数校验
            if (retailEntity.ScoreConsume < 0 || retailEntity.StoredValueConsume < 0)
            {
                throw new Exception("储值/积分消费金额不能小于0");
            }

            // 未消费储值积分,不记录
            if (retailEntity.StoredValueConsume == 0 && retailEntity.ScoreConsume == 0)
            {
                throw new Exception("储值/积分消费金额不能全为0");
            }
            // 消费了储值积分
            var storedValueConsume = retailEntity.StoredValueConsume;
            var scoreConsume = retailEntity.ScoreConsume;
            var entityToSave = new List<MemberConsume>();
            if (retailEntity.StoredValueConsume > 0)
            {
                entityToSave.Add(new MemberConsume()
                {
                    ConsumeType = MemberActivityFlag.Recharge,
                    StoreId = retailEntity.StoreId.Value,
                    ConsumeContext = MemberConsumeContextEnum.线下消费,
                    MemberId = retailEntity.ConsumerId.Value,
                    RelatedOrderNumber = retailEntity.RetailNumber,
                    OrderType = OrderTypeEnum.零售订单,
                    BalanceConsume = retailEntity.StoredValueConsume,
                    ScoreConsume = 0,
                    OperatorId = AuthorityHelper.OperatorId
                });
            }

            if (retailEntity.ScoreConsume > 0)
            {
                entityToSave.Add(new MemberConsume()
                {
                    ConsumeType = MemberActivityFlag.Score,
                    StoreId = retailEntity.StoreId.Value,
                    ConsumeContext = MemberConsumeContextEnum.线下消费,
                    MemberId = retailEntity.ConsumerId.Value,
                    RelatedOrderNumber = retailEntity.RetailNumber,
                    OrderType = OrderTypeEnum.零售订单,
                    BalanceConsume = 0,
                    ScoreConsume = retailEntity.ScoreConsume,
                    OperatorId = AuthorityHelper.OperatorId
                });
            }

            var count = _memberconsumeRepository.Insert(entityToSave.AsEnumerable());
            if (count <= 0)
            {
                throw new Exception("消费记录保存失败");
            }
        }


        /// <summary>
        /// 保存会员储值消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">储值消费,消费金额不能小于0</param>
        /// <returns></returns>
        public void LogBalanceWhenAdjustDeposit(int memberId, decimal balanceConsume)
        {

            // 参数校验
            if (balanceConsume <= 0)
            {
                throw new Exception("储值金额错误");
            }

            // 消费储值积分记录为非负数

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Recharge,
                StoreId = STORE_ID_WHEN_ADJUST_DEPOSIT,
                ConsumeContext = MemberConsumeContextEnum.系统调整,
                MemberId = memberId,
                RelatedOrderNumber = string.Empty,
                BalanceConsume = balanceConsume,
                ScoreConsume = 0,
                OperatorId = AuthorityHelper.OperatorId
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("储值记录保存失败");
            }
        }


        /// <summary>
        /// 保存会员积分消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分消费,消费金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        public void LogScoreWhenAdjustDeposit(int memberId, decimal scoreConsume)
        {

            // 参数校验
            if (scoreConsume <= 0)
            {
                throw new Exception("消费积分错误");
            }

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Score,
                StoreId = STORE_ID_WHEN_ADJUST_DEPOSIT,
                ConsumeContext = MemberConsumeContextEnum.系统调整,
                MemberId = memberId,
                BalanceConsume = 0,
                ScoreConsume = scoreConsume,
                OperatorId = AuthorityHelper.OperatorId,
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("积分记录保存失败");
            }
        }


        /// <summary>
        /// 保存会员补卡积分扣除
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分扣除,扣除金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        public void LogScoreWhenAttendanceRepair(int memberId, decimal scoreConsume)
        {

            // 参数校验
            if (scoreConsume <= 0)
            {
                //throw new Exception("扣除积分错误");
                return;
            }

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Score,
                StoreId = STORE_ID_WHEN_ADJUST_DEPOSIT,
                ConsumeContext = MemberConsumeContextEnum.补卡扣除,
                MemberId = memberId,
                BalanceConsume = 0,
                ScoreConsume = scoreConsume,
                OperatorId = AuthorityHelper.OperatorId,
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count <= 0)
            {
                //throw new Exception("积分记录保存失败");
                return;
            }
        }


        /// <summary>
        /// 保存会员请假积分扣除
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分扣除,扣除金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        public void LogScoreWhenLeave(int memberId, decimal scoreConsume)
        {

            // 参数校验
            if (scoreConsume <= 0)
            {
                //throw new Exception("扣除积分错误");
                return;
            }

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Score,
                StoreId = STORE_ID_WHEN_ADJUST_DEPOSIT,
                ConsumeContext = MemberConsumeContextEnum.请假扣除,
                MemberId = memberId,
                BalanceConsume = 0,
                ScoreConsume = scoreConsume,
                OperatorId = AuthorityHelper.OperatorId,
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("积分记录保存失败");
            }
        }


        /// <summary>
        /// 保存会员积分消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="storeId">退货店铺id</param>
        /// <param name="scoreConsume">积分消费,消费金额不能小于0</param>
        /// <param name="returnNumber">退货单号</param>
        /// <returns></returns>
        public void LogScoreWhenReturnProduct(int memberId, int storeId, decimal scoreConsume, string returnNumber)
        {

            // 参数校验
            if (scoreConsume <= 0)
            {
                throw new Exception("消费积分错误");
            }

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Score,
                StoreId = storeId,
                MemberId = memberId,
                ConsumeContext = MemberConsumeContextEnum.退货扣除,
                RelatedOrderNumber = returnNumber,
                OrderType = OrderTypeEnum.退货订单,
                BalanceConsume = 0,
                ScoreConsume = scoreConsume,
                OperatorId = AuthorityHelper.OperatorId
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count < 0)
            {
                throw new Exception("消费记录保存失败");
            }
        }



        /// <summary>
        /// 保存会员积分消费记录
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="balanceConsume">积分消费,消费金额不能小于0</param>
        /// <param name="notes">备注</param>
        /// <returns></returns>
        public void LogScoreWhenSwitchStore(int memberId, decimal scoreConsume)
        {

            // 参数校验
            if (scoreConsume <= 0)
            {
                throw new Exception("消费积分错误");
            }

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Score,
                StoreId = STORE_ID_WHEN_ADJUST_DEPOSIT,
                ConsumeContext = MemberConsumeContextEnum.店铺切换,
                MemberId = memberId,
                BalanceConsume = 0,
                ScoreConsume = scoreConsume,
                OperatorId = AuthorityHelper.OperatorId ?? OPERATOR_ID_WHEN_ADJUST_DEPOSIT
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("积分记录保存失败");
            }
        }



        /// <summary>
        /// 补考
        /// </summary>
        /// <param name="memberId">会员id</param>
        /// <param name="scoreConsume">消耗积分</param>
        public void LogScoreWhenRetryExam(int memberId, decimal scoreConsume)
        {

            // 参数校验
            if (scoreConsume <= 0)
            {
                throw new Exception("消费积分错误");
            }

            var entity = new MemberConsume()
            {
                ConsumeType = MemberActivityFlag.Score,
                StoreId = STORE_ID_WHEN_ADJUST_DEPOSIT,
                ConsumeContext = MemberConsumeContextEnum.补考,
                MemberId = memberId,
                BalanceConsume = 0,
                ScoreConsume = scoreConsume,
                OperatorId = AuthorityHelper.OperatorId,
            };
            var count = _memberconsumeRepository.Insert(entity);
            if (count <= 0)
            {
                throw new Exception("积分记录保存失败");
            }
        }


        #endregion
    }
}
