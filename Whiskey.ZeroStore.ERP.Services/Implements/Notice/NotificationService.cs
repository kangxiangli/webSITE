
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Notices;
using Whiskey.jpush.api;
using Whiskey.Utility.Logging;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class NotificationService : ServiceBase, INotificationContract
    {
        #region NotificationService
        protected static readonly ILogger _Logger = LogManager.GetLogger(typeof(NotificationService));
        private readonly IRepository<Notification, int> _notificationRepository;
        private readonly IRepository<MsgNotificationReader, int> _msgNotificationReaderRepository;
        private readonly IRepository<Administrator, int> _administratorRepository;
        private readonly IRepository<Department, int> _departmentRepository;
        private readonly IRepository<Member, int> _memberRepository;
        private readonly IExamRecordContract _examRecordContract;
        public NotificationService(
            IRepository<Notification, int> notificationRepository, IRepository<MsgNotificationReader, int> msgNotificationReaderRepository,
            IRepository<Administrator, int> administratorRepository,
            IRepository<Department, int> departmentRepository,
            IRepository<Member, int> memberRepository,
            IExamRecordContract examRecordContract
        )
            : base(notificationRepository.UnitOfWork)
        {
            _notificationRepository = notificationRepository;
            _msgNotificationReaderRepository = msgNotificationReaderRepository;
            _administratorRepository = administratorRepository;
            _departmentRepository = departmentRepository;
            _memberRepository = memberRepository;
            _examRecordContract = examRecordContract;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public Notification View(int Id)
        {
            var entity = _notificationRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public NotificationDto Edit(int Id)
        {
            var entity = _notificationRepository.GetByKey(Id);
            Mapper.CreateMap<Notification, NotificationDto>();
            var dto = Mapper.Map<Notification, NotificationDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Notification> Notifications { get { return _notificationRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Notification, bool>> predicate, int id = 0)
        {
            return _notificationRepository.ExistsCheck(predicate, id);
        }


        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(Action<List<int>> sendaction, params NotificationDto[] dtos)
        {
            return Insert(false, sendaction, dtos);
        }
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="contentToTitle">将content转换成Title推送（只限IOS）</param>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public OperationResult Insert(bool contentToTitle, Action<List<int>> sendaction, params NotificationDto[] dtos)
        {

            dtos.CheckNotNull("dtos");

            // 推送集合
            var pushList = new List<MsgNotificationReader>();

            var res = new OperationResult(OperationResultType.Success, string.Empty, null);

            foreach (var dto in dtos)
            {

                try
                {
                    dto.IsSuccessed = true;
                    dto.SendTime = dto.NoticeType == NoticeFlag.Timing ? dto.SendTime : null;// sendtime用作定时推送，非定时推送时，时间过滤掉
                    var noticeEntity = Mapper.Map(dto, new Models.Notification());
                    noticeEntity.IsDeleted = false;
                    noticeEntity.IsEnabled = true;
                    noticeEntity.UpdatedTime = DateTime.Now;
                    noticeEntity.OperatorId = AuthorityHelper.OperatorId;

                    // 保存通知信息
                    if (_notificationRepository.Insert(noticeEntity) <= 0)
                    {
                        throw new Exception("推送失败");
                    }

                    // 保存推送信息
                    pushList.AddRange(GeneratePushList(dto, noticeEntity.Id));
                    res = _msgNotificationReaderRepository.Insert(pushList, entity =>
                    {
                        entity.CreatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                    });

                    // 保存失败处理
                    if (res.ResultType != OperationResultType.Success)
                    {
                        noticeEntity.IsSuccessed = false;
                        _notificationRepository.Update(noticeEntity);
                        throw new Exception("通知消息保存失败");
                    }

                    // 生成examRecord
                    if (dto.ExamId.HasValue && dto.BlogId.HasValue)
                    {
                        // 试卷记录
                        var pushExamRecordList = pushList.Select(s => new ExamRecordEntity()
                        {

                            ExamId = dto.ExamId.Value,
                            AdminId = s.AdministratorId.Value,
                            IsPass = false,
                            CreatedTime = DateTime.Now,
                            GetScore = 0,
                            State = ExamRecordStateEnum.未开始,
                            UpdatedTime = DateTime.Now,
                            TraingBlogId = dto.BlogId.Value,
                            EntryTrainStatus = dto.IsEntryTrain ? (int?)0 : null
                        }).ToArray();

                        // 保存试卷
                        var hasInsert = _examRecordContract.Insert(pushExamRecordList);
                        if (hasInsert.ResultType != OperationResultType.Success)
                        {
                            throw new Exception("考试通知保存失败");
                        }
                    }

                    // pc端推送
                    if (sendaction.IsNotNull())
                    {
                        var listAdminIds = pushList.Select(s => s.AdministratorId.Value).ToList();
                        sendaction(listAdminIds);
                    }

                    // app端推送
                    if (dto.IsEnableApp)
                    {
                        switch ((NoticeTargetFlag)dto.NoticeTargetType)
                        {
                            case NoticeTargetFlag.Admin:
                            case NoticeTargetFlag.Department:
                                {
                                    var audience = jpush.api.push.mode.Audience.s_tag("yuangong");
                                    if (pushList.Count > 0)
                                    {
                                        audience.alias(pushList.Select(p => p.AdministratorId.ToString()).ToArray());
                                    }
                                    var isSuccess = JpushApi.XIAODIE(dto.SendTime, JpushApiPlatform.All, audience, dto.Description, dto.Title, dto.Description, contentToTitle);
                                    if (!isSuccess)
                                    {
                                        _Logger.Error("app推送失败-jpush");
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    res.Other = noticeEntity.Id;
                }
                catch (Exception e)
                {
                    _Logger.Error(e.Message + e.StackTrace);
                    throw;
                }

            }
            return res;

        }

        // 生成推送信息
        private List<MsgNotificationReader> GeneratePushList(NotificationDto dto, int noticeEntityId)
        {
            if (noticeEntityId <= 0)
            {
                throw new Exception("noticeEntityId错误");
            }
            var pushList = new List<MsgNotificationReader>();
            switch ((NoticeTargetFlag)dto.NoticeTargetType)
            {
                case NoticeTargetFlag.Admin:
                    {
                        if (dto.AdministratorIds == null || dto.AdministratorIds.Count <= 0)
                        {
                            // 无差别推送
                            var tmpList = _administratorRepository.Entities
                                .Where(w => !w.IsDeleted && w.IsEnabled)
                                .Select(s => s.Id).ToList()
                                .Select(adminId => new MsgNotificationReader()
                                {
                                    AdministratorId = adminId,
                                    IsRead = false,
                                    NotificationId = noticeEntityId
                                }).ToList();
                            pushList.AddRange(tmpList);
                        }
                        else // 推到指定人
                        {
                            var tmpList = dto.AdministratorIds.Select(adminId => new MsgNotificationReader()
                            {
                                AdministratorId = adminId,
                                IsRead = false,
                                NotificationId = noticeEntityId
                            }).ToList();
                            pushList.AddRange(tmpList);
                        }
                    }
                    break;
                case NoticeTargetFlag.Department:// 推送到指定部门的员工
                    {
                        var tmplist = _administratorRepository.Entities
                            .Where(w => !w.IsDeleted && w.IsEnabled)
                            .Where(w => dto.DepartmentIds.Contains(w.DepartmentId.Value)).Select(s => s.Id).ToList()
                            .Select(adminId => new MsgNotificationReader()
                            {
                                AdministratorId = adminId,
                                IsRead = false,
                                NotificationId = noticeEntityId
                            }).ToList();
                        pushList.AddRange(tmplist);
                    }
                    break;

                default:
                    break;
            }

            return pushList;
        }


        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(Action sendNotificationAllAction, params NotificationDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _notificationRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                CheckSendNotification(result, sendNotificationAllAction);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(Action sendNotificationAllAction, params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _notificationRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _notificationRepository.Update(entity);
                }
                var result = UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
                CheckSendNotification(result, sendNotificationAllAction);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(Action sendNotificationAllAction, params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _notificationRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _notificationRepository.Update(entity);
                }
                var result = UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
                CheckSendNotification(result, sendNotificationAllAction);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(Action sendNotificationAllAction, params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _notificationRepository.Delete(ids);
                CheckSendNotification(result, sendNotificationAllAction);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(Action sendNotificationAllAction, params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _notificationRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _notificationRepository.Update(entity);
                }
                var result = UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
                CheckSendNotification(result, sendNotificationAllAction);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(Action sendNotificationAllAction, params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _notificationRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _notificationRepository.Update(entity);
                }
                var result = UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
                CheckSendNotification(result, sendNotificationAllAction);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }


        #region 针对个人发送通知
        /// <summary>
        /// 
        /// </summary>
        /// <param name="adminId">接受人</param>
        /// <param name="title">标题</param>
        /// <param name="content">内容</param>
        public void SendNotice(int adminId, string title, string content, Action<List<int>> sendNotificationAction)
        {
            List<int> listId = new List<int>();
            listId.Add(adminId);
            var result = this.Insert(sendNotificationAction, new NotificationDto()
            {
                Title = title,
                AdministratorIds = listId,
                Description = content,
                IsEnableApp = true,
                NoticeTargetType = (int)NoticeTargetFlag.Admin,
                NoticeType = (int)NoticeFlag.Immediate
            });
        }
        #endregion

        private void CheckSendNotification(OperationResult result, Action sendNotificationAllAction)
        {
            if (result.ResultType == OperationResultType.Success)
            {
                sendNotificationAllAction();
            }
        }
        #endregion
    }
}
