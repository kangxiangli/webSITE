
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Notices;
using Whiskey.jpush.api;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class MessagerService : ServiceBase, IMessagerContract
    {
        #region MessagerService

		private readonly IRepository<Messager, int> _messagerRepository;

        private readonly IRepository<Administrator, int> _adminRepository;
		public MessagerService(IRepository<Messager, int> messagerRepository,
            IRepository<Administrator, int> adminRepository
		): base(messagerRepository.UnitOfWork)
		{
			_messagerRepository = messagerRepository;
            _adminRepository = adminRepository;
		}


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Messager View(int Id){

            Messager entity = _messagerRepository.GetByKey(Id);
            //if (entity.ReceiverId==AuthorityHelper.OperatorId)
            //{
            //    Mapper.CreateMap<Messager, MessagerDto>();
            //    var dto = Mapper.Map<Messager, MessagerDto>(entity);
            //    dto.Status = (int)MessagerStatusFlag.Read;                 
            //    //entity.OperatorId = AuthorityHelper.OperatorId;
            //    this.Update(dto);
            //    CacheHelper.RemoveAllCache("MsgCache");
            //}                        
            return entity;
		}


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public MessagerDto Edit(int Id){
			var entity=_messagerRepository.GetByKey(Id);
            Mapper.CreateMap<Messager, MessagerDto>();
            var dto = Mapper.Map<Messager, MessagerDto>(entity);
            return dto;
		}


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Messager> Messagers { get { return _messagerRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Messager, bool>> predicate, int id = 0)
        {
            return _messagerRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(Action<List<int>> sendMessageAction, params MessagerDto[] dtos)
        {
            return Insert(false, sendMessageAction, dtos);
        }
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="contentToTitle">将content转换成Title推送（只限IOS）</param>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public OperationResult Insert(bool contentToTitle, Action<List<int>> sendMessageAction, params MessagerDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                List<int> listId = new List<int>();
                foreach (MessagerDto dto in dtos)
                {
                    listId.Add(dto.SenderId);
                    listId.AddRange(dto.ReceiverIds);
                }
                List<Administrator> listAdmin = _adminRepository.Entities.Where(x => listId.Contains(x.Id)).ToList();
                OperationResult result = _messagerRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.Receiver = listAdmin.FirstOrDefault(x => x.Id == entity.ReceiverId);
                    entity.Sender = listAdmin.FirstOrDefault(x => x.Id == entity.SenderId);
                    return entity;
                });
                #region 发送手APP通知

                #endregion
                if (result.ResultType == OperationResultType.Success)
                {
                    foreach (var item in dtos)
                    {
                        Whiskey.jpush.api.push.mode.Audience audience = Whiskey.jpush.api.push.mode.Audience.s_tag("yuangong");
                        if (item.ReceiverIds.IsNotNullOrEmptyThis())
                        {
                            audience.alias(item.ReceiverIds.ConvertAll(c => c.ToString()).ToArray());
                        }
                        JpushApi.XIAODIE(null, JpushApiPlatform.All, audience, item.Description, item.MessageTitle, item.Description, contentToTitle);
                        if (sendMessageAction.IsNotNull())
                        {
                            sendMessageAction(item.ReceiverIds);
                        }
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(Action sendMessageAllAction, params MessagerDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                //List<int> listId = new List<int>();
                //foreach (MessagerDto dto in dtos)
                //{
                //    listId.Add(dto.SenderId);
                //    if (dto.ReceiverIds != null)
                //    {
                //        listId.AddRange(dto.ReceiverIds);
                //    }

                //}
                //List<Administrator> listAdmin = _adminRepository.Entities.Where(x => listId.Contains(x.Id)).ToList();
				OperationResult result = _messagerRepository.Update(dtos,
					dto =>
					{

					},
					(dto, entity) => {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        //entity.Receiver = listAdmin.FirstOrDefault(x => x.Id == entity.ReceiverId);
                        //entity.Sender = listAdmin.FirstOrDefault(x => x.Id == entity.SenderId);
						return entity;
					});
                CheckSendMessage(result, sendMessageAllAction);
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(Action sendMessageAllAction, params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _messagerRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_messagerRepository.Update(entity);
				}
				var result = UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
                CheckSendMessage(result, sendMessageAllAction);
                return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(Action sendMessageAllAction, params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _messagerRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_messagerRepository.Update(entity);
				}
				var result = UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
                CheckSendMessage(result, sendMessageAllAction);
                return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(Action sendMessageAllAction, params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				OperationResult result = _messagerRepository.Delete(ids);
                CheckSendMessage(result, sendMessageAllAction);
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(Action sendMessageAllAction, params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _messagerRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_messagerRepository.Update(entity);
				}
				var result = UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
                CheckSendMessage(result, sendMessageAllAction);
                return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}


		/// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(Action sendMessageAllAction, params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _messagerRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_messagerRepository.Update(entity);
				}
				var result = UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
                CheckSendMessage(result, sendMessageAllAction);
                return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
		}


        private void CheckSendMessage(OperationResult result,Action sendMessageAllAction)
        {
            if (result.ResultType == OperationResultType.Success && sendMessageAllAction.IsNotNull())
            {
                sendMessageAllAction();
            }
        }

        #endregion
    }
}
