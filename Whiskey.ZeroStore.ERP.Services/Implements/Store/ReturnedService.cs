
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Data.Entity;
using Whiskey.ZeroStore.ERP.Models.Entities;
using Whiskey.ZeroStore.ERP.Models.DTO;
using Whiskey.ZeroStore.ERP.Models.Enums;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class ReturnedService : ServiceBase, IReturnedContract
    {
        #region ReturnedService

        private readonly IAdministratorContract _administratorContract;
        private readonly IPunishScoreRecordContract _adminPunishScoreRecordContract;
        private readonly ICouponContract _couponContract;
        private readonly ITimeoutSettingContract _timeoutSettingContract;
        private readonly IInventoryContract _inventoryContract;
        private readonly IMemberConsumeContract _memberConsumeContract;
        private readonly IMemberContract _memberContract;
        private readonly IMemberDepositContract _memberDepositContract;
        private readonly IProductTrackContract _productTrackContract;
        private readonly IRepository<Retail, int> _retailRepository;
        private readonly IRepository<ReturnedItem, int> _returnedItemRepository;
        private readonly IRepository<Returned, int> _returnedRepository;
        private readonly ISmsContract _smsContract;
        private readonly IStoreContract _storeContract;
        private readonly ITimeoutRequestContract _timeoutRequestContract;

        public ReturnedService(
            IRepository<Returned, int> returnedRepository,
            IRepository<Retail, int> retailRepository,
            IRepository<ReturnedItem, int> returnedItemRepository,
            IStoreContract storeContract,
            ITimeoutSettingContract timeoutSettingContract,
            ITimeoutRequestContract timeoutRequestContract,
            IPunishScoreRecordContract adminPunishScoreRecordContract,
            IMemberContract memberContract,
            IAdministratorContract administratorContract,
            IMemberDepositContract memberDepositContract,
            IMemberConsumeContract memberConsumeContract,
            IInventoryContract inventoryContract,
            IProductTrackContract productTrackContract,
            ICouponContract couponContract,

            ISmsContract smsContract
        ) : base(returnedRepository.UnitOfWork)
        {
            _returnedRepository = returnedRepository;
            _retailRepository = retailRepository;
            _returnedItemRepository = returnedItemRepository;
            _storeContract = storeContract;
            _timeoutSettingContract = timeoutSettingContract;
            _timeoutRequestContract = timeoutRequestContract;
            _adminPunishScoreRecordContract = adminPunishScoreRecordContract;
            _memberContract = memberContract;
            _administratorContract = administratorContract;
            _memberDepositContract = memberDepositContract;
            _memberConsumeContract = memberConsumeContract;
            _inventoryContract = inventoryContract;
            _productTrackContract = productTrackContract;
            _couponContract = couponContract;
            _smsContract = smsContract;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Returned> Returneds { get { return _returnedRepository.Entities; } }

        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Returned, bool>> predicate, int id = 0)
        {
            return _returnedRepository.ExistsCheck(predicate, id);
        }

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _returnedRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }

        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _returnedRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _returnedRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public ReturnedDto Edit(int Id)
        {
            var entity = _returnedRepository.GetByKey(Id);
            Mapper.CreateMap<Returned, ReturnedDto>();
            var dto = Mapper.Map<Returned, ReturnedDto>(entity);
            return dto;
        }

        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _returnedRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _returnedRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params ReturnedDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _returnedRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }

        public OperationResult Insert(Returned[] retus, bool isTrans)
        {
            _returnedRepository.UnitOfWork.TransactionEnabled = isTrans;
            return _returnedRepository.Insert((IEnumerable<Returned>)retus) > 0
                 ? new OperationResult(OperationResultType.Success)
                 : new OperationResult(OperationResultType.Error);
        }

        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _returnedRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _returnedRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _returnedRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _returnedRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params ReturnedDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _returnedRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Returned View(int Id)
        {
            var entity = _returnedRepository.GetByKey(Id);
            return entity;
        }
        #endregion

        public OperationResult CanReturn(string retailNumber)
        {
            if (string.IsNullOrEmpty(retailNumber))
            {
                new OperationResult(OperationResultType.Error, "参数错误");
            }
            var retailEntity = _retailRepository.Entities.Where(r => !r.IsDeleted && r.IsEnabled && r.RetailNumber == retailNumber).FirstOrDefault();
            if (retailEntity == null)
            {
                new OperationResult(OperationResultType.Error, "订单不存在");
            }

            // 盘点检查
            var isChecking = _storeContract.IsInCheckingStat(retailEntity.StoreId.Value);
            if (isChecking)
            {
                return new OperationResult(OperationResultType.Error, "店铺正在盘点,无法进行退货操作!");
            }

            // 闭店检查
            if (_storeContract.IsInClosedStat(retailEntity.StoreId.Value))
            {
                return new OperationResult(OperationResultType.Error, "店铺已闭店,无法进行退货操作!");
            }

            // 退货超时判断
            var settingEntity = _timeoutSettingContract.GetTimeoutSettingForReturn();
            if (CheckTimeout(retailEntity.OutStorageDatetime, settingEntity))
            {
                // 判断是否有审核
                var score = settingEntity.DeductScore;

                var requestQuery = _timeoutRequestContract.Entities.Where(t => !t.IsDeleted && t.IsEnabled && !t.IsUsed
                && t.State == TimeoutRequestState.已通过
                && t.RequestAdminId == AuthorityHelper.OperatorId.Value
                && t.Number == retailNumber);
                if (requestQuery.Any())
                {
                    score = 0;
                }

                return new OperationResult(OperationResultType.Success, "timeout", score);
            }
            return new OperationResult(OperationResultType.Success, "ok");
        }

        public DbContextTransaction GetTransaction()
        {
            return _returnedRepository.GetTransaction();
        }


        public OperationResult AddReturn(ReturnInfoModel dto)
        {
            OperationResult result = new OperationResult(OperationResultType.Error);
            try
            {
                CheckParameter(dto);
                var retailEntity = GetRetail(dto.RetailNumber);

                // 查询该零售单下的所有商品
                var retailInventories = retailEntity.RetailItems.SelectMany(item => item.RetailInventorys).ToList();
                if (retailInventories == null || retailInventories.Count <= 0)
                {
                    throw new Exception("商品订单记录异常");
                }

                // 校验提交的流水号是否可以退货
                var codesFromDb = retailInventories.Select(i => i.ProductBarcode).ToList();
                var codesFromUser = dto.ProductBarcodes;

                var historyReturns = _returnedRepository.Entities.Where(r => r.IsEnabled && !r.IsDeleted)
                                                                        .Where(r => r.RetailNumber == retailEntity.RetailNumber)
                                                                        .Include(r => r.ReturnedItems)
                                                                        .ToList();
                var codesReturned = historyReturns == null ? new List<string>() : historyReturns.SelectMany(r => r.ReturnedItems).Select(i => i.ProductBarcode).Distinct().ToList();

                CheckBarcodesFromUser(codesFromDb, codesFromUser, codesReturned);






                Returned returnEntityToAdd;
                ReturnDetail returnMoneyDetail;
                if (retailEntity.UseCouponOrStoreActivity)// 整单退
                {
                    // 计算整单退货各项金额
                    returnMoneyDetail = GetReturnDetailWhenWholyReturn(retailEntity, retailEntity.TotalMoneyAfterLevelDiscount, retailInventories.Count());

                    // 与提交信息比较,是否一致
                    CompareRetailInfo(dto, returnMoneyDetail);


                    // 生成退货单
                    returnEntityToAdd = GetReturnEntityToAdd(dto, retailEntity, retailInventories, codesFromDb, codesFromUser, returnMoneyDetail, new List<string>());
                }
                else  // 普通退
                {

                    // 计算应退总金额
                    decimal totalMoneyToReturn = CalcTotalMoneyToReturn(codesFromUser, retailEntity, retailInventories);

                    // 计算各项剩余可退金额
                    returnMoneyDetail = GetReturnDetail(retailEntity, codesFromDb, codesFromUser, totalMoneyToReturn, historyReturns, codesReturned);

                    // 已上一步的数据为参照,校验提交的退款信息
                    CompareRetailInfo(dto, returnMoneyDetail);
                    // 生成退货单
                    returnEntityToAdd = GetReturnEntityToAdd(dto, retailEntity, retailInventories, codesFromDb, codesFromUser, returnMoneyDetail, codesReturned);

                }





                // 退货超时判断
                var settingEntity = _timeoutSettingContract.GetTimeoutSettingForReturn();

                bool isTimeout = CheckTimeout(retailEntity.CreatedTime, settingEntity);

                using (var transaction = _returnedRepository.GetTransaction())
                {
                    //超时扣积分
                    if (isTimeout)
                    {
                        TimeoutProcess(retailEntity.RetailNumber, settingEntity.DeductScore);
                    }
                    var res = _returnedRepository.Insert(returnEntityToAdd);
                    if (res <= 0)
                    {
                        transaction.Rollback();
                        return OperationResult.Error("订单保存失败");
                    }


                    // 如果是会员订单
                    if (retailEntity.ConsumerId.HasValue)
                    {
                        //退还项包含储值，或积分，需要更新会员的储值积分
                        if (returnMoneyDetail.ReturnCardValue > 0 || returnMoneyDetail.ReturnScore > 0 || returnMoneyDetail.ReturnGetScore > 0)
                        {
                            var memberEntity = retailEntity.Consumer;
                            if (returnMoneyDetail.ReturnGetScore > 0 && memberEntity.Score <= 0)
                            {
                                transaction.Rollback();
                                return OperationResult.Error("会员积分不足，赠送积分无法扣除，无法退货");
                            }
                            if (returnMoneyDetail.ReturnGetScore > 0)
                            {
                                //保存积分变动记录
                                _memberConsumeContract.LogScoreWhenReturnProduct(retailEntity.ConsumerId.Value, retailEntity.StoreId.Value, returnMoneyDetail.ReturnGetScore, returnEntityToAdd.ReturnedNumber);
                            }
                            if (returnMoneyDetail.ReturnScore > 0)
                            {
                                //保存积分变动记录
                                _memberDepositContract.LogScoreWhenReturnProduct(returnEntityToAdd.StoreId.Value, memberEntity, returnMoneyDetail.ReturnScore, returnEntityToAdd.ReturnedNumber);
                            }
                            if (returnMoneyDetail.ReturnCardValue > 0)
                            {
                                //保存储值变动记录
                                _memberDepositContract.LogBalanceWhenReturnProduct(returnEntityToAdd.StoreId.Value, memberEntity, returnMoneyDetail.ReturnCardValue, returnEntityToAdd.ReturnedNumber);
                            }
                            memberEntity.Balance += returnMoneyDetail.ReturnCardValue;
                            memberEntity.Score += returnMoneyDetail.ReturnScore;
                            memberEntity.Score -= returnMoneyDetail.ReturnGetScore;
                            var memberDto = Mapper.Map<MemberDto>(memberEntity);
                            var memberUpdateRes = _memberContract.UpdateScore(memberDto);
                            if (memberUpdateRes.ResultType != OperationResultType.Success)
                            {
                                transaction.Rollback();
                                return OperationResult.Error("会员储值积分更新失败");
                            }
                        }
                    }

                    // 更新零售订单的退货状态
                    if (IsReturnAllAfterCurrentReturn(codesFromDb, codesFromUser, codesReturned))
                    {
                        retailEntity.RetailState = RetailStatus.整单退货;
                    }
                    else
                    {
                        retailEntity.RetailState = RetailStatus.部分退货;
                    }
                    retailEntity.UpdatedTime = DateTime.Now;
                    var retailUpdateRes = _retailRepository.Update(retailEntity);
                    if (retailUpdateRes <= 0)
                    {
                        transaction.Rollback();
                        return OperationResult.Error("零售订单退货状态更新失败");
                    }

                    // 退货库存更新为可销售状态
                    var returnInventoryList = retailInventories.Where(i => codesFromUser.Contains(i.ProductBarcode)).Select(i => i.Inventory).ToList();
                    returnInventoryList.Each(i => i.Status = (int)InventoryStatus.Default);
                    var dtos = returnInventoryList.Select(i => Mapper.Map<Inventory, InventoryDto>(i)).ToArray();
                    var updateInventoryRes = _inventoryContract.Update(dtos, false);
                    if (updateInventoryRes.ResultType != OperationResultType.Success)
                    {
                        transaction.Rollback();
                        return OperationResult.Error("退货库存状态更新失败");
                    }
                    // 优惠券还原到未使用的状态
                    if (!string.IsNullOrEmpty(retailEntity.CouponNumber))
                    {
                        var couponUpdateRes = _couponContract.SetCouponItemUnUsed(retailEntity.CouponNumber);
                        if (couponUpdateRes.ResultType != OperationResultType.Success)
                        {
                            transaction.Rollback();
                            return OperationResult.Error("优惠券使用状态更新失败");
                        }
                    }

                    var storeName = _storeContract.Stores.FirstOrDefault(s => s.Id == returnEntityToAdd.StoreId.Value).StoreName;
                    foreach (var item in returnEntityToAdd.ReturnedItems)
                    {
                        var barcode = item.ProductBarcode;
                        if (!string.IsNullOrEmpty(barcode))
                        {
                            #region 商品追踪
                            ProductTrackDto pt = new ProductTrackDto();
                            pt.ProductNumber = barcode.Substring(0, barcode.Length - 3);
                            pt.ProductBarcode = barcode;
                            pt.Describe = string.Format(ProductOptDescTemplate.ON_PRODUCT_RETURN, storeName);
                            _productTrackContract.Insert(pt);
                            #endregion
                        }
                    }


                    transaction.Commit();

                    //会员短信通知
                    //1、$storeName：店铺
                    //2、$memberName：会员昵称
                    //3、$returnTime：退款时间
                    //4、$orderNumber：订单编号
                    //5、$storePhone：店铺电话（有电话取电话,否则取手机号）
                    //6、$returnMoney：退还金额
                    //7、$returnScore：退还积分
                    if (retailEntity.Consumer != null)
                    {
                        var config = RedisCacheHelper.GetSMSConfig();
                        if (config.Keys.Count > 0 && config.ContainsKey("return") && config["return"] == "1")
                        {
                            var tempDict = new Dictionary<string, object> {
                            {"storeName", retailEntity.Store?.StoreName??string.Empty},
                            {"memberName", retailEntity.Consumer.RealName},
                            {"returnTime", returnEntityToAdd.CreatedTime},
                            {"orderNumber", returnEntityToAdd.ReturnedNumber},
                            {"storePhone", retailEntity.Store?.Telephone??retailEntity.Store?.MobilePhone},
                            {"returnMoney", returnEntityToAdd.Balance},
                            {"returnScore", returnEntityToAdd.ConsumeScore-returnEntityToAdd.AchieveScore},
                            };
                            _smsContract.SendSms(retailEntity.Consumer.MobilePhone, TemplateNotificationType.RetailReturn, tempDict);

                        }

                    }
                    return new OperationResult(OperationResultType.Success, "ok");
                }
            }
            catch (Exception ex)
            {
                return OperationResult.Error("操作失败" + ex.Message);
            }
        }


        /// <summary>
        /// 获取零售订单下库存
        /// </summary>
        /// <param name="retailNumber"></param>
        /// <returns></returns>
        public OperationResult GetRetailBarcodes(string retailNumber)
        {

            var retailEntity = GetRetail(retailNumber);

            var levelDiscount = 1.0M;
            if (retailEntity.LevelDiscount.HasValue && retailEntity.LevelDiscountAmount > 0)
            {
                levelDiscount = retailEntity.LevelDiscount.Value;
            }

            Func<Inventory, int> getInventoryReturnStatus = i =>
            {
                return retailEntity.ReturnRecordHistory.Count(r => r.InventoryId == i.Id && r.IsReturn) > 0 ? 1 : 0;
            };
            var inventoryList = retailEntity.RetailItems.SelectMany(i => i.RetailInventorys).ToList();
            var res = new
            {
                InventoryList = inventoryList.Select(i => new
                {
                    InventoryId = i.Id,
                    ProductBarcode = i.Inventory.ProductBarcode,
                    ThumbnailPath = i.Inventory.Product.ThumbnailPath ?? i.Inventory.Product.ProductOriginNumber.ThumbnailPath,
                    ProductRetailPrice = Math.Round(i.RetailItem.ProductRetailPrice * levelDiscount, 2),//退货时,如果订单有等级折扣,退货商品零售价要打折
                    IsReturn = getInventoryReturnStatus(i.Inventory)
                }).ToList(),
                UseCouponOrStoreActivity = retailEntity.UseCouponOrStoreActivity
            };
            return new OperationResult(OperationResultType.Success, string.Empty, res);
        }


        /// <summary>
        /// 获取退货金额
        /// </summary>
        /// <param name="retailNumber">退货单</param>
        /// <param name="barcodes">退货流水号</param>
        /// <returns></returns>
        public OperationResult GetReturnMoney(string retailNumber, string barcodes)
        {
            var retailEntity = GetRetail(retailNumber);
            if (retailEntity.UseCouponOrStoreActivity)
            {
                var barcodesFromDb = retailEntity.RetailItems.SelectMany(r => r.RetailInventorys.Select(i => i.ProductBarcode)).ToList();
                var arr = barcodes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                if (barcodesFromDb.Except(arr).Count() > 0)
                {
                    return OperationResult.Error("提交流水号未满足整单退货");
                }
                return GetWholyReturnMoney(retailNumber, barcodes);
            }
            else
            {
                return GetPartialReturnMoney(retailNumber, barcodes);
            }
        }


        /// <summary>
        /// 整单退货商品时计算应退各项金额
        /// </summary>
        public OperationResult GetWholyReturnMoney(string retailNumber, string barcodes)
        {
            var retailEntity = GetRetail(retailNumber);
            var totalMoneyReturn = retailEntity.ConsumeCount;
            var returnInfo = GetReturnDetailWhenWholyReturn(retailEntity, retailEntity.TotalMoneyAfterLevelDiscount, barcodes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Length);
            return new OperationResult(OperationResultType.Success, string.Empty, returnInfo);
        }

        /// <summary>
        /// 部分退货计算退款金额
        /// </summary>
        public OperationResult GetPartialReturnMoney(string retailNumber, string barcodes)
        {
            var barcodesFromUser = barcodes.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();
            // 校验retail
            var retailEntity = GetRetail(retailNumber);
            // 校验流水号是否在订单中
            var retailItemInventorys = retailEntity.RetailItems.SelectMany(item => item.RetailInventorys).ToList();
            if (retailItemInventorys == null || retailItemInventorys.Count <= 0)
            {
                throw new Exception("商品订单记录异常");
            }
            var codesFromDb = retailItemInventorys.Select(i => i.ProductBarcode).ToList();
            var historyReturns = _returnedRepository.Entities.Where(r => r.IsEnabled && !r.IsDeleted)
                                                                       .Where(r => r.RetailNumber == retailEntity.RetailNumber)
                                                                       .Include(r => r.ReturnedItems)
                                                                       .ToList();
            var codesReturned = historyReturns == null ? new List<string>() : historyReturns.SelectMany(r => r.ReturnedItems).Select(i => i.ProductBarcode).Distinct().ToList();

            CheckBarcodesFromUser(codesFromDb, barcodesFromUser, codesReturned);

            decimal totalMoneyToReturn = CalcTotalMoneyToReturn(barcodesFromUser, retailEntity, retailItemInventorys);

            // 获取历史退货记录
            var historyReturnedList = historyReturns;

            if (historyReturnedList == null || historyReturnedList.Count <= 0) // 无历史退货记录
            {

                // 整单退货
                if (barcodesFromUser.Count == codesFromDb.Count && codesFromDb.TrueForAll(code => barcodesFromUser.Contains(code)))
                {
                    var returnDetail = GetReturnDetailWhenWholyReturn(retailEntity, totalMoneyToReturn, barcodesFromUser.Count);
                    return new OperationResult(OperationResultType.Success, string.Empty, returnDetail);
                }
                else // 部分退
                {
                    var returnDetail = GetReturnDetailWhenPartialReturn(retailEntity, null, totalMoneyToReturn, barcodesFromUser.Count);
                    return new OperationResult(OperationResultType.Success, string.Empty, returnDetail);
                }
            }
            else　// 有历史退货记录
            {

                // 部分退
                var returnDetail = GetReturnDetailWhenPartialReturn(retailEntity, historyReturnedList, totalMoneyToReturn, barcodesFromUser.Count);
                return new OperationResult(OperationResultType.Success, string.Empty, returnDetail);
            }
        }


        public OperationResult Update(params Returned[] entity)
        {
            return _returnedRepository.Update(entity);
        }
        #region 退货专用

        /// <summary>
        ///计算储值成本
        /// </summary>
        /// <param name="balance"></param>
        private Tuple<bool, decimal, decimal> CheckBalanceCost(int memberId, decimal balance)
        {
            decimal realBalance = 0M; //储值成本
            var depositEntity = _memberDepositContract.MemberDeposits
                                                    .Where(c => c.MemberId == memberId && c.IsEnabled && !c.IsDeleted)
                                                    .Where(c => c.Quotiety > 0 && c.Quotiety <= 1)
                                                    .OrderByDescending(c => c.CreatedTime)
                                                    .FirstOrDefault();
            if (depositEntity == null)
            {
                return Tuple.Create(true, balance, 1.0M);
            }
            var quotiety = depositEntity.Quotiety;

            realBalance = Math.Round(quotiety * balance, 2);
            if (realBalance < 0)
            {
                return Tuple.Create(false, 0M, 0M);
            }
            return Tuple.Create(true, realBalance, quotiety);
        }

        private void CheckBarcodesFromUser(List<string> codesFromDb, List<string> codesFromUser, List<string> codesReturned)
        {
            if (codesFromDb == null || codesFromDb.Count <= 0)
            {
                throw new Exception("零售订单下没有商品流水号记录");
            }
            if (codesFromUser == null || codesFromUser.Count <= 0)
            {
                throw new Exception("请选择要退货的商品");
            }
            foreach (var code in codesFromUser)
            {
                if (!codesFromDb.Contains(code))
                {
                    throw new Exception(string.Format("商品流水号{0}无效，在订单记录中未找到该流水号"));
                }
                if (codesReturned.Contains(code))
                {
                    throw new Exception(string.Format("商品流水号{0}无效，该商品已经退货"));
                }
            }

        }

        private void CheckParameter(ReturnInfoModel resturnInfo)
        {

            if (string.IsNullOrEmpty(resturnInfo.RetailNumber))
            {
                throw new Exception("参数错误");
            }
            if (string.IsNullOrEmpty(resturnInfo.Note))
            {
                throw new Exception("请填写退货原因");
            }
            if (resturnInfo.ProductBarcodes.Count <= 0)
            {
                throw new Exception("请选择要退货商品");
            }
            if (resturnInfo.ReturnDetail.ReturnSwipCard > 0 && !resturnInfo.ReturnDetail.SwipeCardType.HasValue)
            {
                throw new Exception("请选择刷卡类型");
            }
        }

        private Retail GetRetail(string retailNumber)
        {
            var retailEntity = _retailRepository.Entities.Where(r => !r.IsDeleted && r.IsEnabled && r.RetailNumber == retailNumber)
                                                         .Include(r => r.RetailItems)
                                                         .Include(r => r.Consumer)
                                                         .FirstOrDefault();
            if (retailEntity == null)
            {
                throw new Exception("零售订单不存在");
            }

            if (retailEntity.RetailState == RetailStatus.整单退货)
            {
                throw new Exception("零售订单此前已全部退货");
            }
            return retailEntity;
        }


        private bool CheckTimeout(DateTime referTimePoint, TimeoutSetting settingEntity)
        {
            if (settingEntity == null)
            {
                return false;
            }
            var timeoutDate = referTimePoint.AddSeconds(settingEntity.TimeSpan);
            return DateTime.Now > timeoutDate;
        }
        /// <summary>
        /// 比较提交金额是否与计算的金额一致(刷卡+现金只需总和一致)
        /// </summary>
        /// <param name="returnInfoFromUser"></param>
        /// <param name="computeDetail"></param>
        /// <returns></returns>
        private void CompareRetailInfo(ReturnInfoModel returnInfoFromUser, ReturnDetail computeDetail)
        {
            var detailFromUser = returnInfoFromUser.ReturnDetail;
            var diffMoney = (float)Math.Round(Math.Abs((computeDetail.ReturnCash + computeDetail.ReturnSwipCard) - (detailFromUser.ReturnCash + detailFromUser.ReturnSwipCard)), 2);

            if (diffMoney > 0)
            {
                throw new Exception($"现金刷卡之和与预计可退金额相差{diffMoney}");

            }
            if (detailFromUser.Coupon != computeDetail.Coupon)
            {
                throw new Exception("优惠券扣除不一致");

            }
            if (detailFromUser.EraseMoney != computeDetail.EraseMoney)
            {
                throw new Exception("抹零扣除不一致");

            }
            if (detailFromUser.ReturnCardValue != computeDetail.ReturnCardValue)
            {
                throw new Exception("储值扣除不一致");
            }

            if (detailFromUser.ReturnScore != computeDetail.ReturnScore)
            {
                throw new Exception("积分扣除不一致");
            }
            if (detailFromUser.ReturnGetScore != computeDetail.ReturnGetScore)
            {
                throw new Exception("获得扣除不一致");
            }
            if (detailFromUser.ReturnMoneyCou != computeDetail.ReturnMoneyCou)
            {
                throw new Exception($"退款总金额不一致,提交金额:{detailFromUser.ReturnMoneyCou},计算金额:{computeDetail.ReturnMoneyCou}");
            }
            if (detailFromUser.StoreActivityDiscount != computeDetail.StoreActivityDiscount)
            {
                throw new Exception("店铺活动扣除不一致");
            }

        }

        private ReturnDetail GetReturnDetail(Retail retailEntity, List<string> codesFromDb, List<string> codesFromUser, decimal totalMoneyToReturn, List<Returned> historyReturns, List<string> codesReturned)
        {
            ReturnDetail returnDetail;
            if (historyReturns == null || historyReturns.Count <= 0) // 无历史退货记录
            {
                if (codesReturned.Count != 0)
                {
                    throw new Exception("商品退货记录异常");
                }

                // 整单退货
                if (IsReturnAllAfterCurrentReturn(codesFromDb, codesFromUser, codesReturned))
                {
                    returnDetail = GetReturnDetailWhenWholyReturn(retailEntity, totalMoneyToReturn, codesFromUser.Count);
                }
                else // 部分退
                {
                    returnDetail = GetReturnDetailWhenPartialReturn(retailEntity, null, totalMoneyToReturn, codesFromUser.Count);
                }
            }
            else // 有历史退货记录
            {
                //保证退货明细>0
                if (historyReturns.Any(r => r.ReturnedItems.Count() <= 0))
                {
                    throw new Exception("商品退货记录异常");
                }

                // 部分退
                returnDetail = GetReturnDetailWhenPartialReturn(retailEntity, historyReturns, totalMoneyToReturn, codesFromUser.Count);
            }

            return returnDetail;
        }

        private ReturnDetail GetReturnDetailWhenPartialReturn(Retail retailEntity, List<Returned> historyReturnedList, decimal totalMoneyToReturn, int returnCount)
        {

            // 没有历史退货记录的情况，各项退款额都是0
            if (historyReturnedList == null || historyReturnedList.Count <= 0)
            {
                historyReturnedList = new List<Returned>();
            }


            var returnDetail = new ReturnDetail()
            {
                Coupon = 0,
                StoreActivityDiscount = 0,
                Admin = AuthorityHelper.AdminName,
                EraseMoney = 0,
                ReturnCardValue = 0,
                ReturnCash = 0,
                ReturnGetScore = 0,
                ReturnMoneyCou = 0,
                ReturnScore = 0,
                ReturnSwipCard = 0,
                ReturnCount = returnCount
            };

            // 从零售订单的各项支付金额减去历史记录的退还金额
            var leftReturnCash = Math.Round(Math.Max(retailEntity.CashConsume - historyReturnedList.Sum(r => r.Cash), 0), 2);
            var leftReturnSwipCard = Math.Round(Math.Max(retailEntity.SwipeConsume - historyReturnedList.Sum(r => r.SwipCard), 0), 2);
            var leftReturnCardValue = Math.Round(Math.Max(retailEntity.StoredValueConsume - historyReturnedList.Sum(r => r.Balance), 0), 2);
            var leftReturnScore = Math.Round(Math.Max(retailEntity.ScoreConsume - historyReturnedList.Sum(r => r.ConsumeScore), 0), 2);
            var leftEraseMoney = Math.Round(Math.Max(retailEntity.EraseConsume - historyReturnedList.Sum(r => r.EraseMoney), 0), 2);

            // 针对商品总额1800,付款2000,找零200的情况
            // 每次计算可退金额时,都要扣除这200块钱,
            // 否则会出现可退金额2000的情况
            if (retailEntity.ReturnMoney > 0)
            {
                //从现金或刷卡中扣除找零的额度
                if (leftReturnSwipCard < retailEntity.ReturnMoney && leftReturnCash < retailEntity.ReturnMoney)
                {
                    //二者均小于找零的情况
                    if ((leftReturnSwipCard + leftReturnCash) < retailEntity.ReturnMoney)
                    {
                        throw new Exception("现金刷卡之和小于找零");
                    }

                    // 从刷卡中扣除
                    var left = retailEntity.ReturnMoney - leftReturnSwipCard;

                    // 可用刷卡退还
                    leftReturnSwipCard = 0;

                    // 可用现金退还
                    leftReturnCash -= left;
                }
                else //二者至少有1个大于找零的情况
                {
                    if (leftReturnSwipCard >= retailEntity.ReturnMoney)
                    {
                        //从刷卡中扣除
                        leftReturnSwipCard -= retailEntity.ReturnMoney;
                    }
                    else
                    {
                        //从现金中扣除
                        leftReturnCash -= retailEntity.ReturnMoney;
                    }
                }
            }

            var leftMoneyToScore = totalMoneyToReturn - leftEraseMoney;
            if (leftMoneyToScore <= 0) //剩余抹零足够抵扣
            {
                returnDetail.EraseMoney = totalMoneyToReturn;
            }
            else // 抹零不够,剩余积分来凑
            {
                var leftMoneyToCardValue = leftMoneyToScore - leftReturnScore;
                if (leftMoneyToCardValue <= 0) // 积分足够抵扣
                {
                    returnDetail.EraseMoney = leftEraseMoney;
                    returnDetail.ReturnScore = leftMoneyToScore;
                }
                else // 积分不够,储值来凑
                {
                    var leftMoneyToSwipCard = leftMoneyToCardValue - leftReturnCardValue;
                    if (leftMoneyToSwipCard <= 0)// 储值足够抵扣
                    {
                        returnDetail.EraseMoney = leftEraseMoney;
                        returnDetail.ReturnScore = leftReturnScore;
                        returnDetail.ReturnCardValue = leftMoneyToCardValue;
                    }
                    else
                    {
                        // 储值不够,刷卡来凑
                        var leftMoneyToCash = leftMoneyToSwipCard - leftReturnSwipCard;
                        if (leftMoneyToCash <= 0) //刷卡足够抵扣
                        {
                            returnDetail.EraseMoney = leftEraseMoney;
                            returnDetail.ReturnScore = leftReturnScore;
                            returnDetail.ReturnCardValue = leftReturnCardValue;
                            returnDetail.ReturnSwipCard = leftMoneyToSwipCard;
                        }
                        else // 刷卡不够,剩余全部退还现金
                        {
                            returnDetail.EraseMoney = leftEraseMoney;
                            returnDetail.ReturnScore = leftReturnScore;
                            returnDetail.ReturnCardValue = leftReturnCardValue;
                            returnDetail.ReturnSwipCard = leftReturnSwipCard;
                            returnDetail.ReturnCash = leftMoneyToCash;
                        }
                    }
                }
            }

            // 退款总额 = 现金+刷卡+储值+积分+抹零+店铺活动+优惠券
            returnDetail.ReturnMoneyCou = Math.Round(returnDetail.ReturnCash + returnDetail.ReturnSwipCard
                                                                  + returnDetail.ReturnCardValue
                                                                  + returnDetail.ReturnScore
                                                                  + returnDetail.EraseMoney
                                                                  + returnDetail.StoreActivityDiscount
                                                                  + returnDetail.Coupon, 2);

            if (returnDetail.ReturnMoneyCou != totalMoneyToReturn)
            {
                // 异常状态
                throw new Exception($"商品退货价格异常,ReturnMoneyCou:{returnDetail.ReturnMoneyCou},totalMoneyToReturn:{totalMoneyToReturn}");
            }

            if (retailEntity.GetScore > 0) //只有获取了积分,才要扣除获得的积分
            {
                // 计算减除获得积分
                var scoreRuleEntity = retailEntity.ScoreRule;

                // 扣除用户获得积分 =  本次总退款金额*当时零售单的积分规则比例
                var returnGetScore = Math.Round(totalMoneyToReturn * ((decimal)scoreRuleEntity.ScoreUnit / (decimal)scoreRuleEntity.ConsumeUnit));

                returnDetail.ReturnGetScore = (int)returnGetScore;
            }

            return returnDetail;
        }

        private ReturnDetail GetReturnDetailWhenWholyReturn(Retail retailEntity, decimal totalMoneyToReturn, int returnCount)
        {
            //价格校验
            var total = Math.Round(retailEntity.CashConsume + retailEntity.SwipeConsume
                                                + retailEntity.StoredValueConsume
                                                + retailEntity.ScoreConsume
                                                + retailEntity.EraseConsume
                                                + retailEntity.StoreActivityDiscount
                                                + retailEntity.CouponConsume
                                                - retailEntity.ReturnMoney, 2);
            if (total - totalMoneyToReturn != 0)
            {
                // 异常状态
                throw new Exception("商品退货价格异常");
            }

            //部分退货前提:没有使用过优惠券,没有参加店铺活动
            var returnDetail = new ReturnDetail() { Coupon = 0, StoreActivityDiscount = 0, ReturnCount = returnCount, Admin = AuthorityHelper.AdminName };
            if (retailEntity.UseCouponOrStoreActivity)
            {
                returnDetail.Coupon = retailEntity.CouponConsume;
                returnDetail.StoreActivityDiscount = retailEntity.StoreActivityDiscount;
            }
            returnDetail.EraseMoney = retailEntity.EraseConsume;
            returnDetail.ReturnScore = retailEntity.ScoreConsume;
            returnDetail.ReturnCardValue = retailEntity.StoredValueConsume;
            returnDetail.ReturnSwipCard = retailEntity.SwipeConsume;
            returnDetail.ReturnCash = retailEntity.CashConsume;
            returnDetail.ReturnGetScore = retailEntity.GetScore;
            returnDetail.SwipeCardType = retailEntity.SwipeCardType;
            if (retailEntity.LevelDiscount.HasValue && retailEntity.LevelDiscountAmount > 0)
            {
                //有等级折扣时,退货总额 = 零售单总金额*等级折扣
                returnDetail.ReturnMoneyCou = retailEntity.TotalMoneyAfterLevelDiscount;
            }
            else
            {
                returnDetail.ReturnMoneyCou = retailEntity.ConsumeCount;
            }

            // 整单退货要扣除找零
            if (retailEntity.ReturnMoney > 0)
            {
                //从现金或刷卡中扣除找零
                if (returnDetail.ReturnCash < retailEntity.ReturnMoney && returnDetail.ReturnSwipCard < retailEntity.ReturnMoney)
                {
                    if ((returnDetail.ReturnCash + returnDetail.ReturnSwipCard) < retailEntity.ReturnMoney)
                    {
                        throw new Exception("现金刷卡之和小于找零");
                    }
                    //从刷卡中扣除
                    var left = retailEntity.ReturnMoney -= returnDetail.ReturnSwipCard;
                    returnDetail.ReturnSwipCard = 0;

                    //可用现金退还
                    returnDetail.ReturnCash -= left;
                }
                else //二者至少有1个大于找零的情况
                {
                    if (returnDetail.ReturnSwipCard >= returnDetail.ReturnCash)
                    {
                        //从刷卡中扣除
                        returnDetail.ReturnSwipCard -= retailEntity.ReturnMoney;
                    }
                    else
                    {
                        //从现金中扣除
                        returnDetail.ReturnCash -= retailEntity.ReturnMoney;
                    }
                }
            }
            var returnTotal = Math.Round(returnDetail.ReturnCash + returnDetail.ReturnSwipCard
                                                              + returnDetail.ReturnCardValue
                                                              + returnDetail.ReturnScore
                                                              + returnDetail.EraseMoney
                                                              + returnDetail.StoreActivityDiscount
                                                              + returnDetail.Coupon, 2);
            if (returnTotal != returnDetail.ReturnMoneyCou)
            {
                // 异常状态
                throw new Exception($"商品退货价格异常,returnTotal:{returnTotal},ReturnMoneyCou:{returnDetail.ReturnMoneyCou}");
            }
            if (Math.Abs(returnTotal - (decimal)totalMoneyToReturn) > 0.1M)
            {
                // 异常状态
                throw new Exception($"商品退货价格异常,returnTotal:{returnTotal},totalMoneyToReturn{totalMoneyToReturn}");
            }

            return returnDetail;
        }

        private string GenerateReturndNumber()
        {
            string time = DateTime.Now.ToString("yyyyMMddHHmmssfff");

            return time;
        }

        private Returned GetReturnEntityToAdd(ReturnInfoModel resturnInfo, Retail retailEntity, List<RetailInventory> retailItemInventorys, List<string> codesFromDb, List<string> barcodesFromUser, ReturnDetail returnDetail, List<string> returnedCodes)
        {
            var returnEntityToAdd = new Returned();
            var retnum = GenerateReturndNumber();
            returnEntityToAdd.RetailId = retailEntity.Id;
            returnEntityToAdd.RetailNumber = retailEntity.RetailNumber;
            returnEntityToAdd.ReturnedNumber = retnum;
            returnEntityToAdd.MemberId = retailEntity.ConsumerId;
            returnEntityToAdd.OperatorId = AuthorityHelper.OperatorId;
            returnEntityToAdd.StoreId = retailEntity.StoreId;

            // 判定整单退货条件:一次退完
            if (returnedCodes.Count == 0
                && codesFromDb.Except(barcodesFromUser).Count() == 0)
            {
                returnEntityToAdd.Status = ReturnType.整单退货;
            }
            else
            {
                returnEntityToAdd.Status = ReturnType.部分退货;
            }
            returnEntityToAdd.CreatedTime = resturnInfo.Returntime;
            returnEntityToAdd.AchieveScore = resturnInfo.ReturnDetail.ReturnGetScore;
            returnEntityToAdd.Balance = resturnInfo.ReturnDetail.ReturnCardValue;
            returnEntityToAdd.SwipCard = resturnInfo.ReturnDetail.ReturnSwipCard;
            returnEntityToAdd.SwipeCardType = resturnInfo.ReturnDetail.SwipeCardType;
            returnEntityToAdd.Cash = resturnInfo.ReturnDetail.ReturnCash;
            returnEntityToAdd.ConsumeScore = resturnInfo.ReturnDetail.ReturnScore;
            returnEntityToAdd.Coupon = resturnInfo.ReturnDetail.Coupon;
            returnEntityToAdd.EraseMoney = resturnInfo.ReturnDetail.EraseMoney;
            returnEntityToAdd.StoreActivityDiscount = resturnInfo.ReturnDetail.StoreActivityDiscount;
            returnEntityToAdd.Reason = resturnInfo.Note;
            if (retailEntity.Consumer != null)
            {
                //计算储值成本
                var res = CheckBalanceCost(retailEntity.Consumer.Id, resturnInfo.ReturnDetail.ReturnCardValue);
                if (!res.Item1)
                {
                    throw new Exception("储值计算错误");
                }
                returnEntityToAdd.RealBalance = res.Item2;
            }
            foreach (var code in barcodesFromUser)
            {
                returnEntityToAdd.ReturnedItems.Add(new ReturnedItem()
                {
                    CreatedTime = DateTime.Now,
                    InventoryId = retailItemInventorys.First(i => i.ProductBarcode == code).InventoryId,
                    IsReturn = true,
                    OperatorId = returnEntityToAdd.OperatorId,
                    ProductBarcode = code,
                    Quantity = 1,
                    RetailId = retailEntity.Id,
                    RetailNumber = retailEntity.RetailNumber,
                    RetailPrice = (decimal)retailItemInventorys.First(i => i.ProductBarcode == code).RetailItem.ProductRetailPrice,
                    ReturnedId = returnEntityToAdd.Id,
                    ReturnedNumber = returnEntityToAdd.ReturnedNumber,
                });
            }

            return returnEntityToAdd;
        }

        private bool IsReturnAllAfterCurrentReturn(List<string> codesFromDb, List<string> barcodesFromUser, List<string> codesReturned)
        {
            return codesFromDb.Except(codesReturned.Union(barcodesFromUser)).Count() == 0;
        }
        private void SavePunishRecord(string retailNumber, decimal deductScore)
        {
            //超时扣积分
            var optId = AuthorityHelper.OperatorId;
            if (!optId.HasValue)
            {
                throw new Exception("请重新登录");
            }
            var operatorAdmin = _administratorContract.Administrators.Where(a => a.Id == optId.Value).Include(a => a.Member).FirstOrDefault();
            if (operatorAdmin == null)
            {
                throw new Exception("请重新登录");
            }
            var memberEntity = operatorAdmin.Member;
            if (memberEntity.Score < deductScore)
            {
                throw new Exception("当前帐号积分不足,无法继续操作");
            }

            //扣掉积分
            memberEntity.Score -= deductScore;
            var memberDto = Mapper.Map<MemberDto>(memberEntity);
            var updateRes = _memberContract.UpdateScore(memberDto);
            if (updateRes.ResultType != OperationResultType.Success)
            {
                throw new Exception("积分扣除失败,无法继续操作");
            }
            //记录扣除信息
            var punishRecord = new PunishScoreRecord()
            {
                OperatorId = AuthorityHelper.OperatorId.Value,
                PunishAdminId = AuthorityHelper.OperatorId.Value,
                PunishScore = (int)deductScore,
                PunishType = PunishTypeEnum.零售单退货超时,
                Remarks = retailNumber
            };
            var hasSave = _adminPunishScoreRecordContract.Insert(punishRecord);
            if (hasSave.ResultType != OperationResultType.Success)
            {
                throw new Exception("积分扣除记录保存失败,无法继续操作");
            }
        }
        private void TimeoutProcess(string number, decimal deductScore)
        {
            // 判断是否申请了超时
            var requestQuery = _timeoutRequestContract.Entities.Where(t => !t.IsDeleted && t.IsEnabled)
                .Where(t => !t.IsUsed && t.State == TimeoutRequestState.已通过)
                .Where(t => t.RequestAdminId == AuthorityHelper.OperatorId.Value && t.Number == number)
                .FirstOrDefault();
            if (requestQuery != null)
            {
                requestQuery.IsUsed = true;
                var hasUpdate = _timeoutRequestContract.Update(requestQuery);
                if (hasUpdate.ResultType != OperationResultType.Success)
                {
                    throw new Exception("超时申请单状态更新失败");
                }
            }
            else
            {
                SavePunishRecord(number, deductScore);
            }
        }
        private decimal CalcTotalMoneyToReturn(List<string> barcodesFromUser, Retail retailEntity, List<RetailInventory> retailItemInventorys)
        {
            // 计算应退总金额
            var levelDiscount = 1.0M;
            if (retailEntity.LevelDiscount.HasValue && retailEntity.LevelDiscountAmount > 0)
            {
                levelDiscount = retailEntity.LevelDiscount.Value;
            }

            var totalMoneyToReturn = Math.Round(retailItemInventorys.Where(i => barcodesFromUser.Contains(i.ProductBarcode)).Sum(i => i.RetailItem.ProductRetailPrice) * levelDiscount, 2);
            if (totalMoneyToReturn <= 0)
            {
                throw new Exception("商品退货金额异常");
            }

            return totalMoneyToReturn;
        }
        #endregion
    }
}
