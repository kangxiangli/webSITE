
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Web.Mvc;
using Whiskey.ZeroStore.ERP.Models.DTO;
using System.Data.Entity;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class StoreService : ServiceBase, IStoreContract
    {
        #region StoreService

        private readonly IRepository<Store, int> _storeRepository;
        private readonly IRepository<Checker, int> _checkerRepo;
        private readonly IRepository<Orderblank, int> _orderblankRepo;
        private readonly IRepository<Administrator, int> _administratorRepo;
        private readonly IRepository<OpenCloseRecord, int> _openCloseRepo;
        private readonly IRepository<Storage, int> _storageRepo;
        private readonly IRepository<Appointment, int> _appointmentRepo;



        public StoreService(
            IRepository<Store, int> storeRepository,
            IRepository<Checker, int> checkerRepo,
            IRepository<Orderblank, int> orderblankRepo,
            IRepository<Administrator, int> administratorRepo,
            IRepository<OpenCloseRecord, int> openCloseRepo,
            IRepository<Storage, int> storageRepo,
            IRepository<Appointment, int> appointmentRepo

        )
            : base(storeRepository.UnitOfWork)
        {
            _storeRepository = storeRepository;
            _checkerRepo = checkerRepo;
            _orderblankRepo = orderblankRepo;
            _administratorRepo = administratorRepo;
            _openCloseRepo = openCloseRepo;
            _storageRepo = storageRepo;
            _appointmentRepo = appointmentRepo;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public Store View(int Id)
        {
            var entity = _storeRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public StoreDto Edit(int Id)
        {
            var entity = _storeRepository.GetByKey(Id);
            Mapper.CreateMap<Store, StoreDto>();
            var dto = Mapper.Map<Store, StoreDto>(entity);
            dto.DepartmentName = entity.DepartmentId == null ? string.Empty : entity.Department.DepartmentName;
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Store> Stores { get { return _storeRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Store, bool>> predicate, int id = 0)
        {
            return _storeRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params StoreDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _storeRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                RedisCacheHelper.ResetCacheAllStore();
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params StoreDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _storeRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                RedisCacheHelper.ResetCacheAllStore();
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storeRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStore();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storeRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStore();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _storeRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storeRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStore();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storeRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStore();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }

        #endregion


        /// <summary>
        /// 是否正在盘点
        /// </summary>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public bool IsInCheckingStat(int storeId)
        {
            if (_checkerRepo.Entities.Any(c => !c.IsDeleted
                                            && c.IsEnabled
                                            && c.StoreId == storeId
                                            && (c.CheckerState == CheckerFlag.Interrupt || c.CheckerState == CheckerFlag.Checking)))
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// 是否正在配货
        /// </summary>
        /// <param name="storeId"></param>
        /// <returns></returns>
        public bool IsInOrderblankingStat(int storeId)
        {
            if (_orderblankRepo.Entities.Any(o => !o.IsDeleted
                                           && o.IsEnabled
                                           && o.OutStoreId == storeId
                                           && o.Status == OrderblankStatus.配货中))
            {
                return true;
            }
            return false;
        }


        public bool IsInClosedStat(int storeId)
        {
            return _storeRepository.Entities.Any(s => !s.IsDeleted && s.IsEnabled && s.Id == storeId && s.IsClosed);
        }

        public List<int> GetStoresClosed()
        {
            return _storeRepository.Entities.Where(s => !s.IsDeleted && s.IsEnabled && s.IsClosed).Select(s => s.Id).ToList();
        }

        public List<int> GetStoresInChecking()
        {
            var stores = _checkerRepo.Entities.Where(c => !c.IsDeleted && c.IsEnabled && (c.CheckerState == CheckerFlag.Interrupt || c.CheckerState == CheckerFlag.Checking))
                                               .Select(c => c.StoreId).ToList();
            return stores;

        }

        public List<int> GetStoresInOrderblanking()
        {
            var stores = _orderblankRepo.Entities.Where(o => !o.IsDeleted
                                           && o.IsEnabled
                                           && o.Status == OrderblankStatus.配货中).Select(o => o.OutStoreId).ToList();

            return stores;
        }


        public List<int> FilterStoreId(int? userId, IAdministratorContract _adminContract, int? storeIdToCheck)
        {
            var enabledStoreIds = QueryManageStoreId(userId.Value);
            if (!storeIdToCheck.HasValue)
            {
                return enabledStoreIds;
            }

            if (!enabledStoreIds.Contains(storeIdToCheck.Value))
            {
                return enabledStoreIds;
            }

            return new List<int> { storeIdToCheck.Value };
        }
        public IQueryable<OpenCloseRecord> OpenCloseRecords
        {
            get
            {
                return _openCloseRepo.Entities;
            }
        }

        public OperationResult CloseStore(int storeId)
        {
            var entity = _storeRepository.Entities.FirstOrDefault(s => !s.IsDeleted && s.IsEnabled && s.Id == storeId);
            if (entity.IsClosed)
            {
                return OperationResult.OK(null);
            }
            // 校验店铺是否有发货的配货单
            if (_orderblankRepo.Entities.Any(o => o.IsEnabled
                                                     && !o.IsDeleted
                                                     && o.OutStoreId == storeId
                                                     && o.Status == OrderblankStatus.配货中))
            {
                return new OperationResult(OperationResultType.Error, "店铺中有未发货的配货单，无法闭店");
            }


            //统计当日数据
            entity.IsClosed = true;
            var res = _storeRepository.Update(entity);
            res = _openCloseRepo.Insert(new OpenCloseRecord() { StoreId = storeId, OpenOrClose = OpenCloseFlag.Close });
            return res > 0 ? OperationResult.OK(null) : OperationResult.Error("闭店失败");
        }
        public OperationResult OpenStore(params int[] storeId)
        {
            if (storeId == null || storeId.Length <= 0)
            {
                throw new Exception("参数错误");
            }
            var entity = _storeRepository.Entities.Where(s => !s.IsDeleted && s.IsEnabled && storeId.Contains(s.Id)).ToList();
            var skipCount = entity.Count(e => !e.IsClosed);
            var query = entity.Where(e => e.IsClosed);
            var records = query.Select(e => new OpenCloseRecord() { StoreId = e.Id, OpenOrClose = OpenCloseFlag.Open }).ToList();
            _openCloseRepo.Insert(records.AsEnumerable());

            query.Each(e => e.IsClosed = false);

            var res = _storeRepository.Update(entity);
            var succCount = query.Count();

            return OperationResult.OK();
        }


        public List<StoreCacheEntry> QueryAllStore()
        {
            var key = RedisCacheHelper.KEY_ALL_STORE;
            if (!RedisCacheHelper.ContainsKey(key))
            {
                var ss = _storeRepository.Entities.Where(s => !s.IsDeleted && s.IsEnabled).Include(s => s.StoreType).ToList();
                var allStore = _storeRepository.Entities.Where(s => !s.IsDeleted && s.IsEnabled).Select(s => new StoreCacheEntry()
                {
                    Id = s.Id,
                    Address = s.Address,
                    Balance = s.Balance,
                    City = s.City,
                    ContactPerson = s.ContactPerson,
                    DepartmentId = s.DepartmentId,
                    DepartmentName = s.Department.DepartmentName,
                    Description = s.Description,
                    IsAttached = s.IsAttached,
                    IsClosed = s.IsClosed,
                    IsMainStore = s.IsMainStore,
                    Latitude = s.Latitude,
                    Longitude = s.Longitude,
                    Notes = s.Notes,
                    Province = s.Province,
                    StoreCredit = s.StoreCredit,
                    StoreDiscount = s.StoreDiscount,
                    StoreName = s.StoreName,
                    StorePhoto = s.StorePhoto,
                    StoreTypeId = s.StoreTypeId,
                    StoreTypeName = s.StoreType.TypeName,
                    StoreTypeCreateTime = s.StoreType.CreatedTime,
                    Telephone = s.Telephone,
                    ZipCode = s.ZipCode,
                    CreateTime = s.CreatedTime
                }).ToList();

                var storeDict = allStore.ToDictionary(s => s.Id.ToString(), s => JsonHelper.ToJson(s));
                RedisCacheHelper.SetRangeInHash(key, storeDict);

            }
            var stores = RedisCacheHelper.GetAllEntriesFromHash(key).Select(s => JsonHelper.FromJson<StoreCacheEntry>(s.Value)).ToList();
            return stores;
        }

        public List<StorageCacheEntry> QueryAllStorage()
        {
            var key = RedisCacheHelper.KEY_ALL_STORAGE;
            if (!RedisCacheHelper.ContainsKey(key))
            {
                var allStorage = _storageRepo.Entities.Where(s => !s.IsDeleted && s.IsEnabled)
                    .ToList()
                    .Select(s => Mapper.DynamicMap<StorageCacheEntry>(s))
                    .ToDictionary(s => s.Id.ToString(), s => JsonHelper.ToJson(s));

                RedisCacheHelper.SetRangeInHash(key, allStorage);
            }
            var storages = RedisCacheHelper.GetAllEntriesFromHash(key).Select(s => JsonHelper.FromJson<StorageCacheEntry>(s.Value)).ToList();
            return storages;
        }

        public List<int> QueryManageStorageId(int adminId)
        {
            var manageStoreIds = QueryManageStoreId(adminId);
            if (manageStoreIds == null || manageStoreIds.Count <= 0)
            {
                return new List<int>();
            }

            var storageIds = QueryAllStorage().Where(s => manageStoreIds.Contains(s.StoreId)).Select(s => s.Id).ToList();
            return storageIds;
        }

        public List<int> QueryManageStoreId(int adminId)
        {
            if (adminId <= 0)
            {
                return new List<int>();
            }
            var key = RedisCacheHelper.KEY_ADMIN_MANAGE_STORE;
            if (!RedisCacheHelper.HashContainsEntry(key, adminId.ToString()))
            {
                var adminQuery = _administratorRepo.Entities.Where(a => !a.IsDeleted && a.IsEnabled && a.Id == adminId);
                var enableStoreId = adminQuery.SelectMany(a => a.JobPosition.Departments)
                                               .SelectMany(s => s.Stores)
                                               .Where(s => !s.IsDeleted && s.IsEnabled)
                                               .Select(s => s.Id);

                var selfDepartmentStoreId = adminQuery.SelectMany(a => a.Department.Stores.Where(s => !s.IsDeleted && s.IsEnabled).Select(s => s.Id));

                var unionedStoreIds = enableStoreId.Union(selfDepartmentStoreId).Distinct().ToList();

                RedisCacheHelper.SetEntryInHashIfNotExists(key, adminId.ToString(), string.Join(",", unionedStoreIds));
            }
            var storeIds = RedisCacheHelper.GetValueFromHash(key, adminId.ToString());
            if (string.IsNullOrEmpty(storeIds))
            {
                return new List<int>();
            }

            var res = storeIds.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(s => int.Parse(s)).ToList();
            return res;

        }

        public List<StoreCacheEntry> QueryManageStore(int adminId)
        {
            var allStores = QueryAllStore();
            var manageStoreIds = QueryManageStoreId(adminId);
            return allStores.Where(s => manageStoreIds.Contains(s.Id)).ToList();
        }

        public List<StorageCacheEntry> QueryManageStorage(int adminId)
        {
            var allStorage = QueryAllStorage();
            var manageStorageIds = QueryManageStorageId(adminId);
            return allStorage.Where(s => manageStorageIds.Contains(s.Id)).ToList();
        }


        /// <summary>
        /// 获取权限下的部门id
        /// </summary>
        /// <param name="adminId"></param>
        /// <param name="includeSelfDepartment">是否包含自己的部门</param>
        /// <returns></returns>
        public List<int> QueryManageDepartmentId(int adminId, bool includeSelfDepartment = true)
        {
            if (adminId <= 0)
            {
                return new List<int>();
            }

            var key = RedisCacheHelper.KEY_ADMIN_MANAGE_DEPARTMENT;
            if (!RedisCacheHelper.HashContainsEntry(key, adminId.ToString()))
            {
                List<int> ids;
                var adminQuery = _administratorRepo.Entities.Where(a => !a.IsDeleted && a.IsEnabled && a.Id == adminId);
                var enableDepartmentId = adminQuery.SelectMany(a => a.JobPosition.Departments.Where(d => !d.IsDeleted && d.IsEnabled))
                                              .Select(s => s.Id);

                if (includeSelfDepartment)
                {
                    var selfDepartmentQuery = adminQuery.Select(a => a.DepartmentId.Value);
                    ids = enableDepartmentId.Union(selfDepartmentQuery).Distinct().ToList();
                }
                else
                {
                    ids = enableDepartmentId.Distinct().ToList();
                }

                RedisCacheHelper.SetEntryInHashIfNotExists(key, adminId.ToString(), string.Join(",", ids));
            }
            var departmentIds = RedisCacheHelper.GetValueFromHash(key, adminId.ToString());
            if (string.IsNullOrEmpty(departmentIds))
            {
                return new List<int>();
            }
            var res = departmentIds.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(s => int.Parse(s)).ToList();
            return res;
        }



        public void CheckStoreId(int storeId, int adminId)
        {
            var storeIds = QueryManageStoreId(adminId);
            if (!storeIds.Any())
            {
                throw new Exception("店铺权限不足");
            }
            if (!storeIds.Contains(storeId))
            {
                throw new Exception("没有该店铺权限");
            }

        }


    }





}
