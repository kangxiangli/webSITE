
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Warehouse;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Stores;
using Whiskey.ZeroStore.ERP.Models.Enums;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class PurchaseService : ServiceBase, IPurchaseContract
    {
        #region PurchaseService

		private readonly IRepository<Purchase, int> _purchaseRepository;

        private readonly IRepository<Orderblank, int> _orderblankRepository;

        private readonly IRepository<Store, int> _storeRepository;
        private readonly IRepository<Storage, int> _storageRepository;


        public PurchaseService(
			IRepository<Purchase, int> purchaseRepository,
            IRepository<Orderblank, int> orderblankRepository
            , IRepository<Store, int> _storeRepository
            , IRepository<Storage, int> _storageRepository
        ) : base(purchaseRepository.UnitOfWork)
		{
			_purchaseRepository = purchaseRepository;
            _orderblankRepository = orderblankRepository;
            this._storeRepository = _storeRepository;
            this._storageRepository = _storageRepository;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Purchase View(int Id){
			var entity=_purchaseRepository.GetByKey(Id);
            return entity;
		}


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public PurchaseDto Edit(int Id){
			var entity=_purchaseRepository.GetByKey(Id);
            Mapper.CreateMap<Purchase, PurchaseDto>();
            var dto = Mapper.Map<Purchase, PurchaseDto>(entity);
            return dto;
		}


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Purchase> Purchases { get { return _purchaseRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Purchase, bool>> predicate, int id = 0)
        {
            return _purchaseRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params PurchaseDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
				OperationResult result = _purchaseRepository.Insert(dtos,
				dto =>
				{
					
				},
				(dto, entity) =>
				{
					entity.CreatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }
        //yxk 2015-11-
        public OperationResult Insert(params Purchase[] prus)
        {
            OperationResult resul=new OperationResult(OperationResultType.Error);
            prus.CheckNotNull("prus");
            prus.Each(c => { c.OperatorId = AuthorityHelper.OperatorId; c.CreatedTime = DateTime.Now; c.UpdatedTime = DateTime.Now; c.PurchaseItems.Each(x => { x.OperatorId = AuthorityHelper.OperatorId; x.CreatedTime = DateTime.Now; }); });
           
            int res = _purchaseRepository.Insert((IEnumerable<Purchase>)prus);
            if (res > 0)
                resul = new OperationResult(OperationResultType.Success, "成功插入:" + res + "条数据");
            return resul;
        }

		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params PurchaseDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
				OperationResult result = _purchaseRepository.Update(dtos,
					dto =>
					{

					},
					(dto, entity) => {
						entity.UpdatedTime = DateTime.Now;
						entity.OperatorId=AuthorityHelper.OperatorId;
						return entity;
					});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }
        public OperationResult Update(params Purchase[] purchaseAr)
        {
            return  _purchaseRepository.Update(purchaseAr);
        }


        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _purchaseRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_purchaseRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _purchaseRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_purchaseRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				OperationResult result = _purchaseRepository.Delete(ids);
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _purchaseRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_purchaseRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}


		/// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _purchaseRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_purchaseRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }


        #region 配货完成        
        public OperationResult CreateOrderBlank(string PurchaseNumber)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error);

            try
            {
                if (string.IsNullOrEmpty(PurchaseNumber))
                {
                    oper.Message = "配货单不存在";
                }
                else
                {
                    Purchase purchase = this.Purchases.FirstOrDefault(x => x.PurchaseNumber == PurchaseNumber);
                    if (purchase==null)
                    {
                        oper.Message = "配货单不存在";
                    }
                    else
                    {
                        if (purchase.PurchaseItems.Where(w => w.IsEnabled && !w.IsDeleted).Any(a => a.PurchaseItemProducts.Any(w => w.IsEnabled && !w.IsDeleted)))
                        {
                            UnitOfWork.TransactionEnabled = true;

                            purchase.PurchaseStatus = purchase.OriginFlag != StoreCardOriginFlag.工厂 ? (int)PurchaseStatusFlag.待付款 : (int)PurchaseStatusFlag.待发货;
                            purchase.UpdatedTime = DateTime.Now;
                            purchase.OperatorId = AuthorityHelper.OperatorId;
                            _purchaseRepository.Update(purchase);
                            int resCount = UnitOfWork.SaveChanges();
                            if (resCount == 0)
                            {
                                oper.Message = "生成配货单失败";
                            }
                            else
                            {
                                oper.ResultType = OperationResultType.Success;
                                oper.Message = "生成成功";
                            }
                        }
                        else
                        {
                            oper.Message = "无已配商品,无法完成配货操作";
                        }
                    }
                }
            }
            catch (Exception)
            {
                oper.Message = "服务器忙，请稍后重试";                
            }
            return oper;
        }

        /// <summary>
        /// 生成10位长度的配货编号
        /// </summary>
        /// <returns></returns>
        private string CreateOrderBlankNumber()
        {
            string strNum = string.Empty;
            List<String> listNums = _orderblankRepository.Entities.Select(x => x.OrderBlankNumber).ToList();
            while (true)
            {
                strNum = RandomHelper.GetRandomCode(10);
                if (!listNums.Contains(strNum))
                {
                    break;
                }
            }
            return strNum;
        }


        #endregion



        #endregion
        /// <summary>
        /// 采购单支付
        /// </summary>
        /// <param name="purchaserId"></param>
        /// <param name="ReceiverStorageId"></param>
        /// <param name="ReceiverStoreId"></param>
        /// <param name="payType">0吊牌价 1采购价 2进货价</param>
        /// <returns></returns>
        public OperationResult Payment(int purchaserId, int ReceiverStorageId, int ReceiverStoreId, PaymentPurchaseType payType, float Discount)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error);
            try
            {
                UnitOfWork.TransactionEnabled = true;

                #region 参数检验

                var modPur = this.Purchases.FirstOrDefault(f => f.Id == purchaserId && f.IsEnabled && !f.IsDeleted);
                if (modPur.IsNull())
                {
                    oper.Message = "采购单无效";
                    return oper;
                }

                switch (modPur.PurchaseStatus)
                {
                    case (int)PurchaseStatusFlag.Purchasing: oper.Message = "采购单还未进行配货"; return oper;
                    case (int)PurchaseStatusFlag.Purchased: oper.Message = "采购单已配货完成"; return oper;
                    case (int)PurchaseStatusFlag.RefusePurchase: oper.Message = "采购单被拒绝配货"; return oper;
                    case (int)PurchaseStatusFlag.待发货: oper.Message = "采购单已进入待发货状态"; return oper;
                }

                var modStore = _storeRepository.Entities.FirstOrDefault(f => f.Id == ReceiverStoreId && f.IsEnabled && !f.IsDeleted);
                if (modStore.IsNull())
                {
                    oper.Message = "下单失败,店铺不存在";
                    return oper;
                }

                var modStorage = modStore.Storages.FirstOrDefault(f => f.IsEnabled && !f.IsDeleted && f.Id == ReceiverStorageId);
                if (modStorage.IsNull())
                {
                    oper.Message = $"下单失败,{modStore.StoreName}下不存在此仓库";
                    return oper;
                }

                #endregion

                #region 检验店铺是否需要支付金额

                var listprices = modPur.PurchaseItems.Where(w => w.PurchaseItemProducts.Any()).Select(s => new
                {
                    TagPrices = s.Product.ProductOriginNumber.TagPrice * s.PurchaseItemProducts.Count,
                    PurchasePrices = s.Product.ProductOriginNumber.PurchasePrice * s.PurchaseItemProducts.Count,
                    WholesalePrices = s.Product.ProductOriginNumber.WholesalePrice * s.PurchaseItemProducts.Count,
                }).ToList();

                var TagPrices = listprices.Sum(s => s.TagPrices);
                var PurchasePrices = listprices.Sum(s => s.PurchasePrices);
                var WholesalePrices = listprices.Sum(s => s.WholesalePrices);

                if (modStore.StoreType.IsPay)//店铺需要支付
                {
                    #region 计算支付价格

                    if (Discount < 0 || Discount > 1)
                    {
                        oper.Message = "折扣比率无效,只能0-1之间";
                        return oper;
                    }

                    modPur.Discount = Discount;

                    switch (payType)
                    {
                        case PaymentPurchaseType.吊牌价:
                            {
                                var despoitprice = Math.Abs(TagPrices) * Discount;
                                var money = modStore.Balance - despoitprice;
                                if (money < 0)
                                {
                                    oper.Message = "店铺余额不足，请充值";
                                    return oper;
                                }
                                modStore.Balance = money;
                                modPur.DespoitPrice = despoitprice;
                                modPur.OrgPrice = TagPrices;
                                modPur.PaymentType = PaymentPurchaseType.吊牌价;
                            }
                            break;
                        case PaymentPurchaseType.采购价:
                            {
                                var despoitprice = Math.Abs(PurchasePrices) * Discount;
                                var money = modStore.Balance - despoitprice;
                                if (money < 0)
                                {
                                    oper.Message = "店铺余额不足，请充值";
                                    return oper;
                                }
                                modStore.Balance = money;
                                modPur.DespoitPrice = despoitprice;
                                modPur.OrgPrice = PurchasePrices;
                                modPur.PaymentType = PaymentPurchaseType.采购价;
                            }
                            break;
                        case PaymentPurchaseType.进货价:
                            {
                                var despoitprice = Math.Abs(WholesalePrices) * Discount;
                                var money = modStore.Balance - despoitprice;
                                if (money < 0)
                                {
                                    oper.Message = "店铺余额不足，请充值";
                                    return oper;
                                }
                                modStore.Balance = money;
                                modPur.DespoitPrice = despoitprice;
                                modPur.OrgPrice = WholesalePrices;
                                modPur.PaymentType = PaymentPurchaseType.进货价;
                            }
                            break;
                        default:
                            oper.Message = "支付方案未知";
                            return oper;
                    }
                    modStore.UpdatedTime = DateTime.Now;
                    modStore.OperatorId = AuthorityHelper.OperatorId;
                    _storeRepository.Update(modStore);

                    #endregion
                }
                else
                {
                    modPur.PaymentType = payType;
                    modPur.DespoitPrice = 0;
                    switch (payType)
                    {
                        case PaymentPurchaseType.吊牌价: modPur.OrgPrice = TagPrices;
                            break;
                        case PaymentPurchaseType.采购价:modPur.OrgPrice = PurchasePrices;
                            break;
                        case PaymentPurchaseType.进货价:modPur.OrgPrice = WholesalePrices;
                            break;
                    }
                }

                #endregion

                modPur.PurchaseStatus = (int)PurchaseStatusFlag.待发货;
                _purchaseRepository.Update(modPur);

                if (UnitOfWork.SaveChanges() > 0)
                {
                    oper.ResultType = OperationResultType.Success;
                    oper.Message = "支付成功";
                }
                else
                {
                    oper.Message = "支付失败";
                }
            }
            catch (Exception ex)
            {
                oper.Message = "服务器忙，请稍后重试";
            }
            return oper;
        }


    }
}
