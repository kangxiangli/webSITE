
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Models.Entities.Warehouses;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Models.Enums;
using System.Data.Entity;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class InventoryService : ServiceBase, IInventoryContract
    {
        #region InventoryService

        private readonly IRepository<Inventory, int> _inventoryRepository;
        private readonly IStoreContract _storeContract;
        private readonly IMemberContract _memberContract;

        public InventoryService(
            IRepository<Inventory, int> inventoryRepository,
            IStoreContract storeContract,
            IMemberContract memberContract
        )
            : base(inventoryRepository.UnitOfWork)
        {
            _inventoryRepository = inventoryRepository;
            _storeContract = storeContract;
            _memberContract = memberContract;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public Inventory View(int Id)
        {
            var entity = _inventoryRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public InventoryDto Edit(int Id)
        {
            var entity = _inventoryRepository.GetByKey(Id);
            Mapper.CreateMap<Inventory, InventoryDto>();
            var dto = Mapper.Map<Inventory, InventoryDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Inventory> Inventorys { get { return _inventoryRepository.Entities; } }




        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params InventoryDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _inventoryRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = entity.ProductNumber,
                        OnlyFlag = entity.OnlyFlag,
                         LogFlag = entity.ProductLogFlag,
                        ProductBarcode = entity.ProductNumber + entity.OnlyFlag,
                        Description = "商品入库",
                        OperatorId = AuthorityHelper.OperatorId,
                        CreatedTime=DateTime.Now
                    }
                };
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }
        public OperationResult Insert(params Inventory[] inventories)
        {
            inventories.Each(c =>
            {
                c.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = c.ProductNumber,
                        OnlyFlag = c.OnlyFlag,
                        ProductBarcode = c.ProductNumber + c.OnlyFlag,
                        LogFlag = c.ProductLogFlag,
                        Description = "商品入库",
                        OperatorId = AuthorityHelper.OperatorId,
                        CreatedTime=DateTime.Now
                    }
                };
                c.OperatorId = AuthorityHelper.OperatorId;
                c.CreatedTime = DateTime.Now;
            });
            return _inventoryRepository.Insert((IEnumerable<Inventory>)inventories) > 0 ? new OperationResult(OperationResultType.Success) : new OperationResult(OperationResultType.Error);
        }


        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(InventoryDto[] dtos, bool isTrans = false)
        {
            _inventoryRepository.UnitOfWork.TransactionEnabled = isTrans;
            try
            {
                dtos.CheckNotNull("dtos");

                OperationResult result = _inventoryRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        entity.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = entity.ProductNumber,
                        OnlyFlag = entity.OnlyFlag,
                         LogFlag = entity.ProductLogFlag,
                        ProductBarcode = entity.ProductNumber + entity.OnlyFlag,
                        Description = "商品修改",
                        CreatedTime=DateTime.Now,
                        OperatorId = AuthorityHelper.OperatorId
                    }
                };
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _inventoryRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = entity.ProductNumber,
                        OnlyFlag = entity.OnlyFlag,
                         LogFlag = entity.ProductLogFlag,
                        ProductBarcode = entity.ProductNumber + entity.OnlyFlag,
                        Description = "逻辑删除",
                        OperatorId = AuthorityHelper.OperatorId
                    }
                };
                    _inventoryRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _inventoryRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = entity.ProductNumber,
                        OnlyFlag = entity.OnlyFlag,
                         LogFlag = entity.ProductLogFlag,
                        ProductBarcode = entity.ProductNumber + entity.OnlyFlag,
                        Description = "将商品从逻辑删除恢复",
                        OperatorId = AuthorityHelper.OperatorId,
                        CreatedTime=DateTime.Now
                    }
                };
                    _inventoryRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");

                _inventoryRepository.Entities.Where(c => ids.Contains(c.Id)).Each(c => c.ProductOperationLogs.Add(new ProductOperationLog()
                {
                    ProductNumber = c.ProductNumber,
                    OnlyFlag = c.OnlyFlag,
                    LogFlag = c.ProductLogFlag,
                    ProductBarcode = c.ProductNumber + c.OnlyFlag,
                    Description = "物理删除商品",
                    OperatorId = AuthorityHelper.OperatorId,
                    CreatedTime = DateTime.Now

                }));
                OperationResult result = _inventoryRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _inventoryRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = entity.ProductNumber,
                        OnlyFlag = entity.OnlyFlag,
                         LogFlag = entity.ProductLogFlag,
                        ProductBarcode = entity.ProductNumber + entity.OnlyFlag,
                        Description = "从禁用状态恢复",
                        OperatorId = AuthorityHelper.OperatorId
                    }
                };

                    _inventoryRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _inventoryRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    entity.ProductOperationLogs = new List<ProductOperationLog>()
                {
                    new ProductOperationLog()
                    {
                        ProductNumber = entity.ProductNumber,
                        OnlyFlag = entity.OnlyFlag,
                         LogFlag = entity.ProductLogFlag,
                        ProductBarcode = entity.ProductNumber + entity.OnlyFlag,
                        Description = "禁用数据",
                        OperatorId = AuthorityHelper.OperatorId
                    }
                };
                    _inventoryRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }




        #endregion



        public OperationResult UpdatePriceByDiscount(ProductDiscount discount, float? tagPrice, string[] productNumber, bool isTrans)
        {
            OperationResult resul = new OperationResult(OperationResultType.Error);
            float retailDiscount, purchaseDiscount, wholesaleDiscount;

            var invents = _inventoryRepository.Entities.Where(
                 c => productNumber.Contains(c.ProductNumber) && !c.IsDeleted && c.IsEnabled && !c.IsLock);

            if (discount == null && tagPrice == null)
            {
                resul.Message = "数据未发生改变";
            }
            if (discount == null && tagPrice != null)
            {
                //折扣方案为null，则根据原有的价格动态的计算折扣
                invents.Each(c =>
                {
                    //c.TagPrice = (float)tagPrice;
                    c.UpdatedTime = DateTime.Now;
                    c.OperatorId = AuthorityHelper.OperatorId;
                });
            }
            if (discount != null && tagPrice == null)
            {
                //折扣方案不为null，传入的吊牌价为null
                invents.Each(c =>
                {
                    //c.PurchasePrice = c.TagPrice * discount.PurchaseDiscount / 10;
                    //c.WholesalePrice = c.TagPrice * discount.WholesaleDiscount / 10;
                    c.UpdatedTime = DateTime.Now;
                    c.OperatorId = AuthorityHelper.OperatorId;
                });
            }
            if (discount != null && tagPrice != null)
            {
                //折扣方案不为null,传入的吊牌价不为null
                invents.Each(c =>
                {
                    //c.TagPrice = (float)tagPrice;
                    //c.PurchasePrice = (float)tagPrice * discount.PurchaseDiscount / 10;
                    //c.WholesalePrice = (float)tagPrice * discount.WholesaleDiscount / 10;
                    c.UpdatedTime = DateTime.Now;
                    c.OperatorId = AuthorityHelper.OperatorId;
                });
            }

            _inventoryRepository.UnitOfWork.TransactionEnabled = isTrans;
            resul = _inventoryRepository.Update(invents.ToArray());
            return resul;
        }


        public OperationResult Update(Inventory ent)
        {
            int resultCount = _inventoryRepository.Update(ent);
            OperationResult oper = new OperationResult(OperationResultType.Success);
            if (resultCount == 0)
            {
                oper.ResultType = OperationResultType.Error;
                oper.Message = "添加失败";
            }
            return oper;
        }

        public OperationResult Update(params Inventory[] ent)
        {
            OperationResult oper = _inventoryRepository.Update(ent as ICollection<Inventory>);

            return oper;
        }



        /// <summary>
        /// 零售锁定库存
        /// </summary>
        /// <param name="barcodearr"></param>
        public void SetInventoryLocked(TimeSpan period, params LockInventoryDto[] dtos)
        {
            //获取店铺下锁定的库存

            var expireTime = DateTime.Now.Add(period);
            foreach (var dto in dtos)
            {
                var key = dto.ProductBarcode;

                CacheHelper.SetCache(key, dto, expireTime, TimeSpan.Zero);
            }
        }


        /// <summary>
        /// 判断库存是否不可用
        /// </summary>
        /// <param name="barcodearr"></param>
        public bool IsInventoryDisable(string barcode, int currentOperatorId)
        {
            var cacheData = CacheHelper.GetCache(barcode) as LockInventoryDto;

            // 没有被任何人占用,对所有人都可用
            if (cacheData == null)
            {
                return false;
            }

            // 被当前用户占用,对当期用户可用
            if (cacheData.OperatorId == currentOperatorId)
            {
                return false;
            }

            // 被其他人占用,对当前用户不可用
            return true;
        }


        /// <summary>
        /// 库存零售解锁
        /// </summary>
        /// <param name="barcodes"></param>

        public void SetInventoryUnLocked(params string[] barcodes)
        {
            CacheHelper.RemoveCache(barcodes);
        }


        /// <summary>
        /// 不同场景下对流水号校验
        /// </summary>
        /// <param name="context">场景</param>
        /// <param name="storeId">店铺Id</param>
        /// <param name="adminId">操作人</param>
        /// <param name="barcodes">流水号</param>
        /// <returns>dict,key每个barcode,对应一个tuple</returns>
        public Dictionary<string, Tuple<bool, string, string>> CheckBarcodes(InventoryCheckContext context, int storeId, int? storageId, int adminId, params string[] barcodes)
        {
            var dict = new Dictionary<string, Tuple<bool, string, string>>();

            _storeContract.CheckStoreId(storeId, adminId);

            var query = _inventoryRepository.Entities.Where(e => e.StoreId == storeId && barcodes.Contains(e.ProductBarcode));
            if (storageId.HasValue)
            {

                query = query.Where(i => i.StorageId == storageId);

            }
            var inventoryEntities = query.Select(i => new
            {
                i.Id,
                i.ProductNumber,
                i.ProductBarcode,
                i.Status,
                i.IsLock,
                i.IsDeleted,
                i.IsEnabled,
            }).ToList();
            foreach (var barcode in barcodes)
            {

                var inventoryEntity = inventoryEntities.FirstOrDefault(i => i.ProductBarcode == barcode);
                // 通用规则校验
                if (inventoryEntity == null)
                {
                    dict[barcode] = Tuple.Create(false, $"在库存中未查找到该商品条码：{barcode}, 可能是当前用户对该库存不具有操作权限", string.Empty);
                    continue;
                }
                if (inventoryEntity.IsDeleted)
                {
                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：" + barcode + ",但该库存已经被移至回收站", string.Empty);
                    continue;
                }
                if (!inventoryEntity.IsEnabled)
                {
                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：" + barcode + ",但该库存处于禁用状态", string.Empty);
                    continue;
                }

                if (inventoryEntity.IsLock)
                {
                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：" + barcode + ",但该库存处于锁定状态", string.Empty);
                    continue;
                }
               

                // 不同场景特殊校验
                switch (context)
                {
                    case InventoryCheckContext.入库:
                        break;
                    case InventoryCheckContext.配货:
                        {
                            {
                                // 非锁定校验
                                if (inventoryEntity.IsLock)
                                {
                                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存处于锁定状态", string.Empty);
                                    continue;
                                }

                                // 库存状态校验
                                if (inventoryEntity.Status != InventoryStatus.Default)
                                {
                                    if (inventoryEntity.Status >= InventoryStatus.PurchasStart && inventoryEntity.Status <= InventoryStatus.PurchasEnd)
                                    {
                                        // 非采购中校验
                                        dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已经进入采购状态", string.Empty);
                                        continue;
                                    }

                                    else if (inventoryEntity.Status >= InventoryStatus.DeliveryStart && inventoryEntity.Status <= InventoryStatus.DeliveryEnd)
                                    {
                                        // 非配货中校验
                                        dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已经进入配货状态", string.Empty);
                                        continue;
                                    }

                                    else if (inventoryEntity.Status >= InventoryStatus.SaleStart && inventoryEntity.Status <= InventoryStatus.SaleEnd)
                                    {
                                        // 非已销售校验
                                        dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已经进入销售状态", string.Empty);
                                        continue;
                                    }
                                    else
                                    {
                                        dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存状态异常:{inventoryEntity.Status}", string.Empty);
                                        continue;
                                    }

                                }
                            }
                        }
                        break;
                    case InventoryCheckContext.零售:
                        {
                            // 非锁定校验
                            if (inventoryEntity.IsLock)
                            {
                                dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存处于锁定状态", string.Empty);
                                continue;
                            }

                            // 零售锁定校验
                            if (IsInventoryDisable(barcode, adminId))
                            {
                                dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已被其他帐号占用", string.Empty);
                                continue;
                            }

                            // 库存状态校验
                            if (inventoryEntity.Status != InventoryStatus.Default)
                            {
                                if (inventoryEntity.Status >= InventoryStatus.PurchasStart && inventoryEntity.Status <= InventoryStatus.PurchasEnd)
                                {
                                    // 非采购中校验
                                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已经进入采购状态", string.Empty);
                                    continue;
                                }

                                else if (inventoryEntity.Status >= InventoryStatus.DeliveryStart && inventoryEntity.Status <= InventoryStatus.DeliveryEnd)
                                {
                                    // 非配货中校验
                                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已经进入配货状态", string.Empty);
                                    continue;
                                }

                                else if (inventoryEntity.Status >= InventoryStatus.SaleStart && inventoryEntity.Status <= InventoryStatus.SaleEnd)
                                {
                                    // 非已销售校验
                                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存已经进入销售状态", string.Empty);
                                    continue;
                                }
                                else
                                {
                                    dict[barcode] = Tuple.Create(false, $"在库存中存在该商品条码：{barcode},但该库存状态异常:{inventoryEntity.Status}", string.Empty);
                                    continue;
                                }

                            }
                        }
                        break;
                    case InventoryCheckContext.退货:
                        break;
                    default:
                        break;
                }
                // 默认值
                dict[barcode] = Tuple.Create(true, string.Empty, inventoryEntity.ProductNumber);
            }

            return dict;
        }

        public DbContextTransaction GetTransaction()
        {
            return _inventoryRepository.GetTransaction();
        }
        /// <summary>
        /// 批量插入，有导航属性禁止使用
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public OperationResult BulkInsert(IEnumerable<Inventory> entities)
        {
            try
            {
                entities.CheckNotNull("entities");
                OperationResult result = _inventoryRepository.InsertBulk(entities, entity =>
                {
                    //entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }
        /// <summary>
        /// 批量更新，有导航属性禁止使用
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public OperationResult BulkUpdate(IEnumerable<Inventory> entities)
        {
            try
            {
                entities.CheckNotNull("entities");
                OperationResult result = _inventoryRepository.UpdateBulk(entities, entity =>
                {
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }
    }
}
