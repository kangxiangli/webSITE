
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers.Enum.Warehouse;
using Whiskey.ZeroStore.ERP.Models.Enums;
using Whiskey.Utility.Logging;
using System.Data.Entity;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class CheckerService : ServiceBase, ICheckerContract
    {
        #region CheckerService

        protected static readonly ILogger _Logger = LogManager.GetLogger(typeof(CheckerService));

        #region 初始化操作对象

        private readonly IRepository<Checker, int> _checkerRepository;

        private readonly IRepository<Inventory, int> _inventoryRepository;

        private readonly IRepository<CheckerItem, int> _checkerItemRepository;

        private readonly IRepository<ProductTrack, int> _productTrackRepository;


        public CheckerService(
            IRepository<Checker, int> checkerRepository,
            IRepository<Inventory, int> inventoryRepository,
            IRepository<CheckerItem, int> checkerItemRepository,
            IRepository<ProductTrack, int> _productTrackRepository
        ) : base(checkerRepository.UnitOfWork)
        {
            _checkerRepository = checkerRepository;
            _inventoryRepository = inventoryRepository;
            _checkerItemRepository = checkerItemRepository;
            this._productTrackRepository = _productTrackRepository;
        }
        #endregion

        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Checker View(int Id)
        {
            var entity = _checkerRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public CheckerDto Edit(int Id)
        {
            var entity = _checkerRepository.GetByKey(Id);
            Mapper.CreateMap<Checker, CheckerDto>();
            var dto = Mapper.Map<Checker, CheckerDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Checker> Checkers { get { return _checkerRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Checker, bool>> predicate, int id = 0)
        {
            return _checkerRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params CheckerDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _checkerRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = dto.OperatorId ?? AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }
        //yxk 2015-10-
        public OperationResult Insert(Checker[] ches)
        {
            OperationResult resu = new OperationResult(OperationResultType.Error);
            try
            {
                ches.CheckNotNull("ches");
                ches.Each(c =>
                {
                    c.CreatedTime = DateTime.Now;
                    c.OperatorId = c.OperatorId ?? AuthorityHelper.OperatorId;
                    //c.CheckerItems.Each(x => {
                    //    x.CreatedTime = DateTime.Now;
                    //    x.OperatorId = AuthorityHelper.OperatorId;
                    //});
                });
                int resCou = _checkerRepository.Insert((IEnumerable<Checker>)ches);
                if (resCou > 0)
                    resu = new OperationResult(OperationResultType.Success, "成功添加" + resCou + "条数据");
            }
            catch (Exception ex)
            {
                resu = new OperationResult(OperationResultType.Error, "添加失败，错误：" + ex.Message);

            }
            return resu;
        }


        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params CheckerDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _checkerRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = dto.OperatorId ?? AuthorityHelper.OperatorId;
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _checkerRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _checkerRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        public OperationResult Remove(params string[] CheckGuids)
        {
            try
            {
                CheckGuids.CheckNotNull("CheckGuids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _checkerRepository.Entities.Where(m => CheckGuids.Contains(m.CheckGuid));
                foreach (var entity in entities)
                {
                    //entity.IsDeleted = true;
                    entity.CheckerState = CheckerFlag.Checked;
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _checkerRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _checkerRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _checkerRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _checkerRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _checkerRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _checkerRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _checkerRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _checkerRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }




        #endregion

        #region 确认继续盘点

        /// <summary>
        /// 确认继续盘点
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public OperationResult Confirm(int Id)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error);
            try
            {
                Checker checker = _checkerRepository.Entities.FirstOrDefault(x => x.Id == Id);
                if (checker == null)
                {
                    oper.Message = "数据不存在";
                }
                else
                {

                    if (checker.CheckerState == CheckerFlag.Interrupt || checker.CheckerState == CheckerFlag.Checking)
                    {
                        checker.CheckerState = CheckerFlag.Checking;
                        int index = _checkerRepository.Update(checker);
                        if (index == 0)
                        {
                            oper.Message = "继续盘点失败";
                        }
                        else
                        {
                            oper.Data = checker;
                            oper.ResultType = OperationResultType.Success;
                        }
                    }
                    else
                    {
                        oper.Message = "无法继续盘点";
                    }
                }

            }
            catch (Exception)
            {
                oper.Message = "服务器忙，请稍后重试";
            }
            return oper;
        }
        #endregion

        #region 结束盘点
        public OperationResult CheckerOk(int Id, int? adminId)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error);
            try
            {
                CheckerDto dto = this.Edit(Id);
                if (dto == null)
                {
                    oper.Message = "盘点数据不存在";
                }
                else
                {
                    using (var tran = _checkerRepository.GetTransaction())
                    {
                        IQueryable<Inventory> queryInventory = this.FilterProduct(dto);
                        IQueryable<CheckerItem> listCheckerItem = _checkerItemRepository.Entities.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.CheckerId == dto.Id);
                        var listInventory = (from s in queryInventory
                                             where !listCheckerItem.Select(ss => ss.ProductBarcode).Contains(s.ProductBarcode)
                                             select new
                                             {
                                                 s.ProductId,
                                                 s.ProductNumber,
                                                 s.ProductBarcode,
                                                 s.Storage.StorageName,
                                             }).ToList();

                        List<CheckerItem> listDto = new List<CheckerItem>();
                        foreach (var inventory in listInventory)
                        {
                            CheckerItem itemDto = new CheckerItem();
                            itemDto.CheckerId = dto.Id;
                            itemDto.CheckerItemType = (int)CheckerItemFlag.Lack;
                            itemDto.CheckGuid = dto.CheckGuid;
                            itemDto.ProductId = inventory.ProductId;
                            itemDto.ProductBarcode = inventory.ProductBarcode;
                            listDto.Add(itemDto);
                        }
                        if (listDto.Count > 0)
                        {
                            oper = _checkerItemRepository.InsertBulk(listDto);
                            if (oper.ResultType != OperationResultType.Success)
                            {
                                tran.Rollback(); return OperationHelper.ReturnOperationResultDIY(OperationResultType.Error, $"继续盘点失败,盘点项CheckerItem插入失败,{oper.Message}");
                            }
                        }
                        dto.CheckerState = CheckerFlag.Checked;
                        dto.AfterCheckQuantity = listInventory.Count();
                        oper = this.Update(dto);
                        if (oper.ResultType != OperationResultType.Success)
                        {
                            tran.Rollback(); return OperationHelper.ReturnOperationResultDIY(OperationResultType.Error, $"继续盘点更新失败,{oper.Message}");
                        }
                        if (listInventory.Count > 0)
                        {
                            var listpt = new List<ProductTrack>();
                            foreach (var item in listInventory)
                            {
                                string numBarcode = item.ProductBarcode;
                                if (!string.IsNullOrEmpty(numBarcode))
                                {
                                    #region 商品追踪
                                    ProductTrack pt = new ProductTrack();
                                    pt.ProductNumber = item.ProductNumber;
                                    pt.ProductBarcode = numBarcode;
                                    pt.OperatorId = adminId ?? AuthorityHelper.OperatorId;
                                    pt.CreatedTime = DateTime.Now;
                                    pt.Describe = string.Format(ProductOptDescTemplate.ON_PRODUCT_CHECKER_END, item.StorageName);
                                    listpt.Add(pt);
                                    #endregion
                                }
                            }
                            oper = _productTrackRepository.InsertBulk(listpt);
                            if (oper.ResultType != OperationResultType.Success)
                            {
                                tran.Rollback(); return OperationHelper.ReturnOperationResultDIY(OperationResultType.Error, $"继续盘点失败,商品追踪插入失败");
                            }
                        }

                        tran.Commit();
                        return OperationHelper.ReturnOperationResult(true, "继续盘点");
                    }
                }
            }
            catch (Exception ex)
            {
                _Logger.Error("继续盘点异常：{0}", ex.Message);
                oper.Message = "服务器忙，请稍后重试";
            }
            return oper;
        }
        #endregion

        #region 判断是否为最新盘点
        /// <summary>
        /// 判断是否为最新盘点
        /// </summary>
        /// <param name="CheckerUid"></param>
        /// <returns></returns>
        public OperationResult IsIndex(string CheckerUid)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error, "服务器忙，请稍候访问");
            Checker entity = this.Checkers.Where(c => c.CheckGuid == CheckerUid).FirstOrDefault();
            if (entity != null)
            {
                Checker checker = this.Checkers.Where(x => x.IsEnabled == true && x.IsEnabled == false)
                     .OrderBy(x => x.CreatedTime)
                     .FirstOrDefault(x => x.StorageId == entity.StorageId && x.StoreId == entity.StoreId);
                if (checker != null && entity.CheckGuid != checker.CheckGuid)
                {
                    oper.Message = "校验过的数据无法更改";
                }
                else
                {
                    oper.ResultType = OperationResultType.Success;
                }
            }
            return oper;
        }
        #endregion

        #region 委托-根据盘点条件对商品进行筛选
        private IQueryable<Inventory> FilterProduct(CheckerDto dto)
        {

            IQueryable<Inventory> query = _inventoryRepository.Entities.Where(x => x.StorageId == dto.StorageId && x.StoreId == dto.StoreId && x.Status == (int)InventoryStatus.Default);
            Func<Inventory, bool> predicate = (invent) => invent.IsEnabled == true && invent.IsDeleted == false;
            if (dto.BrandId != null && dto.BrandId > 0)
            {
                query = query.Where(w => w.Product.ProductOriginNumber.BrandId == dto.BrandId);
            }
            if (dto.CategoryId != null)
            {
                query = query.Where(w => w.Product.ProductOriginNumber.CategoryId == dto.CategoryId);
            }
            //if (dto.ColorId != null)
            //{
            //    predicate += (
            //      (invent) => invent.Product.ColorId == dto.ColorId
            //   );
            //}
            //if (dto.SeasonId != null)
            //{
            //    predicate += (
            //      (invent) => invent.Product.ProductOriginNumber.SeasonId == dto.SeasonId
            //   );
            //}
            //if (dto.SizeId != null)
            //{
            //    predicate += (
            //      (invent) => invent.Product.SizeId == dto.SizeId
            //   );
            //}
            return query.Where(w => w.IsEnabled && !w.IsDeleted);
        }
        #endregion

        #region 结束校验
        /// <summary>
        /// 结束校验
        /// </summary>
        /// <param name="CheckNumber"></param>
        /// <returns></returns>
        public OperationResult CheckerOver(string CheckNumber)
        {
            OperationResult oper = new OperationResult(OperationResultType.Error, "校对数据不存在");

            if (!string.IsNullOrEmpty(CheckNumber))
            {
                Checker checker = _checkerRepository.Entities.FirstOrDefault(x => x.IsDeleted == false && x.IsEnabled == true && x.CheckGuid == CheckNumber);
                if (checker != null)
                {
                    checker.CheckerState = CheckerFlag.Proofreader;
                    checker.UpdatedTime = DateTime.Now;
                    checker.OperatorId = AuthorityHelper.OperatorId;
                    checker.AfterCheckQuantity = 0;
                    Mapper.CreateMap<Checker, CheckerDto>();
                    CheckerDto dto = Mapper.Map<Checker, CheckerDto>(checker);
                    IQueryable<Inventory> listInventory = FilterProduct(dto);
                    checker.AfterCheckQuantity = listInventory.Count();
                    int count = _checkerRepository.Update(checker);
                    if (count > 0)
                    {
                        oper.ResultType = OperationResultType.Success;
                        oper.Message = string.Empty;
                    }
                    else
                    {
                        oper.Message = "提交数据失败";
                    }
                }
            }
            return oper;
        }

        public DbContextTransaction GetTransaction()
        {
            return _checkerRepository.GetTransaction();
        }


        #endregion
    }
}
