
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Web.Caching;
using Whiskey.ZeroStore.ERP.Models.Enums;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class StorageService : ServiceBase, IStorageContract
    {
        #region StorageService

        private readonly IRepository<Storage, int> _storageRepository;
        private readonly IRepository<Administrator, int> _administratorRepository;
        private readonly IRepository<Inventory, int> _InventoryRepository;
        private readonly IRepository<ProductTrack, int> _ProductTrackRepository;


        public StorageService(
            IRepository<Storage, int> storageRepository,
            IRepository<Inventory, int> _InventoryRepository,
            IRepository<ProductTrack, int> _ProductTrackRepository,
            IRepository<Administrator, int> administratorRepository
        )
            : base(storageRepository.UnitOfWork)
        {
            _storageRepository = storageRepository;
            _administratorRepository = administratorRepository;
            this._InventoryRepository = _InventoryRepository;
            this._ProductTrackRepository = _ProductTrackRepository;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public StorageDto View(int Id)
        {
            var entity = _storageRepository.GetByKey(Id);
            Mapper.CreateMap<Storage, StorageDto>();
            return Mapper.Map<Storage, StorageDto>(entity);
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public StorageDto Edit(int Id)
        {
            var entity = _storageRepository.GetByKey(Id);
            Mapper.CreateMap<Storage, StorageDto>();
            var dto = Mapper.Map<Storage, StorageDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>

        public IQueryable<Storage> Storages
        {
            get
            {
                return _storageRepository.Entities;

            }
        }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Storage, bool>> predicate, int id = 0)
        {
            return _storageRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params StorageDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _storageRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                RedisCacheHelper.ResetCacheAllStorage();
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params StorageDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _storageRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        entity.IsDeleted = false;
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }

        public OperationResult Update(params Storage[] entities)
        {
            try
            {
                entities.CheckNotNull("entities");
                UnitOfWork.TransactionEnabled = true;
                foreach (var entity in entities)
                {
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storageRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStorage();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "更新成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storageRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storageRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStorage();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storageRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storageRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStorage();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _storageRepository.Delete(ids);
                RedisCacheHelper.ResetCacheAllStorage();
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storageRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storageRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStorage();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _storageRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _storageRepository.Update(entity);
                }
                RedisCacheHelper.ResetCacheAllStorage();
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }




        #endregion

        //yxk 2015-9-9
        /// <summary>
        /// 获取仓库信息
        /// </summary>
        /// <param name="title"></param>
        /// <param name="expr"></param>
        /// <returns></returns>
        public List<Values<string, string>> SelectList(string title, Expression<Func<Storage, bool>> expr)
        {
            //List<Values<string, string>> list = new List<Values<string, string>>();

            var list = (_storageRepository.Entities.Where(expr).Select(c => new Values<string, string> { Key = c.Id.ToString(), Value = c.StorageName, IsEnabled = c.IsEnabled, IsDeleted = c.IsDeleted })).ToList();
            if (title != null && title != "")
                list.Insert(0, new Values<string, string> { Key = "", Value = title, IsEnabled = true, IsDeleted = false });
            return list;

        }
        //yxk 2015-9-23 
        /// <summary>
        /// 批量修改指定店铺下的仓库字段
        /// </summary>
        /// <param name="storeId"></param>
        /// <param name="exp"></param>
        /// <param name="updateWords"></param>
        /// <param name="updateValues"></param>
        /// <returns></returns>
        public OperationResult UpdateWord(int storeId, Expression<Func<Storage, bool>> exp, string[] updateWords, object[] updateValues)
        {
            try
            {
                if (updateWords == null || updateValues == null || updateWords.Length != updateValues.Length)
                    return new OperationResult(OperationResultType.Error)
                    {
                        Message = "需要修改的字段个数和对应的值个数不一致"
                    };
                var storages = _storageRepository.Entities.Where(c => c.StoreId == storeId).Where(exp);

                foreach (var storag in storages)
                {
                    //storag.IsDefaultStorage = false;
                    for (int i = 0; i < updateWords.Length; i++)
                    {
                        storag.GetType().GetProperty(updateWords[i]).SetValue(storag, updateValues[i]);
                    }

                }
                var storagDto = Mapper.Map<List<Storage>, List<StorageDto>>(storages.ToList());
                RedisCacheHelper.ResetCacheAllStorage();
                return _storageRepository.Update<StorageDto>(storagDto);
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, ex.GetBaseException().Message);
            }

        }


        /// <summary>
        /// 获取当前用户有权限访问的店铺
        /// </summary>
        /// <param name="userId">admin id</param>
        /// <returns></returns>
        public IQueryable<Storage> GetUserEnableStorages(int? userId, IAdministratorContract _adminContract)
        {
            if (!userId.HasValue || userId <= 0)
            {
                throw new ArgumentException();
            }
            return PermissionHelper.ManagedStorages(userId.Value, _adminContract, s => s, f => !f.IsDeleted && f.IsEnabled).AsQueryable();
        }
        public List<int> FilterStorageId(int? userId, IAdministratorContract _adminContract, int? storageIdToCheck)
        {
            var enabledStorageIds = GetUserEnableStorages(userId, _adminContract).Select(s => s.Id).ToList();
            if (!storageIdToCheck.HasValue)
            {
                return enabledStorageIds;
            }

            if (!enabledStorageIds.Contains(storageIdToCheck.Value))
            {
                return enabledStorageIds;
            }

            return new List<int> { storageIdToCheck.Value };
        }

        public OperationResult ShiftStorage(int Id, int StoreId, int StorageId)
        {
            return OperationHelper.Try((oper) =>
            {
                var res = new OperationResult(OperationResultType.Error);
                var mod = Storages.FirstOrDefault(w => w.IsEnabled && !w.IsDeleted && w.Id == Id);
                if (mod.IsNull())
                {
                    res.Message = "数据不存在"; return res;
                }
                if (mod.CheckLock)
                {
                    res.Message = "当前正在盘点,无法转移"; return res;
                }

                var listInvs = _InventoryRepository.Entities.Where(w => w.IsEnabled && !w.IsDeleted && w.Status == InventoryStatus.Default && !w.IsLock && w.StorageId == mod.Id && w.StoreId == mod.StoreId).ToList();
                if (listInvs.Count > 0)
                {
                    UnitOfWork.TransactionEnabled = true;
                    var dyname = Storages.Where(w => w.Id == StorageId).Select(s => new { s.StorageName, s.Store.StoreName }).FirstOrDefault();
                    var listProTrack = new List<ProductTrack>();
                    foreach (var inv in listInvs)
                    {
                        inv.StoreId = StoreId;
                        inv.StorageId = StorageId;
                        var strdesc = $"商品由{mod.Store.StoreName}-{mod.StorageName}转移到{dyname.StoreName}-{dyname.StorageName}";
                        inv.ProductOperationLogs.Add(new Models.Entities.Warehouses.ProductOperationLog()
                        {
                            ProductNumber = inv.ProductNumber,
                            OnlyFlag = inv.OnlyFlag,
                            LogFlag = inv.ProductLogFlag,
                            ProductBarcode = inv.ProductNumber + inv.OnlyFlag,
                            Description = strdesc,
                            OperatorId = AuthorityHelper.OperatorId,
                            CreatedTime = DateTime.Now
                        });
                        listProTrack.Add(new ProductTrack()
                        {
                            ProductNumber = inv.ProductNumber,
                            ProductBarcode = inv.ProductNumber + inv.OnlyFlag,
                            Describe = strdesc,
                            OperatorId = AuthorityHelper.OperatorId,
                        });
                    }
                    _InventoryRepository.Update(listInvs);
                    _ProductTrackRepository.Insert(listProTrack, null);
                    var status = UnitOfWork.SaveChanges() > 0;
                    return OperationHelper.ReturnOperationResult(status, oper);
                }
                else
                {
                    res.Message = "当前仓库没有库存,无法转移"; return res;
                }
            }, "转移库存");
        }
    }
}
