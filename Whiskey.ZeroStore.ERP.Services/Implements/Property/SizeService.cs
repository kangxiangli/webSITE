
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class SizeService : ServiceBase, ISizeContract
    {
        #region SizeService

        private readonly IRepository<Size, int> _sizeRepository;

        private readonly IRepository<Category, int> _categoryRepository;

        public SizeService(
            IRepository<Size, int> sizeRepository,
            IRepository<Category, int> categoryRepository
        )
            : base(sizeRepository.UnitOfWork)
        {
            _sizeRepository = sizeRepository;
            _categoryRepository = categoryRepository;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public Size View(int Id)
        {
            var entity = _sizeRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public SizeDto Edit(int Id)
        {
            var entity = _sizeRepository.GetByKey(Id);
            Mapper.CreateMap<Size, SizeDto>();
            var dto = Mapper.Map<Size, SizeDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Size> Sizes { get { return _sizeRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Size, bool>> predicate, int id = 0)
        {
            return _sizeRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params SizeDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                IQueryable<Size> listSize = Sizes;
                for (int i = 0; i < dtos.Length; i++)
                {
                    int categoryId = dtos[i].CategoryId;
                    string name = dtos[i].SizeName;
                    string code = dtos[i].SizeCode;
                    //int count = listSize.Where(x => x.CategoryId == categoryId && x.SizeName == name).Count();
                    //if (count>0)
                    //{
                    //    return new OperationResult(OperationResultType.Error, "添加失败,名称已经存在！"); 
                    //}
                    //int index = listSize.Where(x => x.CategoryId == categoryId && x.SizeCode == code).Count();
                    //if (index>0)
                    //{
                    //    return new OperationResult(OperationResultType.Error, "添加失败,编码已经存在！"); 
                    //}
                }
                OperationResult result = _sizeRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    //entity.Parent
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params SizeDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                IQueryable<Size> listSize = Sizes.Where(x=>x.IsDeleted==false && x.IsEnabled==true);
                foreach (SizeDto dto in dtos)
                {
                    //int count = listSize.Where(x => x.CategoryId == dto.CategoryId && x.SizeName == dto.SizeName && x.Id != dto.Id).Count();
                    //if (count>0)
                    //{
                    //    return new OperationResult(OperationResultType.Error, "添加失败,名称已经存在！");
                    //}
                    //count = listSize.Where(x => x.CategoryId == dto.CategoryId && x.SizeCode == dto.SizeCode && x.Id != dto.Id).Count();
                    //if (count>0)
                    //{
                    //    return new OperationResult(OperationResultType.Error, "添加失败,同分类下编码重复！");
                    //}
                }
                 
                OperationResult result = _sizeRepository.Update(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _sizeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _sizeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _sizeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _sizeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _sizeRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _sizeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _sizeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _sizeRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _sizeRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }




        /// <summary>
        /// 获取键值列表
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList(string title)
        {
            var list = new List<KeyValue<string, string>>();
            //Func<int, List<Size>, List<KeyValue<string, string>>> children = null;
            //children = (int level, List<Size> child) =>
            //{
            //    var m = new List<KeyValue<string, string>>();
            //    foreach (var c in child)
            //    {
            //        m.Add(new KeyValue<string, string> { Key = StringHelper.GetPrefix(level + 1) + c.SizeName, Value = c.Id.ToString() });
            //        m.AddRange(children(level + 1, c.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            //    }
            //    return m;
            //};
            //var categories = _sizeRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true && m.ParentId == null).ToList();
            //foreach (var parent in categories)
            //{
            //    list.Add(new KeyValue<string, string> { Key = parent.SizeName, Value = parent.Id.ToString() });
            //    list.AddRange(children.Invoke(0, parent.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            //}
            //if (!string.IsNullOrEmpty(title))
            //    list.Insert(0, new KeyValue<string, string> { Key = title, Value = "" });
            return list;
        }

        /// yky 2015-10-9
        /// <summary>
        /// 获取键值列表 
        /// </summary>        
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList()
        {
            var list = new List<KeyValue<string, string>>();
            var sizeList = _sizeRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true ).ToList();
            foreach (var size in sizeList)
            {
                list.Add(new KeyValue<string, string> { Key = size.SizeName, Value = size.Id.ToString() });
            }
            return list;
        }

        /// <summary>
        /// 获取递归名称
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullName(int id, int level)
        {
            Func<Size, List<string>> recursion = null;
            //recursion = (Size model) =>
            //{
            //    var list = new List<string>();
            //    if (model != null)
            //    {
            //        list.Insert(0, model.SizeName);
            //        if (model.Parent != null && model.Parent.ParentId != null)
            //        {
            //            list.InsertRange(0, recursion(model.Parent));
            //        }
            //        else if (model.Parent != null)
            //        {
            //            list.Insert(0, model.Parent.SizeName);
            //        }
            //    }
            //    return list;
            //};
            var entity = _sizeRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }


        /// <summary>
        /// 获取递归编号
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullCode(int id, int level)
        {
            Func<Size, List<string>> recursion = null;
            //recursion = (Size model) =>
            //{
            //    var list = new List<string>();
            //    list.Insert(0, model.SizeCode);
            //    if (model.Parent != null && model.Parent.ParentId != null)
            //    {
            //        list.InsertRange(0, recursion(model.Parent));
            //    }
            //    else if (model.Parent != null)
            //    {
            //        list.Insert(0, model.Parent.SizeCode);
            //    }
            //    return list;
            //};
            var entity = _sizeRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }

        #region 获取尺寸列表

        /// <summary>
        /// 获取尺寸列表
        /// </summary>
        /// <param name="categoryId">品类Id</param>
        /// <returns></returns>
        public IQueryable<Size> GetSize(int categoryId)
        {
            IQueryable<Size> listSize = this.Sizes.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.CategoryId == categoryId);
            return listSize;
        }
        #endregion






        #endregion
    }
}
