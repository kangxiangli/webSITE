
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Web.Mvc;
using Whiskey.Utility.Logging;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class ColorService : ServiceBase, IColorContract
    {
        #region ColorService

        #region 初始化数据层操作对象
        private readonly IRepository<Color, int> _colorRepository;

        protected readonly ILogger _Logger = LogManager.GetLogger(typeof(ColorService));

		public ColorService(
			IRepository<Color, int> colorRepository
		): base(colorRepository.UnitOfWork)
		{
			_colorRepository = colorRepository;
		}
        #endregion

        #region 根据Id查看详情
        
        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Color View(int Id){
			var entity=_colorRepository.GetByKey(Id);
            return entity;
		}
        #endregion

        #region 根据Id获取编辑对象
                
        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public ColorDto Edit(int Id){
			var entity=_colorRepository.GetByKey(Id);
            Mapper.CreateMap<Color, ColorDto>();
            var dto = Mapper.Map<Color, ColorDto>(entity);
            return dto;
		}
        #endregion

        #region 获取数据集
                
        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Color> Colors { get { return _colorRepository.Entities; } }

        #endregion

        #region 按条件检查数据是否存在
        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Color, bool>> predicate, int id = 0)
        {
            return _colorRepository.ExistsCheck(predicate, id);
        }

        #endregion

        #region 添加数据
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params ColorDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
                foreach (var dto in dtos)
                {
                    if (string.IsNullOrEmpty(dto.ColorCode))
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，编码不能为空！");
                    }
                    int count= Colors.Where(x => x.ColorName == dto.ColorName).Count();
                    if (count>0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，名称已经存在！");
                    }
                    int index = Colors.Where(x => x.ColorCode == dto.ColorCode).Count();
                    if (index>0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，编码已经存在！");
                    }
                }
                //
				OperationResult result = _colorRepository.Insert(dtos,
				dto =>
				{
					
				},
				(dto, entity) =>
				{
					entity.CreatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 更新数据
        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params ColorDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
                foreach (var dto in dtos)
                {
                    if (string.IsNullOrEmpty(dto.ColorCode))
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，编码不能为空！");
                    }
                    var color = Colors.Where(x => x.ColorName == dto.ColorName).FirstOrDefault();
                    if (color!=null && color.Id!=dto.Id)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，名称已经存在！");
                    }
                    var entity = Colors.Where(x => x.ColorCode == dto.ColorCode).FirstOrDefault();
                    if (entity!=null && entity.Id!=dto.Id)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，编码已经存在！");
                    }
                }
				OperationResult result = _colorRepository.Update(dtos,
				dto =>
				{

				},
				(dto, entity) => {
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 移除数据
        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _colorRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;                                         
					_colorRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 恢复数据
        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _colorRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
                    
					_colorRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 物理删除数据
        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				OperationResult result = _colorRepository.Delete(ids);
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }
        #endregion

        #region 启用数据
        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _colorRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
                     
					_colorRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}
        #endregion

        #region 禁用数据
        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _colorRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;                     
					_colorRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
		}
        #endregion


        /// <summary>
        /// 获取键值列表
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList(string title)
        {
            var list = new List<KeyValue<string, string>>();
            Func<int, List<Color>, List<KeyValue<string, string>>> children = null;
            children = (int level, List<Color> child) =>
            {
                var m = new List<KeyValue<string, string>>();
                foreach (var c in child)
                {
                    m.Add(new KeyValue<string, string> { Key = StringHelper.GetPrefix(level + 1) + c.ColorName, Value = c.Id.ToString() });
                    //m.AddRange(children(level + 1, c.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
                }
                return m;
            };
            var colors = _colorRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true).ToList();
            foreach (var parent in colors)
            {
                list.Add(new KeyValue<string, string> { Key = parent.ColorName, Value = parent.Id.ToString() });
                //list.AddRange(children.Invoke(0, parent.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            }
            list.Insert(0, new KeyValue<string, string> { Key = title, Value = "" });
            return list;
        }
        /// <summary>
        /// 获取键值列表
        /// </summary>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList()
        {
            var list = new List<KeyValue<string, string>>();            
            var colors = _colorRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true).ToList();
            foreach (var color in colors)
            {
                list.Add(new KeyValue<string, string> { Key = color.ColorName, Value = color.Id.ToString() });           
            }                       
            return list;
        }

        #region 获取一级颜色分类
        /// <summary>
        /// 获取一级颜色分类
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<SelectListItem> ParentSelectList(string title)
        {
            List<SelectListItem> list = new List<SelectListItem>();
            var colors = _colorRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true).ToList();
            foreach (var color in colors)
            {
                list.Add(new SelectListItem { Text = color.ColorName, Value = color.Id.ToString() });
            }
            if (!string.IsNullOrEmpty(title))
            {
                list.Insert(0, new SelectListItem { Text = title, Value = "" });
            }
            return list;
        }
        #endregion

        /// <summary>
        /// 获取递归名称
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullName(int id, int level)
        {
            Func<Color, List<string>> recursion = null;
            recursion = (Color model) =>
            {
                var list = new List<string>();
                if (model != null)
                {
                    list.Insert(0, model.ColorName);
                    //if (model.Parent != null && model.Parent.ParentId != null)
                    //{
                    //    list.InsertRange(0, recursion(model.Parent));
                    //}
                    //else if (model.Parent != null)
                    //{
                    //    list.Insert(0, model.Parent.ColorName);
                    //}
                }
                return list;
            };
            var entity = _colorRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }


        /// <summary>
        /// 获取递归编号
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullCode(int id, int level)
        {
            Func<Color, List<string>> recursion = null;
            recursion = (Color model) =>
            {
                var list = new List<string>();
                list.Insert(0, model.ColorCode);
                //if (model.Parent != null && model.Parent.ParentId != null)
                //{
                //    list.InsertRange(0, recursion(model.Parent));
                //}
                //else if (model.Parent != null)
                //{
                //    list.Insert(0, model.Parent.ColorCode);
                //}
                return list;
            };
            var entity = _colorRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }

        #region 生成随机编码
        /// <summary>
        /// 生成随机编码
        /// </summary>
        /// <param name="length">父级Id</param>
        /// <returns></returns>
        //public string GetCode(int parentId)
        //{
        //    try
        //    {
        //        var listColor = _colorRepository.Entities;
        //        string code = string.Empty;
        //        while (true)
        //        {
        //            if (parentId != 0)
        //            {
        //                var color = listColor.Where(x => x.ParentId == parentId).FirstOrDefault();
        //                if (color != null)
        //                {
        //                    code = color.ColorCode + RandomHelper.GetRandomCode(1);
        //                }
        //                else
        //                {
        //                    break;
        //                }
        //            }
        //            else
        //            {
        //                code = RandomHelper.GetRandomCode(1);
        //            }
        //            var cates = listColor.Where(x => x.ColorCode == code);
        //            if (cates.Count() > 0)
        //            {
        //                continue;
        //            }
        //            else
        //            {
        //                break;
        //            }
        //        }
        //        return code;
        //    }
        //    catch (Exception ex)
        //    {
        //        _Logger.Error<string>(ex.ToString());
        //        return string.Empty;
        //    }
        //}
        #endregion

        #endregion
    }
}
