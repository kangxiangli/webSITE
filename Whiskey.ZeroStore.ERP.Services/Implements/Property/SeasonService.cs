
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class SeasonService : ServiceBase, ISeasonContract
    {
        #region SeasonService

		private readonly IRepository<Season, int> _seasonRepository;


		public SeasonService(
			IRepository<Season, int> seasonRepository
		): base(seasonRepository.UnitOfWork)
		{
			_seasonRepository = seasonRepository;
		}


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Season View(int Id){
			var entity=_seasonRepository.GetByKey(Id);
            return entity;
		}


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public SeasonDto Edit(int Id){
			var entity=_seasonRepository.GetByKey(Id);
            Mapper.CreateMap<Season, SeasonDto>();
            var dto = Mapper.Map<Season, SeasonDto>(entity);
            return dto;
		}


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Season> Seasons { get { return _seasonRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Season, bool>> predicate, int id = 0)
        {
            return _seasonRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params SeasonDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
                IQueryable<Season> listSeason = Seasons;
                for (int i = 0; i < dtos.Length; i++)
                {
                    string name = dtos[i].SeasonName;
                    string code= dtos[i].SeasonCode;
                    int count= listSeason.Where(x => x.SeasonName == name).Count();
                    if (count>0)
                    {
                         return new OperationResult(OperationResultType.Error, "添加失败,名称已经存在！");
                    }
                    int index = listSeason.Where(x => x.SeasonCode == code).Count();
                    if (index>0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败,编码已经存在！");
                    }
                }
				OperationResult result = _seasonRepository.Insert(dtos,
				dto =>
				{
					
				},
				(dto, entity) =>
				{
					entity.CreatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params SeasonDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
                IQueryable<Season> listSeason = Seasons;
                for (int i = 0; i < dtos.Length; i++)
                {
                    string name = dtos[i].SeasonName;
                    string code = dtos[i].SeasonCode;
                    var season = listSeason.Where(x => x.SeasonName == name).FirstOrDefault();
                    if (season !=null && season.Id==dtos[i].Id)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败,名称已经存在！");
                    }
                    var entity = listSeason.Where(x => x.SeasonCode == code).FirstOrDefault();
                    if (entity!=null && entity.Id!=dtos[i].Id)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败,编码已经存在！");
                    }
                }
				OperationResult result = _seasonRepository.Update(dtos,
				dto =>
				{

				},
				(dto, entity) => {
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _seasonRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_seasonRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _seasonRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_seasonRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				OperationResult result = _seasonRepository.Delete(ids);
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _seasonRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_seasonRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}


		/// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _seasonRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_seasonRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
		}

        /// <summary>
        /// 获取键值数据
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList(string title = null)
        {
            var list = new List<KeyValue<string, string>>();
            list = _seasonRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true).OrderByDescending(m => m.Id).Select(m => new KeyValue<string, string> { Key = m.Id.ToString(), Value = m.SeasonName}).ToList();
            if (!string.IsNullOrEmpty(title))
            {
                list.Insert(0, new KeyValue<string, string> { Key = "", Value = title });
            }
            return list;
        }

        /// <summary>
        /// 获取键值数据
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList()
        {
            var list = new List<KeyValue<string, string>>();
            list = _seasonRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true).OrderByDescending(m => m.Id).Select(m => new KeyValue<string, string> { Key = m.SeasonName, Value = m.Id.ToString() }).ToList();            
            return list;
        }


        #endregion
    }
}
