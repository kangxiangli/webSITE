
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Web.Mvc;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class BrandService : ServiceBase, IBrandContract
    {
        #region BrandService

        private readonly IRepository<Brand, int> _brandRepository;


        public BrandService(
            IRepository<Brand, int> brandRepository
        )
            : base(brandRepository.UnitOfWork)
        {
            _brandRepository = brandRepository;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public Brand View(int Id)
        {
            var entity = _brandRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public BrandDto Edit(int Id)
        {
            var entity = _brandRepository.GetByKey(Id);
            Mapper.CreateMap<Brand, BrandDto>();
            var dto = Mapper.Map<Brand, BrandDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Brand> Brands { get { return _brandRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Brand, bool>> predicate, int id = 0)
        {
            return _brandRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params BrandDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                for (int i = 0; i < dtos.Length; i++)
                {
                    string name = dtos[i].BrandName;
                    string code = dtos[i].BrandCode;
                    int count = Brands.Where(x => x.BrandName == name).Count();
                    if (count>0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，名称已经存在！");
                    }
                    int index =Brands.Where(x=>x.BrandCode==code).Count();
                    if (index>0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，编码已经存在！");
                    }
                }
                OperationResult result = _brandRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params BrandDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                for (int i = 0; i < dtos.Length; i++)
                {
                    string name = dtos[i].BrandName;
                    string code = dtos[i].BrandCode;
                    var brand = Brands.Where(x => x.BrandName == name).FirstOrDefault();
                    if (brand !=null && brand.Id != dtos[i].Id)
                    {
                        return new OperationResult(OperationResultType.Error, "更新失败，名称已经存在！" );
                    }
                    var temp = Brands.Where(x => x.BrandCode == code).FirstOrDefault();
                    if (temp != null && temp.Id != dtos[i].Id)
                    {
                        return new OperationResult(OperationResultType.Error, "更新失败，编码已经存在！");
                    }
                }
                OperationResult result = _brandRepository.Update(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _brandRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    if(entity.ParentId==null)
                    {
                        foreach (var child in entity.Children)
                        {
                            child.IsDeleted = true;
                            child.UpdatedTime = DateTime.Now;
                            child.OperatorId = AuthorityHelper.OperatorId;
                            _brandRepository.Update(child);  
                        }
                    }
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _brandRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _brandRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _brandRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _brandRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _brandRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _brandRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _brandRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _brandRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 获取brand键值对
        /// </summary>
        /// <param name="title">brand列表显示的标题，为null或者“”则不添加title</param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList(string title)
        {
            var list = new List<KeyValue<string, string>>();
            Func<int, List<Brand>, List<KeyValue<string, string>>> children = null;
            children = (int level, List<Brand> child) =>
            {
                var m = new List<KeyValue<string, string>>();
                foreach (var c in child)
                {
                    m.Add(new KeyValue<string, string> { Key = StringHelper.GetPrefix(level + 1) + c.BrandName, Value = c.Id.ToString() });
                    m.AddRange(children(level + 1, c.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
                }
                return m;
            };
            var categories = _brandRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true && m.ParentId == null).ToList();
            foreach (var parent in categories)
            {
                list.Add(new KeyValue<string, string> { Key = parent.BrandName, Value = parent.Id.ToString() });
                list.AddRange(children.Invoke(0, parent.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            }
            if (!string.IsNullOrEmpty(title))
                list.Insert(0, new KeyValue<string, string> { Key = title, Value = "-1" });
            return list;
        }

        /// <summary>
        /// 获取键值列表
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList()
        {
            var list = new List<KeyValue<string, string>>();
            var brandList = _brandRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true && m.ParentId != null);
            foreach (var brand in brandList)
            {
                list.Add(new KeyValue<string, string> { Key = brand.BrandName, Value = brand.Id.ToString() });
            }
            return list;
        }

        /// <summary>
        /// 获取一级分类列表
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<SelectListItem> ParentSelectList(string title)
        {
            List<SelectListItem> list = new List<SelectListItem>();
            var brandList = _brandRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true && m.ParentId == null);
            foreach (var brand in brandList)
            {
                list.Add(new SelectListItem { Text = brand.BrandName, Value = brand.Id.ToString() });
            }
            if (!string.IsNullOrEmpty(title))
            {
                list.Insert(0, new SelectListItem { Text = title, Value = "" });
            }
            return list;
        }


        /// <summary>
        /// 获取递归名称
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullName(int id, int level)
        {
            Func<Brand, List<string>> recursion = null;
            recursion = (Brand model) =>
            {
                var list = new List<string>();
                if (model != null)
                {
                    list.Insert(0, model.BrandName);
                    if (model.Parent != null && model.Parent.ParentId != null)
                    {
                        list.InsertRange(0, recursion(model.Parent));
                    }
                    else if (model.Parent != null)
                    {
                        list.Insert(0, model.Parent.BrandName);
                    }
                }
                return list;
            };
            var entity = _brandRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }


        /// <summary>
        /// 获取递归编号
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullCode(int id, int level)
        {
            Func<Brand, List<string>> recursion = null;
            recursion = (Brand model) =>
            {
                var list = new List<string>();
                list.Insert(0, model.BrandCode);
                if (model.Parent != null && model.Parent.ParentId != null)
                {
                    list.InsertRange(0, recursion(model.Parent));
                }
                else if (model.Parent != null)
                {
                    list.Insert(0, model.Parent.BrandCode);
                }
                return list;
            };
            var entity = _brandRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }


        #endregion
    }
}
