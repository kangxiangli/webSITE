
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Models.Entities;
using Whiskey.ZeroStore.ERP.Models.Enums;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class TimeoutSettingService : ServiceBase, ITimeoutSettingContract
    {
        #region SettingService

        private readonly IRepository<TimeoutSetting, int> _settingRepository;
        private readonly IRepository<Retail, int> _retailRepository;
        private readonly IRepository<Orderblank, int> _orderblankRepository;


        public TimeoutSettingService(
            IRepository<TimeoutSetting, int> settingRepository,
            IRepository<Retail, int> retailRepository,
            IRepository<Orderblank, int> orderblankRepository
        ) : base(settingRepository.UnitOfWork)
        {
            _settingRepository = settingRepository;
            _retailRepository = retailRepository;
            _orderblankRepository = orderblankRepository;
        }


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public TimeoutSetting View(int Id)
        {
            var entity = _settingRepository.GetByKey(Id);
            return entity;
        }


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public TimeoutSettingDto Edit(int Id)
        {
            var entity = _settingRepository.GetByKey(Id);

            var dto = Mapper.Map<TimeoutSettingDto>(entity);
            return dto;
        }


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<TimeoutSetting> Settings { get { return _settingRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<TimeoutSetting, bool>> predicate, int id = 0)
        {
            return _settingRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params TimeoutSettingDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _settingRepository.Insert(dtos,
                dto =>
                {

                },
                (dto, entity) =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    return entity;
                });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params TimeoutSettingDto[] dtos)
        {
            try
            {
                dtos.CheckNotNull("dtos");
                OperationResult result = _settingRepository.Update(dtos,
                    dto =>
                    {

                    },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _settingRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _settingRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "移除成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _settingRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _settingRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "恢复成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                OperationResult result = _settingRepository.Delete(ids);
                return result;
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {

            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _settingRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = true;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _settingRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "启用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _settingRepository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = false;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                    _settingRepository.Update(entity);
                }
                return UnitOfWork.SaveChanges() > 0 ? new OperationResult(OperationResultType.Success, "禁用成功！") : new OperationResult(OperationResultType.NoChanged, "数据没有变化！");
            }
            catch (Exception ex)
            {
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }

        public TimeoutSetting GetTimeoutSettingForOrderblank(OrderblankAction action)
        {
            switch (action)
            {
                case OrderblankAction.Create:
                case OrderblankAction.Delete:
                case OrderblankAction.Delivery:
                    {
                        return _settingRepository.Entities.FirstOrDefault(s => !s.IsDeleted && s.IsEnabled && s.Name.Contains("配货超时"));
                    }

                case OrderblankAction.Reject:
                case OrderblankAction.Accept:
                    {
                        return _settingRepository.Entities.FirstOrDefault(s => !s.IsDeleted && s.IsEnabled && s.Name.Contains("收货超时"));
                    }
                default:
                    return null;
            }
        }


        public TimeoutSetting GetTimeoutSettingForReturn()
        {
            return _settingRepository.Entities.FirstOrDefault(s => !s.IsDeleted && s.IsEnabled && s.Name.Contains("退货超时"));
        }


        /// <summary>
        /// 计算超时时长,单位(秒)
        /// </summary>
        /// <param name="timeoutName">超时名称</param>
        /// <param name="number">订单号</param>
        /// <returns>超时时长,单位(秒)</returns>
        public int ComputeTimeouts(string timeoutName, string number)
        {
            // 计算超时
            var timeouts = 0;

            if (timeoutName == "退货超时")
            {
                var settingEntity = GetTimeoutSettingForReturn();
                if (settingEntity == null)
                {
                    return 0;
                }
                var entity = _retailRepository.Entities.FirstOrDefault(r => r.RetailNumber == number);
                if (entity == null)
                {
                    throw new Exception("输入的单号未找到");
                }
                var refTimePoint = entity.CreatedTime;
                var validDate = refTimePoint.AddSeconds(settingEntity.TimeSpan);
                timeouts = (int)Math.Max(0, (DateTime.Now - validDate).TotalSeconds);

            }
            else if (timeoutName == "配货超时")
            {
                var settingEntity = GetTimeoutSettingForOrderblank(OrderblankAction.Delivery);
                if (settingEntity == null)
                {
                    return 0;
                }
                var entity = _orderblankRepository.Entities.FirstOrDefault(r => r.OrderBlankNumber == number);
                if (entity == null)
                {
                    throw new Exception("输入的单号未找到");
                }
                var refTimePoint = entity.CreatedTime;
                var validDate = refTimePoint.AddSeconds(settingEntity.TimeSpan);
                timeouts = (int)Math.Max(0, (DateTime.Now - validDate).TotalSeconds);
            }
            else if (timeoutName == "收货超时")
            {
                var settingEntity = GetTimeoutSettingForOrderblank(OrderblankAction.Accept);
                if (settingEntity == null)
                {
                    return 0;
                }
                var entity = _orderblankRepository.Entities.FirstOrDefault(r => r.OrderBlankNumber == number);
                if (entity == null)
                {
                    throw new Exception("输入的单号未找到");
                }
                var refTimePoint = entity.DeliveryTime.Value;
                var validDate = refTimePoint.AddSeconds(settingEntity.TimeSpan);
                timeouts = (int)Math.Max(0, (DateTime.Now - validDate).TotalSeconds);
            }


            return timeouts;
        }








        #endregion
    }
}
