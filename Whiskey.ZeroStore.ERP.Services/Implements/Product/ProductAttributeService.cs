
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.Web.Mvc;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class ProductAttributeService : ServiceBase, IProductAttributeContract
    {
        #region ProductAttributeService

		private readonly IRepository<ProductAttribute, int> _productattributeRepository;


		public ProductAttributeService(
			IRepository<ProductAttribute, int> productattributeRepository
		): base(productattributeRepository.UnitOfWork)
		{
			_productattributeRepository = productattributeRepository;
		}


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public ProductAttribute View(int Id){
			var entity=_productattributeRepository.GetByKey(Id);
            return entity;
		}


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public ProductAttributeDto Edit(int Id){
			var entity=_productattributeRepository.GetByKey(Id);
            Mapper.CreateMap<ProductAttribute, ProductAttributeDto>();
            var dto = Mapper.Map<ProductAttribute, ProductAttributeDto>(entity);
            return dto;
		}


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<ProductAttribute> ProductAttributes { get { return _productattributeRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<ProductAttribute, bool>> predicate, int id = 0)
        {
            return _productattributeRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params ProductAttributeDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
                IQueryable<ProductAttribute> listProAttr = this.ProductAttributes;
                foreach (var dto in dtos)
                {
                    int count =listProAttr.Where(x=>x.AttributeName==dto.AttributeName && x.ParentId==dto.ParentId).Count();
                    if (count>0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，名称已经存在！");
                    }
                    count = listProAttr.Where(x => x.CodeNum == dto.CodeNum).Count();
                    if (count > 0)
                    {
                        return new OperationResult(OperationResultType.Error, "添加失败，编码已经存在！");
                    }
                }
				OperationResult result = _productattributeRepository.Insert(dtos,
				dto =>
				{
					
				},
				(dto, entity) =>
				{
					entity.CreatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;

                    var newImgs = dto.ProductAttributeImages.Split(new char[] { ',', '，' }, StringSplitOptions.RemoveEmptyEntries).ToList();

                    var paiNew = newImgs.Select(s => new ProductAttributeImage()
                    {
                        OperatorId = AuthorityHelper.OperatorId,
                        UpdatedTime = entity.UpdatedTime,
                        OriginalPath = s
                    }).ToList();

                    entity.ProductAttributeImage = paiNew;

                    return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params ProductAttributeDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
                IQueryable<ProductAttribute> listProAttr = this.ProductAttributes;
                foreach (var dto in dtos)
                {
                     var entity =listProAttr.Where(x => x.AttributeName == dto.AttributeName && x.ParentId == dto.ParentId).FirstOrDefault();
                     if (entity !=null && entity.Id!=dto.Id)
                     {
                         return new OperationResult(OperationResultType.Error, "编辑失败，名称已经存在！");
                     }
                }
				OperationResult result = _productattributeRepository.Update(dtos,
					dto =>
					{

					},
					(dto, entity) => {
						entity.UpdatedTime = DateTime.Now;
						entity.OperatorId=AuthorityHelper.OperatorId;

                        var newImgs = dto.ProductAttributeImages.Split(new char[] { ',', '，' }, StringSplitOptions.RemoveEmptyEntries).ToList();

                        var orgImgs = entity.ProductAttributeImage.Select(s => s.OriginalPath).ToList();

                        var delpaiImgs = orgImgs.Except(newImgs);//需要删除的
                        var addpai = newImgs.Except(orgImgs);//需要添加的

                        var paiNew = addpai.Select(s => new ProductAttributeImage()
                        {
                            OperatorId = AuthorityHelper.OperatorId,
                            UpdatedTime = entity.UpdatedTime,
                            OriginalPath = s
                        }).ToList();

                        var orgImages = entity.ProductAttributeImage.ToList();

                        orgImages.AddRange(paiNew);
                        orgImages.RemoveAll(r => delpaiImgs.Contains(r.OriginalPath));

                        entity.ProductAttributeImage = orgImages;

                        return entity;
					});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _productattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
                    if (entity.ParentId==null)
                    {
                        foreach (var child in entity.Children)
                        {
                            child.IsDeleted = true;
                            child.UpdatedTime = DateTime.Now;
                            child.OperatorId = AuthorityHelper.OperatorId;
                            _productattributeRepository.Update(child);
                        }
                        
                    }
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_productattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _productattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_productattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				OperationResult result = _productattributeRepository.Delete(ids);
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _productattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_productattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}


		/// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _productattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_productattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
		}




        /// <summary>
        /// 获取键值列表
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList(string title)
        {
            var list = new List<KeyValue<string, string>>();
            Func<int, List<ProductAttribute>, List<KeyValue<string, string>>> children = null;
            children = (int level, List<ProductAttribute> child) =>
            {
                var m = new List<KeyValue<string, string>>();
                foreach (var c in child)
                {
                    m.Add(new KeyValue<string, string> { Key = StringHelper.GetPrefix(level + 1) + c.AttributeName, Value = c.Id.ToString() });
                    m.AddRange(children(level + 1, c.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
                }
                return m;
            };
            var categories = _productattributeRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true && m.ParentId == null).ToList();
            foreach (var parent in categories)
            {
                list.Add(new KeyValue<string, string> { Key = parent.AttributeName, Value = parent.Id.ToString() });
                list.AddRange(children.Invoke(0, parent.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            }
            list.Insert(0, new KeyValue<string, string> { Key = title, Value = "" });
            return list;
        }



        /// <summary>
        /// 获取递归分类名称
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullName(int id, int level)
        {
            Func<ProductAttribute, List<string>> recursion = null;
            recursion = (ProductAttribute model) =>
            {
                var list = new List<string>();
                if (model != null)
                {
                    list.Insert(0, model.AttributeName);
                    if (model.Parent != null && model.Parent.ParentId != null)
                    {
                        list.InsertRange(0, recursion(model.Parent));
                    }
                    else if (model.Parent != null)
                    {
                        list.Insert(0, model.Parent.AttributeName);
                    }
                }
                return list;
            };
            var entity = _productattributeRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }

        #region 获取键值对集合
        /// <summary>
        /// 获取键值对集合
        /// </summary>
        /// <param name="title">标题（为空时，不插入键值对集合）</param>
        /// <returns></returns>
        public IEnumerable<SelectListItem> SelectOption(string title) 
        {
            List<SelectListItem> list = new List<SelectListItem>();
            IQueryable<ProductAttribute> listProAttr= this.ProductAttributes.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.ParentId==null);
            foreach (var proAttr in listProAttr)
            {
                list.Add(new SelectListItem() { 
                 Text=proAttr.AttributeName,
                 Value=proAttr.Id.ToString()
                });
            }
            if (!string.IsNullOrEmpty(title))
            {
                list.Insert(0, new SelectListItem() { Value="",Text=title});
            }
            return list;
        }
        #endregion

        #endregion
    }
}
