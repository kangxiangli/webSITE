
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class GalleryAttributeService : ServiceBase, IGalleryAttributeContract
    {
        #region GalleryAttributeService

		private readonly IRepository<GalleryAttribute, int> _galleryattributeRepository;


		public GalleryAttributeService(
			IRepository<GalleryAttribute, int> galleryattributeRepository
		): base(galleryattributeRepository.UnitOfWork)
		{
			_galleryattributeRepository = galleryattributeRepository;
		}


        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public GalleryAttribute View(int Id){
			var entity=_galleryattributeRepository.GetByKey(Id);
            return entity;
		}


        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public GalleryAttributeDto Edit(int Id){
			var entity=_galleryattributeRepository.GetByKey(Id);
            Mapper.CreateMap<GalleryAttribute, GalleryAttributeDto>();
            var dto = Mapper.Map<GalleryAttribute, GalleryAttributeDto>(entity);
            return dto;
		}


        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<GalleryAttribute> GalleryAttributes { get { return _galleryattributeRepository.Entities; } }



        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<GalleryAttribute, bool>> predicate, int id = 0)
        {
            return _galleryattributeRepository.ExistsCheck(predicate, id);
        }



        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params GalleryAttributeDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
				OperationResult result = _galleryattributeRepository.Insert(dtos,
				dto =>
				{
                    if (CheckExists(m => m.AttributeName == dto.AttributeName && m.ParentId == dto.ParentId))
                    {
                        throw new Exception("当前层级中分类名称“{0}”已存在，不能重复添加。".FormatWith(dto.AttributeName));
                    }
				},
				(dto, entity) =>
				{
                    var parent = _galleryattributeRepository.Entities.FirstOrDefault(m => m.Id == dto.ParentId);
                    if (parent != null)
                    {
                        entity.AttributeLevel = parent.AttributeLevel + 1;
                    }
                    else
                    {
                        entity.AttributeLevel = 0;
                    }
					entity.CreatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }



		/// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params GalleryAttributeDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
				OperationResult result = _galleryattributeRepository.Update(dtos,
					dto =>
					{

					},
					(dto, entity) => {
                        var parent = _galleryattributeRepository.Entities.FirstOrDefault(m => m.Id == dto.ParentId);
                        if (parent != null)
                        {
                            entity.AttributeLevel = parent.AttributeLevel + 1;
                        }
                        else
                        {
                            entity.AttributeLevel = 0;
                        }
						entity.UpdatedTime = DateTime.Now;
						entity.OperatorId=AuthorityHelper.OperatorId;
						return entity;
					});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }



        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _galleryattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
                    if (entity.Children.Any())
                    {
                        return new OperationResult(OperationResultType.Error, "分类“{0}”的包含子节点，不能移除！".FormatWith(entity.AttributeName));
                    }
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_galleryattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _galleryattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
                    if (entity.Children.Any())
                    {
                        return new OperationResult(OperationResultType.Error, "分类“{0}”的包含子节点，不能恢复！".FormatWith(entity.AttributeName));
                    }
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_galleryattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }


        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
                OperationResult result = _galleryattributeRepository.Delete(ids, entity =>
                {
                    if (entity.Children.Any())
                    {
                        throw new Exception("分类“{0}”的子级不为空，不能删除。".FormatWith(entity.AttributeName));
                    }
                    entity.Galleries.Clear();

                });
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }


        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _galleryattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
                    if (entity.Children.Any())
                    {
                        return new OperationResult(OperationResultType.Error, "分类“{0}”的包含子节点，不能启用！".FormatWith(entity.AttributeName));
                    }
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_galleryattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}


		/// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _galleryattributeRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
                    if (entity.Children.Any())
                    {
                        return new OperationResult(OperationResultType.Error, "分类“{0}”的包含子节点，不能禁用！".FormatWith(entity.AttributeName));
                    }
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_galleryattributeRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
		}




        /// <summary>
        /// 获取键值列表
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public IEnumerable<KeyValue<string, string>> SelectList(string title)
        {
            var list = new List<KeyValue<string, string>>();
            //Func<int, List<GalleryAttribute>, List<KeyValue<string, string>>> children = null;
            //children = (int level, List<GalleryAttribute> child) =>
            //{
            //    var m = new List<KeyValue<string, string>>();
            //    foreach (var c in child)
            //    {
            //        m.Add(new KeyValue<string, string> { Key = StringHelper.GetPrefix(level + 1) + c.AttributeName, Value = c.Id.ToString() });
            //        m.AddRange(children(level + 1, c.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            //    }
            //    return m;
            //};
            var categories = _galleryattributeRepository.Entities.Where(m => m.IsDeleted == false && m.IsEnabled == true && m.ParentId == null).ToList();
            foreach (var parent in categories)
            {
                list.Add(new KeyValue<string, string> { Key = parent.AttributeName, Value = parent.Id.ToString() });
                //list.AddRange(children.Invoke(0, parent.Children.Where(e => e.IsDeleted == false && e.IsEnabled == true).ToList()));
            }
            list.Insert(0, new KeyValue<string, string> { Key = title, Value = "" });
            return list;
        }



        /// <summary>
        /// 获取递归分类名称
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        public string FullName(int id, int level)
        {
            Func<GalleryAttribute, List<string>> recursion = null;
            recursion = (GalleryAttribute model) =>
            {
                var list = new List<string>();
                if (model != null)
                {
                    list.Insert(0, model.AttributeName);
                    if (model.Parent != null && model.Parent.ParentId != null)
                    {
                        list.InsertRange(0, recursion(model.Parent));
                    }
                    else if (model.Parent != null)
                    {
                        list.Insert(0, model.Parent.AttributeName);
                    }
                }
                return list;
            };
            var entity = _galleryattributeRepository.GetByKey(id);
            return recursion.Invoke(entity).Take(level).ExpandAndToString("");
        }






        #endregion
    }
}
