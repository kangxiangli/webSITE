
//   This file was generated by T4 code generator Implement_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using AutoMapper;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Web.Helper;
using Whiskey.Web.SignalR;
using Whiskey.Web.Http;
using Whiskey.Web.Extensions;
using Whiskey.Utility;
using Whiskey.Utility.Helper;
using Whiskey.Utility.Data;
using Whiskey.Utility.Web;
using Whiskey.Utility.Class;
using Whiskey.Utility.Extensions;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using System.IO;
using Whiskey.Utility.IO;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{

    public class SubjectService : ServiceBase, ISubjectContract
    {
        #region SubjectService


        #region 声明数据层操作对象                
        private readonly IRepository<Subject, int> _subjectRepository;

		public SubjectService(
			IRepository<Subject, int> subjectRepository
		): base(subjectRepository.UnitOfWork)
		{
			_subjectRepository = subjectRepository;
		}
        #endregion

        #region 根据Id获取对象
        /// <summary>
        /// 获取单个数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public Subject View(int Id){
			var entity=_subjectRepository.GetByKey(Id);
            return entity;
		}
        #endregion

        #region 获取单个DTO数据
        /// <summary>
        /// 获取单个DTO数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		public SubjectDto Edit(int Id){
			var entity=_subjectRepository.GetByKey(Id);
            Mapper.CreateMap<Subject, SubjectDto>();
            var dto = Mapper.Map<Subject, SubjectDto>(entity);
            return dto;
		}
        #endregion 

        #region 获取专题数据集
        /// <summary>
        /// 获取数据集
        /// </summary>
        public IQueryable<Subject> Subjects { get { return _subjectRepository.Entities; } }
        #endregion

        #region 按条件检查数据是否存在
        /// <summary>
        /// 按条件检查数据是否存在
        /// </summary>
        /// <param name="predicate">检查谓语表达式</param>
        /// <param name="id">更新的编号</param>
        /// <returns>是否存在</returns>
        public bool CheckExists(Expression<Func<Subject, bool>> predicate, int id = 0)
        {
            return _subjectRepository.ExistsCheck(predicate, id);
        }
        #endregion

        #region 添加数据
        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">要添加的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Insert(params SubjectDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
				OperationResult result = _subjectRepository.Insert(dtos,
				dto =>
				{
					
				},
				(dto, entity) =>
				{
					entity.CreatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					return entity;
				});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "添加失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 添加数据
        /// </summary>
        /// <param name="dtos">领域模型实体</param>
        /// <param name="listFile">接受压缩文件集合</param>
        /// <returns></returns>
        public OperationResult Insert(Subject subject, HttpFileCollectionBase listFile)
        {
            Random ranNumber = new Random();
            int number = ranNumber.Next(100000);
            string strConPath = ConfigurationHelper.GetAppSetting("SaveSubjectPath") + DateTime.Now.Year  + DateTime.Now.Month  + DateTime.Now.Day +DateTime.Now.Second+number.ToString() + "/";
            string strSavePath = AppDomain.CurrentDomain.BaseDirectory + strConPath;
            try
            {
                IQueryable<Subject> listSubject = _subjectRepository.Entities.Where(x => x.IsDeleted == false && x.IsEnabled == true && x.SubjectName == subject.SubjectName);
                if (listSubject.Count()>0)
                {
                    return new OperationResult(OperationResultType.Error, "上传专题名称已经存在");
                }
                List<string> listPath = new List<string>();
                if (listFile!=null && listFile.Count>0)
                {
                    for (int i = 0; i < listFile.Count; i++)
                    {
                        ZipHelper.UploadZip(listFile[i].InputStream, strSavePath, listFile[i].FileName,out listPath);
                    }
                }
                List<Subject> listSub = new List<Subject>();
                if (listPath.Count>0)
                {
                    foreach(var path in listPath)
                    {
                       int lastCount = path.LastIndexOf("/");
                       string strName = path.Substring(lastCount + 1);
                       Subject sub = new Subject();
                       sub.SubjectName = strName;
                       sub.Summary = subject.Summary;
                       sub.Path = strConPath + path;
                       sub.OperatorId = AuthorityHelper.OperatorId;
                       sub.IsEnabled = false;
                       listSub.Add(sub);
                    }                    
                }
                subject.OperatorId = AuthorityHelper.OperatorId;
                subject.Path = strConPath;
                subject.Children = listSub;
                int count= _subjectRepository.Insert(subject);
                if (count > 0)
                {
                    return new OperationResult(OperationResultType.Success, "添加成功");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error, "添加失败");
                }
            }
            catch (Exception)
            {
                return new OperationResult(OperationResultType.Error, "程序异常");
            }
        }
        #endregion

        #region 更新数据
        /// <summary>
        /// 更新数据
        /// </summary>
        /// <param name="dtos">包含更新数据的DTO数据</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Update(params SubjectDto[] dtos)
        {
            try
            {
				dtos.CheckNotNull("dtos");
				OperationResult result = _subjectRepository.Update(dtos,
					dto =>
					{

					},
					(dto, entity) => {
						entity.UpdatedTime = DateTime.Now;
						entity.OperatorId=AuthorityHelper.OperatorId;
						return entity;
					});
				return result;
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "更新失败！错误如下：" + ex.Message);
            }
        }

        /// <summary>
        /// 编辑专题
        /// </summary>
        /// <param name="subject">实体</param>
        /// <param name="listFile">压缩文件集合</param>
        /// <returns></returns>
        public OperationResult Update(Subject subject, HttpFileCollectionBase listFile)
        {
            try
            {
                string rootPath = AppDomain.CurrentDomain.BaseDirectory;
                IQueryable<Subject> listSub=_subjectRepository.Entities;
                Subject sub = listSub.Where(x => x.Id == subject.Id).FirstOrDefault();
                sub.SubjectName = subject.SubjectName;
                sub.Summary = subject.Summary;
                Subject tempSub = listSub.Where(x => x.SubjectName == subject.SubjectName).FirstOrDefault();
                if (tempSub!=null)
                {
                    if (tempSub.Id!=sub.Id)
                    {
                       return new OperationResult(OperationResultType.Error, "更新失败,专题名称已经存在！");
                    }
                }
                if (listFile.Count == 0)
                {
                   int count=  _subjectRepository.Update(sub);
                   if (count>0)
                   {
                       return new OperationResult(OperationResultType.Success, "更新成功！");
                   }
                   else
                   {
                       return new OperationResult(OperationResultType.Error, "更新失败！");
                   }
                }
                else
                {
                    if (sub.ParentId == null)
                    {
                        string strConPath = sub.Path;
                        string strSavePath = AppDomain.CurrentDomain.BaseDirectory + strConPath;
                        //删除本地文件和数据库数据
                        Whiskey.Web.Helper.FileHelper.DeleteFolder(rootPath + sub.Path);
                        List<Subject> listSubject = new List<Subject>();
                        listSubject.Add(sub);
                        listSubject.AddRange(sub.Children);
                        int index =_subjectRepository.Delete(listSubject);
                        if (index== 0)
                        {
                            return new OperationResult(OperationResultType.Error, "编辑失败");
                        }
                        List<string> listPath = new List<string>();
                        if (listFile != null && listFile.Count > 0)
                        {
                            for (int i = 0; i < listFile.Count; i++)
                            {
                                ZipHelper.UploadZip(listFile[i].InputStream, strSavePath, listFile[i].FileName, out listPath);
                            }
                        }
                        List<Subject> listTempSub = new List<Subject>();
                        if (listPath.Count > 0)
                        {
                            foreach (var path in listPath)
                            {
                                int lastCount = path.LastIndexOf("/");
                                string strName = path.Substring(lastCount + 1);
                                Subject tempSubJect = new Subject();
                                tempSubJect.SubjectName = strName;
                                tempSubJect.Summary = subject.Summary;
                                tempSubJect.Path = strConPath + path;
                                tempSubJect.OperatorId = AuthorityHelper.OperatorId;
                                tempSubJect.IsEnabled = false;
                                listTempSub.Add(tempSubJect);
                            }
                        }
                        subject.OperatorId = AuthorityHelper.OperatorId;
                        subject.Path = strConPath;
                        subject.Children = listTempSub;
                        int count = _subjectRepository.Insert(subject);
                        if (count > 0)
                        {
                            return new OperationResult(OperationResultType.Success, "编辑成功");
                        }
                        else
                        {
                            return new OperationResult(OperationResultType.Error, "编辑失败");
                        }

                    }
                    else
                    {
                        return new OperationResult(OperationResultType.Error, "编辑失败");
                    }
                }
                
            }
            catch (Exception)
            {
                return new OperationResult(OperationResultType.Error, "更新失败，程序出错！");
            }
            
        }
        #endregion

        #region 移除数据
        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="ids">要移除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Remove(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _subjectRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_subjectRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "移除成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "移除失败！错误如下：" + ex.Message);
            }
        }

        #endregion

        #region 恢复数据
        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="ids">要恢复的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Recovery(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _subjectRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsDeleted = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_subjectRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "恢复成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "恢复失败！错误如下：" + ex.Message);
            }
        }

        #endregion

        #region 删除数据
        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="ids">要删除的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Delete(params int[] ids)
        {
            try
            {
                List<Subject> listSub = new List<Subject>();
                IQueryable<Subject> listSubject = _subjectRepository.Entities;
                for (int i = 0; i < ids.Length; i++)
                {
                    int id = ids[i];
                    Subject subject = listSubject.Where(x => x.Id ==id).FirstOrDefault();
                    if (subject!=null)
                    {
                        if (subject.ParentId==null)
                        {
                            listSub.Add(subject);
                            listSub.AddRange(subject.Children);
                            string path = AppDomain.CurrentDomain.BaseDirectory + subject.Path.Substring(0,subject.Path.Length-1);
                            Whiskey.Web.Helper.FileHelper.DeleteFiles(path);
                        }
                        else
                        {
                            Whiskey.Web.Helper.FileHelper.Delete(subject.Path);
                        }
                    }
                }
				ids.CheckNotNull("ids");
                int count = _subjectRepository.Delete(listSub);
                if (count >0 )
                {
                    return new OperationResult(OperationResultType.Success, "删除成功！");
                }
                else
                {
                    return new OperationResult(OperationResultType.Error,"删除失败！");
                }
				
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "删除失败！错误如下：" + ex.Message);
            }

        }

        #endregion

        #region 启用数据
        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="ids">要启用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Enable(params int[] ids)
        {
            
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _subjectRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = true;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_subjectRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "启用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "启用失败！错误如下：" + ex.Message);
            }
		}

        #endregion

        #region 禁用数据
        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="ids">要禁用的编号</param>
        /// <returns>业务操作结果</returns>
        public OperationResult Disable(params int[] ids)
        {
            try
            {
				ids.CheckNotNull("ids");
				UnitOfWork.TransactionEnabled = true;
				var entities = _subjectRepository.Entities.Where(m => ids.Contains(m.Id));
				foreach (var entity in entities) {
					entity.IsEnabled = false;
					entity.UpdatedTime = DateTime.Now;
					entity.OperatorId=AuthorityHelper.OperatorId;
					_subjectRepository.Update(entity);
				}
				return UnitOfWork.SaveChanges() > 0? new OperationResult(OperationResultType.Success, "禁用成功！"): new OperationResult(OperationResultType.NoChanged,"数据没有变化！");
            }catch (Exception ex){
                return new OperationResult(OperationResultType.Error, "禁用失败！错误如下：" + ex.Message);
            }
        }
        #endregion

        #region 设为首页
        /// <summary>
        /// 设为首页
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public OperationResult SetHomePage(int Id)
        {
            try
            {
                IQueryable<Subject> listSubject = _subjectRepository.Entities;
                Subject subject = listSubject.Where(x => x.Id == Id).FirstOrDefault();
                subject.IsEnabled = true;
                Subject child = listSubject.Where(x => x.ParentId == subject.ParentId && x.IsEnabled == true).FirstOrDefault();
                if (child != null)
                {
                    child.IsEnabled = false;
                    _subjectRepository.Update(child);
                }

                int count = _subjectRepository.Update(subject);
                
                return new OperationResult(OperationResultType.Success, "设置成功！");
            }
            catch (Exception)
            {
                return new OperationResult(OperationResultType.Error, "设置失败！");
            }
            
        }
        #endregion


        #endregion
    }
}
