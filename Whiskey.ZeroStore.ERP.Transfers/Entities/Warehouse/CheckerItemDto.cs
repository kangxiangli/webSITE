
//   This file was generated by T4 code generator Dto_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Web;
using System.ComponentModel.DataAnnotations;
using Whiskey.Core.Data;
using System.ComponentModel;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

namespace Whiskey.ZeroStore.ERP.Transfers
{
    [Serializable]
    public class CheckerItemDto : IAddDto, IEditDto<int>,ICloneable
    {
        #region 注销代码
                
        //[Display(Name = "盘点标识符")]
        //public string CheckGuid { get; set; }
        //[Display(Name = "待盘编号")]
        //public virtual string CheckCount { get; set; }//多个编号之间用逗号隔开

        //[Display(Name = "已盘编号")]
        //public virtual string CheckedCount { get; set; }
        //[Display(Name = "有效数量")]
        //public virtual string ValidCount { get; set; }
        //[Display(Name = "无效数量")]
        //public virtual string InvalidCount { get; set; }
        //[Display(Name = "缺货数量")]
        //public virtual string MissingCount { get; set; }
        //[Display(Name = "余货数量")]
        //public virtual string ResidueCount { get; set; }
        //public virtual int CheckerState { get; set; }//1:盘点中2：中断 3：完成

        //[Display(Name = "盘点备注")]
        //public virtual string Notes { get; set; }
        #endregion
        public int Id { get; set; }

        [DisplayName("盘点数据")]
        public virtual int? CheckerId { get; set; }

        [Display(Name = "盘点标识符")]
        [StringLength(20)]
        public virtual string CheckGuid { get; set; }

        [Display(Name = "盘点商品")]
        public virtual int? ProductId { get; set; }

        [Display(Name = "商品一维码")]
        public virtual string ProductBarcode { get; set; }

        [Display(Name = "盘点结果")]
        public virtual int CheckerItemType { get; set; }


        /// <summary>
        /// 深复制
        /// </summary>
        /// <returns></returns>
        public CheckerItemDto DeepClone()
        {

            using (Stream objectStream = new MemoryStream())
            {
                IFormatter formatter = new BinaryFormatter();
                formatter.Serialize(objectStream,this);
                objectStream.Seek(0, SeekOrigin.Begin);
                return formatter.Deserialize(objectStream) as CheckerItemDto;
            }
        }

        /// <summary>
        /// 浅复制
        /// </summary>
        /// <returns></returns>
        public CheckerItemDto ShallowClone()
        {
            return Clone() as CheckerItemDto;
        }

        public object Clone()
        {
            return this.MemberwiseClone();
        }
    }
}
