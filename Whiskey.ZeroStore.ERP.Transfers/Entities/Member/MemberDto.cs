
//   This file was generated by T4 code generator Dto_Creater.tt.



using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Web;
using System.ComponentModel.DataAnnotations;
using Whiskey.Core.Data;
using Whiskey.ZeroStore.ERP.Models;

namespace Whiskey.ZeroStore.ERP.Transfers
{
    [Serializable]
    public class MemberDto : IAddDto, IEditDto<int>
    {

        public MemberDto()
        {             
            Gender = 0;
            Balance = 0;
            Score = 0;
            MobileInfos = new List<MobileInfo>();
            MemberFigures = new List<MemberFigure>();
            //MemberRoleIds = new List<int>();
        }

        #region MemberDto


        [Display(Name = "归属店铺")]
        public virtual Int32? StoreId { get; set; }

        [Display(Name = "店铺名称")]
        public virtual string StoreName { get; set; }

        [Display(Name = "会员等级")]
        public virtual Int32? LevelId { get; set; }

        [Display(Name = "注册类型")]
        public virtual RegisterFlag RegisterType { get; set; }

        [Display(Name = "会员昵称")]        
        public virtual String MemberName { get; set; }

        [Display(Name = "第三方登录标识")]
        [StringLength(50)]
        public virtual string ThirdLoginId { get; set; }

        [Display(Name = "第三方登录类型")]
        public virtual ThirdLoginFlag? ThirdLoginType { get; set; }

        [Display(Name = "唯一标识")]
        public virtual string UniquelyIdentifies { get; set; }

        [Display(Name = "会员密码")]
        [Required(ErrorMessage = "不能为空！")]
        [StringLength(16, MinimumLength = 6, ErrorMessage = "至少{2}～{1}个字符")]
        [Compare("SecondPass",ErrorMessage="输入两次密码不一致")]
        public virtual String MemberPass { get; set; }

        [Display(Name = "确认密码")]
        [Required(ErrorMessage = "不能为空！")]
        [StringLength(16, MinimumLength = 6, ErrorMessage = "至少{2}～{1}个字符")]
        [Compare("MemberPass", ErrorMessage = "输入两次密码不一致")]
        public virtual string SecondPass { get; set; }

        [Display(Name = "重置密码")]        
        [StringLength(16, MinimumLength = 6, ErrorMessage = "至少{2}～{1}个字符")]
        [Compare("SecondReset", ErrorMessage = "输入两次密码不一致")]
        public virtual String ResetPass { get; set; }

        [Display(Name = "确认重置")]        
        [StringLength(16, MinimumLength = 6, ErrorMessage = "至少{2}～{1}个字符")]
        [Compare("ResetPass", ErrorMessage = "输入两次密码不一致")]
        public virtual string SecondReset { get; set; }

        [Display(Name = "会员类型")]
        public virtual int MemberTypeId { get; set; }

        [Display(Name = "搭配师")]
        public virtual int? CollocationId { get; set; }

        [Display(Name = "搭配师名称")]
        public virtual string CollocationName { get; set; }

        [Display(Name = "账户余额")]
        public virtual Decimal Balance { get; set; }

        [Display(Name = "账户积分")]
        public virtual Decimal Score { get; set; }

        [Display(Name = "会员卡号")]
        [StringLength(50, ErrorMessage = "不能超过50个字符")]
        public virtual String CardNumber { get; set; }

        [Display(Name = "电子邮箱")]
        [StringLength(50, ErrorMessage = "不能超过50个字符")]
        [DataType(DataType.EmailAddress)]
        public virtual String Email { get; set; }

        [Display(Name = "手机号码")]
        [StringLength(11, ErrorMessage = "不能超过{1}个字符")]
        //[Required(ErrorMessage="请填写手机号码")]
        public virtual String MobilePhone { get; set; }

        [Display(Name = "真实姓名")]
        [StringLength(10, MinimumLength = 1, ErrorMessage = "至少{2}～{1}个字符")]
        public virtual String RealName { get; set; }

        [Display(Name = "会员性别")]
        public virtual int Gender { get; set; }

        [Display(Name = "出生日期")]
        public virtual DateTime? DateofBirth { get; set; }

        [Display(Name = "创建时间")]
        public virtual DateTime? CreateTime { get; set; }

        [Display(Name = "身份证号")]
        [StringLength(20)]
        public virtual String IDCard { get; set; }

        [Display(Name = "会员照片")]
        [StringLength(200)]
        public virtual string UserPhoto { get; set; }         

        [Display(Name = "锁定店铺")]
        public virtual bool IsLockedStore { get; set; }

        [Display(Name = "备注信息")]
        [StringLength(200)]
        public virtual String Notes { get; set; }

        //[Display(Name = "扩展属性")]
        //public String Extensions { get; set; }

        [Display(Name = "实体标识")]
        public virtual Int32 Id { get; set; }
        /// <summary>
        /// 一个只在dto中使用的唯一标识
        /// </summary>
        public string Uuid { get; set; }

      
        [NonSerialized]
        [System.Xml.Serialization.XmlIgnore]
        private ICollection<MobileInfo> _MobileInfos;
        public ICollection<MobileInfo> MobileInfos
        {
            get { return _MobileInfos; }
            set { _MobileInfos = value; }
        }

        [NonSerialized]
        [System.Xml.Serialization.XmlIgnore]
        private ICollection<MemberFigure> _MemberFigures;
        public ICollection<MemberFigure> MemberFigures
        {
            get { return _MemberFigures; }
            set { _MemberFigures = value; }
        }
        // public virtual ICollection<MobileInfo> MobileInfos { get; set; }
        #endregion
        //public ICollection<int> MemberRoleIds { get; set; }
    }
}
