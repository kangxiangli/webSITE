<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ output extension=".cshtml" encoding="utf-8" #>
<#@ output extension=".st" encoding="utf-8" #>
<#@include file="$(SolutionDir)\Whiskey.ZeroStore.ERP.Models\T4\MultipleOutputHelper.ttinclude"#> 

<#
string solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)"); //解决方案路径
string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)"); //项目路径
var manager = Manager.Create(Host, GenerationEnvironment); 
string ClassName = "Test1";        //类名称
string Area = "Test";					//区域名称
string MODULENAME = "测试模块";				//模块名称,对应ERP左侧菜单
	
string fileModelEntitiesDirPath = Path.Combine(solutionPath,"Whiskey.ZeroStore.ERP.Models","Entities",Area);//Model Enties文件夹路径
if(!Directory.Exists(fileModelEntitiesDirPath))
{
	Directory.CreateDirectory(fileModelEntitiesDirPath);
}
string fileModelPath = Path.Combine(fileModelEntitiesDirPath,ClassName+".cs");//Model文件路径
string fileModelConfigurationDirPath = Path.Combine(solutionPath,"Whiskey.ZeroStore.ERP.Models","Configurations",Area);//Model Configuration文件夹路径
if(!Directory.Exists(fileModelConfigurationDirPath))
{
	Directory.CreateDirectory(fileModelConfigurationDirPath);
}
string fileModelConfigurationPath = Path.Combine(fileModelConfigurationDirPath,ClassName+"Configuration.cs");//Configuration文件路径
string fileWebSiteDirPath = Path.Combine(solutionPath,"Whiskey.ZeroStore.ERP.Website","Areas",Area);//WebSite Areas文件夹路径
string fileWebSiteModelPath = Path.Combine(fileWebSiteDirPath,"Models",ClassName+".cs");//WebSite Model文件路径
string fileWebSiteViewsPath = Path.Combine(fileWebSiteDirPath,"Views",ClassName);//WebSite Views 文件夹路径
string fileWebSiteViewsTemplatesPath = Path.Combine(fileWebSiteViewsPath,"Templates");//WebSite Views Templates 导出文件夹路径
if(!Directory.Exists(fileWebSiteViewsPath))
{
	Directory.CreateDirectory(fileWebSiteViewsPath);
}
if(!Directory.Exists(fileWebSiteViewsTemplatesPath))
{
	Directory.CreateDirectory(fileWebSiteViewsTemplatesPath);
}
string fileWebSiteIndexPath = Path.Combine(fileWebSiteViewsPath,"Index.cshtml");//Index文件路径
string fileWebSiteCreatePath = Path.Combine(fileWebSiteViewsPath,"Create.cshtml");//Create文件路径
string fileWebSiteUpdatePath = Path.Combine(fileWebSiteViewsPath,"Update.cshtml");//Update文件路径
string fileWebSiteViewPath = Path.Combine(fileWebSiteViewsPath,"View.cshtml");//View文件路径
string fileWebSiteExporterPath = Path.Combine(fileWebSiteViewsTemplatesPath,"Exporter.st");//Exporter文件路径

string fileWebSiteControllerDirPath = Path.Combine(fileWebSiteDirPath,"Controllers");// WebSite Controller 文件夹路径
if(!Directory.Exists(fileWebSiteControllerDirPath))
{
	Directory.CreateDirectory(fileWebSiteControllerDirPath);
}
string fileWebSiteControllerPath = Path.Combine(fileWebSiteControllerDirPath,ClassName+"Controller.cs");//Controller文件路径

string fileServiceDirPath = Path.Combine(solutionPath,"Whiskey.ZeroStore.ERP.Services");//Services文件路径
string fileTransferDirPath = Path.Combine(solutionPath,"Whiskey.ZeroStore.ERP.Transfers");//Transfers文件路径
string fileServiceContractDirPath = Path.Combine(fileServiceDirPath,"Contracts",Area);//Contracts 文件夹路径
if(!Directory.Exists(fileServiceContractDirPath))
{
	Directory.CreateDirectory(fileServiceContractDirPath);
}
string fileServiceContractPath = Path.Combine(fileServiceContractDirPath,"I"+ClassName+"Contract.cs");//Contract文件路径

string fileServiceImplementDirPath = Path.Combine(fileServiceDirPath,"Implements",Area);//Service Implements 文件夹路径
if(!Directory.Exists(fileServiceImplementDirPath))
{
	Directory.CreateDirectory(fileServiceImplementDirPath);
}
string fileServiceImplementPath = Path.Combine(fileServiceImplementDirPath,ClassName+"Service.cs");//Service文件路径

string fileTransferEntitiesDirPath = Path.Combine(fileTransferDirPath,"Entities",Area);//Transfer Entities 文件夹路径
if(!Directory.Exists(fileTransferEntitiesDirPath))
{
	Directory.CreateDirectory(fileTransferEntitiesDirPath);
}
string fileTransferPath = Path.Combine(fileTransferEntitiesDirPath,ClassName+"Dto.cs");//Dto文件路径

string fileSqlDirPath = Path.Combine(solutionPath,"Whiskey.ZeroStore.ERP.Models","ModuleSQL",Area);//生成模块SQL文件夹路径
if(!Directory.Exists(fileSqlDirPath))
{
	Directory.CreateDirectory(fileSqlDirPath);
}
string fileSqlPath = Path.Combine(fileSqlDirPath,ClassName+".sql");//sql文件路径

#>


//创建WebSite Index文件
<# manager.StartNewFile(fileWebSiteIndexPath); #>

<div class="row">
    <div class="panel panel-search">
        <div class="panel-heading clearfix">
            <div class="col-md-4 panel-title">
                <h5><i class="fa fa-search"></i> <span>查询条件</span></h5>
            </div>
            <div class="col-md-8 text-right">
                <input class="switcher" type="checkbox" data-class="switcher-default" checked="checked">
            </div>
        </div>
        <div class="panel-body">
            <form class="form-horizontal form-search">
                <div class="col-md-4">
                    <div class="form-group no-margin-hr">
                        <label class="control-label col-md-4">名称</label>
                        <div class="col-md-8">
                            @Html.TextBox("Name", "", new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group no-margin-hr">
                        <label class="control-label col-md-4">创建日期</label>
                        <div class="col-md-8">
                            <div class="input-daterange input-group">
                                @Html.TextBox("StartDate", "", new { @class = "start-date input-sm form-control", @placeholder = "开始日期" })
                                <span class="input-group-addon">至</span>
                                @Html.TextBox("EndDate", "", new { @class = "end-date input-sm form-control", @placeholder = "结束日期" })
                            </div>
                        </div>
                    </div>
                </div>

            </form>
        </div>
        <div class="panel-footer text-right clearfix ">

            <div class="pull-left">
                <button id="Search" title="按条件搜索数据" type="button" class="btn btn-primary btn-padding-right"><i class="fa fa-search"></i> <span>搜索</span></button>
                <button id="Clear" title="重置搜索栏的各项输入" type="button" class="btn btn-default btn-padding-right"><i class="fa fa-refresh"></i> <span>清除</span></button>
            </div>

            <div class="pull-right">
                <div class="button-normal">
                    <button id="Create" title="创建一条新数据" type="button" class="btn btn-success btn-padding-right"><i class="fa fa-plus"></i> <span>新增数据</span></button>
                    <button id="Print" title="打印预览" type="button" class="btn btn-facebook btn-padding-right"><i class="fa fa-print"></i> <span>打印预览</span></button>
                    <button id="Export" title="导出文件" type="button" class="btn btn-warning btn-padding-right"><i class="fa fa-save"></i> <span>导出文件</span></button>
                    <button id="RemoveAll" title="将选择的项移至回收站" type="button" class="btn btn-danger btn-padding-right"><i class="fa fa-remove"></i> <span>移除所选</span></button>
                </div>
                <div class="button-recycle">
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="panel panel-list">
        <div class="panel-heading clearfix">
            <div class="col-md-4 panel-title">
                <h5><i class="fa fa-list"></i> <span>数据列表</span></h5>
            </div>
            <div class="col-md-8 text-right">
                <span><input class="enabler" type="checkbox" data-class="switcher-default" checked="checked"></span>
                <span style="margin-left:20px;"><input class="trusher" type="checkbox" data-class="switcher-default" checked="checked"></span>
            </div>
        </div>
        <table class="table table-list table-hover valign-middle" width="100%">
            <thead>
            </thead>
        </table>
    </div>
</div>
@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $.whiskey.datatable.instance = $(".table-list").dataTable({
                "bScrollCollapse": false,
                "sAjaxSource": "@Url.Action("List")",
                "fnServerParams": function (aoData) {
                    aoData.push($.whiskey.web.formData().get());
                },
                "aoColumns": [{
                    "bVisible": false,
                    "bSearchable": false,
                    "sName": "Id",
                    "mData": "Id"
                },
                {
                    "sTitle": $.whiskey.datatable.tplTitleCheckbox(),
                    "sName": "Id",
                    "bSortable": false,
                    "bSearchable": false,
                    "mData": function (data) {
                        return $.whiskey.datatable.tplListCheckbox(data.Id);
                    }
                },
                {
                    "sTitle": "编号",
                    "bSortable": false,
                    "sName": "RowNumber",
                    "mData": function (data) {
                        var index = data.iDisplayIndex + 1;
                        return '' + index + '';
                    }
                },
                {
                    "sTitle": "名称",
                    "bSortable": false,
                    "sName": "Name",
                    "mData": function (data) {
                        return data.Name;
                    },
                },
                {
                    "sTitle": "创建时间",
                    "bSortable": false,
                    "sName": "CreatedTime",
                    "mData": function (data) {
                        return $.whiskey.tools.dateFormat(data.CreatedTime);
                    },
                },
                {
                    "sTitle": "操作人",
                    "bSortable": false,
                    "sName": "OperatorName",
                    "mData": function (data) {
                        return data.OperatorName;
                    },
                },
                {
                    "sTitle": "控制操作",
                    "bSortable": false,
                    "bSearchable": false,
                    "mData": function (data) {
                        return $.whiskey.datatable.controller(data);
                    }
                }
                ]
            });

            $("#Create").on("click", function () {
                var dialog = new $.whiskey.web.ajaxDialog({
                    caption: "创建数据",
                    actionUrl: "@Url.Action("Create")",
                    lockButton: $(this),
                    formValidator: function () {
                        var $form = $(".modal-form");
                        if (!$form.valid()) {
                            return false;
                        } else {
                            return true;
                        }
                    },
                    postComplete: function () {
                        $.whiskey.datatable.reset(false);
                        return true;
                    },
                });
            });

            $("#Print").on("click", function () {
                var list = $.whiskey.web.getIdByChecked(".table-list td input[type=checkbox]");
                if (list.length > 0) {
                    var printer = $.whiskey.printer.ajaxPreview({
                        actionUrl: "@Url.Action("Print")",
                        lockButton: $(this),
                        topMargin: "2%",
                        leftMargin: "4%",
                        contentWidth: "93.5%",
                        contentHeight: "100%",
                        params: list
                    });
                } else {
                    $.whiskey.web.alert({
                        type: "info",
                        content: "请至少选择一条数据！",
                        callback: function () {
                        }
                    });
                }
            });


            $("#Export").on("click", function () {
                var printer = $.whiskey.exporter.ajaxExport({
                    actionUrl: "@Url.Action("Export")",
                    lockButton: $(this),
					version:2,
                    params: {
                        conditions: $.whiskey.web.formData().getJSON(),
                    }
                });
            });

            $("#RemoveAll").on("click", function () {
                var list = $.whiskey.web.getIdByChecked(".table-list td input[type=checkbox]");
                if (list.length > 0) {
                    var confirm = new $.whiskey.web.ajaxConfirm({
                        question: "确认要将这些数据移至回收站吗？",
                        notes: "提示：数据移动到回收站后，随时可以从回收站中将其恢复",
                        actionUrl: "@Url.Action("Remove")",
                        params: list,
                        complete: function () {
                            $.whiskey.datatable.reset(false);
                        }
                    });
                } else {
                    $.whiskey.web.alert({
                        type: "info",
                        content: "请至少选择一条数据！",
                        callback: function () {
                        }
                    });
                }
            });

            $("#RecoveryAll").on("click", function () {
                var list = $.whiskey.web.getIdByChecked(".table-list td input[type=checkbox]");
                if (list.length > 0) {
                    var confirm = new $.whiskey.web.ajaxConfirm({
                        question: "确认要将这些数据恢复吗？",
                        notes: "提示：将数据从回收站移动至正常数据列表里",
                        actionUrl: "@Url.Action("Recovery")",
                        params: list,
                        complete: function () {
                            $.whiskey.datatable.reset(false);
                        }
                    });
                } else {
                    $.whiskey.web.alert({
                        type: "info",
                        content: "请至少选择一条数据！",
                        callback: function () {
                        }
                    });
                }
            });

            $("#Search").on("click", function () {
                $.whiskey.datatable.reset(false);
            });

            $("#Clear").on("click", function () {
                $.whiskey.web.clearForm(".form-search");
            });


        });

        function View(sender, Id) {
            var view = new $.whiskey.web.ajaxView({
                caption: "详细信息",
                actionUrl: "@Url.Action("View")",
                params: { Id: Id },
                lockButton: $(sender),
            });
        }


        function Update(sender, Id) {
            var dialog = new $.whiskey.web.ajaxDialog({
                caption: "修改信息",
                actionUrl: "@Url.Action("Update")",
                getParams: { Id: Id },
                lockButton: $(sender),
                formValidator: function () {
                    var $form = $(".modal-form");
                    if (!$form.valid()) {
                        return false;
                    } else {
                        return true;
                    }
                },
                postComplete: function () {
                    $.whiskey.datatable.reset(true);
                    return true;
                },
            });
        }

        function Remove(sender, Id) {
            var confirm = new $.whiskey.web.ajaxConfirm({
                question: "确认要将这条数据移至回收站吗？",
                notes: "提示：数据移动到回收站后可从随时将其恢复",
                actionUrl: "@Url.Action("Remove")",
                params: { Id: Id },
                lockButton: $(sender),
                complete: function () {
                    $.whiskey.datatable.reset(true);
                }
            });
        }

        function Recovery(sender, Id) {
            var confirm = new $.whiskey.web.ajaxConfirm({
                question: "确认要恢复这条数据吗？",
                notes: "提示：将数据从回收站移动至正常数据列表里",
                actionUrl: "@Url.Action("Recovery")",
                params: { Id: Id },
                lockButton: $(sender),
                complete: function () {
                    $.whiskey.datatable.reset(true);
                }
            });
        }

        function Enable(sender, Id) {
            var confirm = new $.whiskey.web.ajaxConfirm({
                question: "确认要启用这条数据吗？",
                notes: "提示：启用才可以在任何地方使用",
                actionUrl: "@Url.Action("Enable")",
                params: { Id: Id },
                lockButton: $(sender),
                complete: function () {
                    $.whiskey.datatable.reset(true);
                }
            });
        }

        function Disable(sender, Id) {
            var confirm = new $.whiskey.web.ajaxConfirm({
                question: "确认要禁用这条数据吗？",
                notes: "提示：禁用后数据将不在其他任何地方使用",
                actionUrl: "@Url.Action("Disable")",
                params: { Id: Id },
                lockButton: $(sender),
                complete: function () {
                    $.whiskey.datatable.reset(true);
                }
            });
        }

    </script>
}

<# manager.EndBlock(); #>


//创建WebSite Update文件
<# manager.StartNewFile(fileWebSiteUpdatePath); #>

@using Whiskey.ZeroStore.ERP.Transfers
@using Whiskey.Utility.Extensions
@model <#= ClassName #>Dto

<style>

</style>

<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.Name) :
    </label>
    <div class="col-md-10">
        @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
    </div>
</div>

@Html.HiddenFor(f => f.Id)

<script>
    $(function () {
        

    });
</script>

<# manager.EndBlock(); #>


//创建WebSite Create文件
<# manager.StartNewFile(fileWebSiteCreatePath); #>

@using Whiskey.ZeroStore.ERP.Transfers
@model <#= ClassName #>Dto

<style>

</style>

<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.Name) :
    </label>
    <div class="col-md-10">
        @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
    </div>
</div>

<script>
    $(function () {
        

    });
</script>

<# manager.EndBlock(); #>


//创建WebSite View文件
<# manager.StartNewFile(fileWebSiteViewPath); #>

@using Whiskey.ZeroStore.ERP.Models
@model <#= ClassName #>

<style>

</style>

<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.Name) :
    </label>
    <div class="col-md-10">
        @Model.Name
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.UpdatedTime) :
    </label>
    <div class="col-md-10">
        @Model.UpdatedTime
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.CreatedTime) :
    </label>
    <div class="col-md-10">
        @Model.CreatedTime
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.IsEnabled) :
    </label>
    <div class="col-md-10">
        @UiHelper.showEnabled(Model.IsEnabled)
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.IsDeleted) :
    </label>
    <div class="col-md-10">
        @UiHelper.showDeleted(Model.IsDeleted)
    </div>
</div>
<div class="form-group">
    <label class="control-label col-md-2">
        @Html.DisplayNameFor(m => m.OperatorId) :
    </label>
    <div class="col-md-10">
        @UiHelper.showOperator(Model.Operator)
    </div>
</div>

<script>
    $(function () {
        

    });
</script>

<# manager.EndBlock(); #>


//创建WebSite View Exporter.st文件
<# manager.StartNewFile(fileWebSiteExporterPath); #>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title></title>
	<style type="text/css" media="all">
        table{
            font-size:14px;
			text-align:center;
			line-height:25px;
			word-break: break-all;
			border:solid 1px rgb(149,119,205);
			border-collapse:collapse;
        }
		.thumbnail-wrapper{
			display:block;
			width:80px;
			height:80px;
			overflow:hidden;
			border:1px solid #eaeaea;
			margin:0 auto 0 auto;
		}
		.thumbnail-wrapper img{
			margin:2px;
			max-width:74px;
		}
    </style>
</head>
<body>
    <table width="100%" border="1">
	<caption><h4>零库房数据报表</h4><br></caption>
        <thead>
            <tr>
				<th>编号</th>
                <th>名称</th>
                <th>更新时间</th>
                <th>操作人员</th>
            </tr>
        </thead>
        <tbody>
            $list:{
            <tr>
				<td>$i$</td>
                <td>$it.Name</td>
                <td>$it.UpdatedTime$</td>
                <td>$it.OperatorName$</td>
            </tr>
            }$
        </tbody>
    </table>
</body>
</html>


<# manager.EndBlock(); #>

//创建WebSite Controller文件
<# manager.StartNewFile(fileWebSiteControllerPath); #>
using System;
using System.IO;
using System.Web;
using Whiskey.Web.Helper;
using Antlr3.ST;
using Antlr3.ST.Language;
using System.Linq;
using System.Linq.Expressions;
using System.Web.Mvc;
using Whiskey.Utility.Class;
using Whiskey.Utility.Filter;
using Whiskey.Utility.Logging;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers;
using Whiskey.ZeroStore.ERP.Website.Controllers;
using Whiskey.ZeroStore.ERP.Website.Extensions.Attribute;
using Whiskey.Core.Data.Extensions;
using Whiskey.ZeroStore.ERP.Website.Extensions.Web;

namespace Whiskey.ZeroStore.ERP.Website.Areas.<#= Area #>.Controllers
{
    [License(CheckMode.Verify)]
    public class <#= ClassName #>Controller : BaseController
    {
        protected static readonly ILogger _Logger = LogManager.GetLogger(typeof(<#= ClassName #>Controller));

        protected readonly I<#= ClassName #>Contract _<#= ClassName #>Contract;

        public <#= ClassName #>Controller(
            I<#= ClassName #>Contract _<#= ClassName #>Contract
            )
        {
            this._<#= ClassName #>Contract = _<#= ClassName #>Contract;
        }

        [Layout]
        public ActionResult Index()
        {
            return View();
        }

        /// <summary>
        /// 载入创建数据
        /// </summary>
        /// <returns></returns>
        public ActionResult Create()
        {
            return PartialView();
        }

        /// <summary>
        /// 创建数据
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
		[Log]
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult Create(<#= ClassName #>Dto dto)
        {
            var result = _<#= ClassName #>Contract.Insert(dto);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 提交数据
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
		[Log]
        [HttpPost]
        [ValidateInput(false)]
        public ActionResult Update(<#= ClassName #>Dto dto)
        {
            var result = _<#= ClassName #>Contract.Update(dto);
            return Json(result, JsonRequestBehavior.AllowGet);
        }


        /// <summary>
        /// 载入修改数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public ActionResult Update(int Id)
        {
            var result = _<#= ClassName #>Contract.Edit(Id);
            return PartialView(result);
        }


        /// <summary>
        /// 查看数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		[Log]
        public ActionResult View(int Id)
        {
            var result = _<#= ClassName #>Contract.View(Id);
            return PartialView(result);
        }

        /// <summary>
        /// 查询数据
        /// </summary>
        /// <returns></returns>
        public ActionResult List()
        {
            GridRequest request = new GridRequest(Request);
            Expression<Func<<#= ClassName #>, bool>> predicate = FilterHelper.GetExpression<<#= ClassName #>>(request.FilterGroup);
            var count = 0;

            var list = (from s in _<#= ClassName #>Contract.Entities.Where<<#= ClassName #>, int>(predicate, request.PageCondition, out count)
                        select new
                        {
                            s.Id,
                            s.IsDeleted,
                            s.IsEnabled,
                            s.CreatedTime,
							OperatorName = s.Operator.Member.RealName,
							s.Name,

                        }).ToList();
            var data = new GridData<object>(list, count, request.RequestInfo);

            return Json(data, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 移除数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		[Log]
        [HttpPost]
        public ActionResult Remove(int[] Id)
        {
            var result = _<#= ClassName #>Contract.DeleteOrRecovery(true, Id);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 恢复数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		[Log]
        [HttpPost]
        public ActionResult Recovery(int[] Id)
        {
            var result = _<#= ClassName #>Contract.DeleteOrRecovery(false, Id);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 启用数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		[Log]
        [HttpPost]
        public ActionResult Enable(int[] Id)
        {
            var result = _<#= ClassName #>Contract.EnableOrDisable(true, Id);
            return Json(result, JsonRequestBehavior.AllowGet);
        }
		
        /// <summary>
        /// 禁用数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		[Log]
        [HttpPost]
        public ActionResult Disable(int[] Id)
        {
            var result = _<#= ClassName #>Contract.EnableOrDisable(false, Id);
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// 导出数据
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
		[Log]
        public ActionResult Export()
        {
			var path = Path.Combine(HttpRuntime.AppDomainAppPath, EnvironmentHelper.TemplatePath(this.RouteData));
            GridRequest request = new GridRequest(Request);
            Expression<Func<<#= ClassName #>, bool>> predicate = FilterHelper.GetExpression<<#= ClassName #>>(request.FilterGroup);
			var query = _<#= ClassName #>Contract.Entities.Where(predicate);
			var list = (from s in query
						select new
						{
							s.UpdatedTime,
							OperatorName = s.Operator.Member.RealName,
							s.Name,

						}).ToList();
			var group = new StringTemplateGroup("all", path, typeof(TemplateLexer));
            var st = group.GetInstanceOf("Exporter");
            st.SetAttribute("list", list);
            return FileExcel(st, "<#= MODULENAME #>");
        }

    }
}

<# manager.EndBlock(); #>


//创建Model Configuration文件
<# manager.StartNewFile(fileModelConfigurationPath); #>

using System.ComponentModel.DataAnnotations.Schema;
using Whiskey.Core.Data.Entity;

namespace Whiskey.ZeroStore.ERP.Models
{
    public class <#= ClassName #>Configuration : EntityConfigurationBase<<#= ClassName #>, int>
    {
        public <#= ClassName #>Configuration()
        {
            ToTable("<#= Area.Substring(0,1) #>_<#= ClassName #>");
            Property(m => m.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
        }
    }
}

<# manager.EndBlock(); #>


//创建Model Entities文件
<# manager.StartNewFile(fileModelPath); #>

using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Whiskey.Core.Data;

namespace Whiskey.ZeroStore.ERP.Models
{
	public class <#= ClassName #> : EntityBase<int>
	{
		[Display(Name = "名称")]
        [StringLength(20, ErrorMessage = "最大长度不能超过{1}个字符")]
        public virtual string Name { get; set; }
		
		[ForeignKey("OperatorId")]
		public virtual Administrator Operator { get; set; }
	}
}

<# manager.EndBlock(); #>

//创建Service Contracts文件
<# manager.StartNewFile(fileServiceContractPath); #>

using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Transfers;

namespace Whiskey.ZeroStore.ERP.Services.Contracts
{
    public interface I<#= ClassName #>Contract : IBaseContract<<#= ClassName #>, <#= ClassName #>Dto>
    {
    }
}

<# manager.EndBlock(); #>

//创建Service Implement文件
<# manager.StartNewFile(fileServiceImplementPath); #>

using AutoMapper;
using System;
using System.Linq;
using Whiskey.Core;
using Whiskey.Core.Data;
using Whiskey.Utility;
using Whiskey.Utility.Data;
using Whiskey.Web.Helper;
using Whiskey.ZeroStore.ERP.Models;
using Whiskey.ZeroStore.ERP.Services.Contracts;
using Whiskey.ZeroStore.ERP.Transfers;

namespace Whiskey.ZeroStore.ERP.Services.Implements
{
    public class <#= ClassName #>Service : ServiceBase, I<#= ClassName #>Contract
    {
        private readonly IRepository<<#= ClassName #>, int> _<#= ClassName #>Repository;
        public <#= ClassName #>Service(
            IRepository<<#= ClassName #>, int> _<#= ClassName #>Repository
            ) : base(_<#= ClassName #>Repository.UnitOfWork)
        {
            this._<#= ClassName #>Repository = _<#= ClassName #>Repository;
        }

        public IQueryable<<#= ClassName #>> Entities
        {
            get
            {
                return _<#= ClassName #>Repository.Entities;
            }
        }


        public OperationResult EnableOrDisable(bool enable, params int[] ids)
        {
            return OperationHelper.Try((opera) =>
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _<#= ClassName #>Repository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsEnabled = enable;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                }
                return OperationHelper.ReturnOperationResult(UnitOfWork.SaveChanges() > 0, opera);
            }, enable ? Operation.Enable : Operation.Disable);
        }

        public OperationResult Insert(params <#= ClassName #>[] entities)
        {
            return OperationHelper.Try((opera) =>
            {
                entities.CheckNotNull("entities");
                OperationResult result = _<#= ClassName #>Repository.Insert(entities,
                entity =>
                {
                    entity.CreatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                });
                return result;
            }, Operation.Add);
        }

        public OperationResult DeleteOrRecovery(bool delete, params int[] ids)
        {
            return OperationHelper.Try((opera) =>
            {
                ids.CheckNotNull("ids");
                UnitOfWork.TransactionEnabled = true;
                var entities = _<#= ClassName #>Repository.Entities.Where(m => ids.Contains(m.Id));
                foreach (var entity in entities)
                {
                    entity.IsDeleted = delete;
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                }
                return OperationHelper.ReturnOperationResult(UnitOfWork.SaveChanges() > 0, opera);
            }, delete ? Operation.Delete : Operation.Recovery);
        }

        public OperationResult Update(params <#= ClassName #>[] entities)
        {
            return OperationHelper.Try((opera) =>
            {
                entities.CheckNotNull("entities");
                UnitOfWork.TransactionEnabled = true;
                OperationResult result = _<#= ClassName #>Repository.Update(entities,
                entity =>
                {
                    entity.UpdatedTime = DateTime.Now;
                    entity.OperatorId = AuthorityHelper.OperatorId;
                });
                int count = UnitOfWork.SaveChanges();
                return OperationHelper.ReturnOperationResult(count > 0, opera);
            }, Operation.Update);
        }

        public <#= ClassName #> View(int Id)
        {
            return _<#= ClassName #>Repository.GetByKey(Id);
        }

        public OperationResult Insert(params <#= ClassName #>Dto[] dtos)
        {
            return OperationHelper.Try((opera) =>
            {
                dtos.CheckNotNull("dtos");
                UnitOfWork.TransactionEnabled = true;
                OperationResult result = _<#= ClassName #>Repository.Insert(dtos, a => { },
                    (dto, entity) =>
                    {
                        entity.CreatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                int count = UnitOfWork.SaveChanges();
                return OperationHelper.ReturnOperationResult(count > 0, opera);
            }, Operation.Add);
        }

        public OperationResult Update(params <#= ClassName #>Dto[] dtos)
        {
            return OperationHelper.Try((opera) =>
            {
                dtos.CheckNotNull("dtos");
                UnitOfWork.TransactionEnabled = true;
                OperationResult result = _<#= ClassName #>Repository.Update(dtos, a => { },
                    (dto, entity) =>
                    {
                        entity.UpdatedTime = DateTime.Now;
                        entity.OperatorId = AuthorityHelper.OperatorId;
                        return entity;
                    });
                int count = UnitOfWork.SaveChanges();
                return OperationHelper.ReturnOperationResult(count > 0, opera);
            }, Operation.Update);
        }

        public <#= ClassName #>Dto Edit(int Id)
        {
            var entity = _<#= ClassName #>Repository.GetByKey(Id);
            Mapper.CreateMap<<#= ClassName #>, <#= ClassName #>Dto>();
            var dto = Mapper.Map<<#= ClassName #>, <#= ClassName #>Dto>(entity);
            return dto;
        }
    }
}

<# manager.EndBlock(); #>

//创建Transfer Entities文件
<# manager.StartNewFile(fileTransferPath); #>

using System;
using Whiskey.Core.Data;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Whiskey.ZeroStore.ERP.Models;

namespace Whiskey.ZeroStore.ERP.Transfers
{
    public class <#= ClassName #>Dto : IAddDto, IEditDto<int>
    {
        public int Id { get; set; }

        [Display(Name = "名称")]
        [StringLength(20, ErrorMessage = "最大长度不能超过{1}个字符")]
        public virtual string Name { get; set; }
    }
}


<# manager.EndBlock(); #>

//创建Sql文件
<# manager.StartNewFile(fileSqlPath); #>

/*
@author:Jason Davies
@description:添加一个新模块,对应ERP左侧菜单项
*/


SELECT TOP 5 * FROM A_MODULE WHERE MODULENAME LIKE N'%异业联盟%'

--父级模块Id【需要自己确认Id是否正确】
DECLARE @PARENTID INT = 1
--模块名称
DECLARE @MODULENAME NVARCHAR(50) = '<#= MODULENAME #>'
--区域名称
DECLARE @AREA NVARCHAR(50) = '<#= Area #>'
--控制器名称
DECLARE @CONTROLLER NVARCHAR(50) = '<#= ClassName #>'
--是否自动启用角色权限，1启用 0不启用
DECLARE @ENABLEROLEPER INT = 1
--角色Id【超级管理员】
DECLARE @ROLEID INT = 1

BEGIN TRY
BEGIN TRANSACTION;

--添加模块
INSERT INTO A_MODULE (PARENTID,MODULENAME,ICON,MODULETYPE,DESCRIPTION,PAGEURL,PAGEAREA,PAGECONTROLLER,PAGEACTION,ONCLICKSCRIPTS,ISSHOW,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,OVERRIDEURL,ISCOMPLETERULE)
				VALUES(@PARENTID,@MODULENAME,NULL,1,@MODULENAME, '/'+@AREA+'/'+@CONTROLLER+'/Index',@AREA,@CONTROLLER,N'Index',null,1,0,1,0,GETDATE(),GETDATE(),9,null,0)

----添加模块对应基本权限----
declare @MODULEID INT=@@Identity

INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'加载页面',N'载入页面',N'Index',N'fa-search',N'btn btn-primary btn-padding-right',null,N'Index',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,1)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'加载数据',N'载入数据',N'List',N'fa-search',N'btn btn-primary btn-padding-right',null,N'List',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,1)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'新增',N'添加数据',N'Create',N'fa-search',N'btn btn-primary btn-padding-right',N'#Create',N'Create',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,null)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'修改',N'修改信息',N'Update',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#Update',N'Update',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,null)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'查看数据详情',N'查看数据详情',N'View',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#View',N'View',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,1)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'禁用数据',N'禁用数据',N'Disable',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#Disable',N'Disable',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,5)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'移除数据',N'移除数据',N'Remove',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#Remove',N'Remove',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,3)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'打印预览数据',N'打印预览数据',N'Print',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#Print',N'Print',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,1)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'导出数据',N'导出数据',N'Export',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#Export',N'Export',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,1)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'批量删除',N'批量删除',N'RemoveAll',N'fa-pencil',N'btn btn-xs  btn-padding-right',N'#RemoveAll',N'RemoveAll',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,3)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'恢复',N'将数据从回收站恢复',N'Recovery',N'fa-reply',N'btn btn-xs btn-padding-right',N'#Recovery',N'Recovery',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,3)
INSERT INTO A_PERMISSION (PERMISSIONNAME,DESCRIPTION,IDENTIFIER,ICON,STYLE,ONLYFLAG,ACTIONNAME,ONCLICKSCRIPTS,ISDISPLAYICON,ISDISPLAYTEXT,MODULEID,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID,AREANAME,CONTROLLNAME,REQUESTURL,GTYPE) 
					VALUES(N'启用',N'启用数据',N'Enable',N'fa-check',N'btn btn-xs  btn-padding-right',N'#Enable',N'Enable',null,0,0,@MODULEID,0,1,0,GETDATE(),GETDATE(),9,@AREA,@CONTROLLER,null,5)

-----启用角色权限-----
IF(@ENABLEROLEPER=1)
BEGIN
	
	DECLARE @PERMISSIONID INT
	DECLARE MY_CURSOR CURSOR
	FOR (SELECT ID FROM A_PERMISSION WHERE MODULEID=@MODULEID)
	OPEN MY_CURSOR
	FETCH NEXT FROM MY_CURSOR INTO @PERMISSIONID
	WHILE @@FETCH_STATUS=0
	BEGIN
	
		DECLARE @CUR_COUNT INT =0
		SELECT @CUR_COUNT = COUNT(*) FROM A_ROLE_PERMISSION_RELATION WHERE ROLEID=@ROLEID AND PERMISSIONSID=@PERMISSIONID
		--如果该角色的权限不存在则添加
		IF(@CUR_COUNT=0)
		BEGIN
			INSERT INTO A_ROLE_PERMISSION_RELATION (ROLEID,PERMISSIONSID,ISSHOW,ISDELETED,ISENABLED,[SEQUENCE],UPDATEDTIME,CREATEDTIME,OPERATORID)
											VALUES(@ROLEID,@PERMISSIONID,1,0,1,0,GETDATE(),GETDATE(),9)
		END
		
	FETCH NEXT FROM MY_CURSOR INTO @PERMISSIONID;
	END
	--修改角色权重和更新时间
	UPDATE A_ROLE SET WEIGHT = WEIGHT+1,UPDATEDTIME=GETDATE(),OPERATORID=9 WHERE ID=@ROLEID
	
END

	COMMIT;
END TRY
BEGIN CATCH
	ROLLBACK;
END CATCH

<# manager.EndBlock(); #>

<# manager.Process(true);#>

<#
string mapperConfigPath = Path.Combine(fileTransferDirPath,"Configurations","MapperConfig.cs");

string strTxt = string.Empty;

using (StreamReader sr = new StreamReader(mapperConfigPath))
{
    var index = 0;
    while (!sr.EndOfStream)
    {
        var sTxt = sr.ReadLine();
        strTxt += sTxt + "\r\n";
        if (++index == 250)
        {
			strTxt+="            Mapper.CreateMap<"+ClassName+", "+ClassName+"Dto>();\r\n";
			strTxt+="            Mapper.CreateMap<"+ClassName+"Dto, "+ClassName+">();\r\n";
        }
    }
}
using (StreamWriter sw = new StreamWriter(mapperConfigPath, false))
{
    sw.Write(strTxt);
    sw.Flush();
}
#>